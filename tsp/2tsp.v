//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Nov 22 16:11:21 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 9
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @adj_matrix = internal unnamed_addr global [24 x [24 x i32]] zeroinitializer, align 4
`define TAG_g_adj_matrix `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_adj_matrix_a {`TAG_g_adj_matrix, 23'd0}
// @bsf_touched_vertex = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_bsf_touched_vertex `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_bsf_touched_vertex_a {`TAG_g_bsf_touched_vertex, 23'd0}
// @edges = internal global [576 x %struct.edge] zeroinitializer, align 2
`define TAG_g_edges `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_edges_a {`TAG_g_edges, 23'd0}
// @euler_path = internal unnamed_addr global [46 x i32] zeroinitializer, align 4
`define TAG_g_euler_path `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_euler_path_a {`TAG_g_euler_path, 23'd0}
// @hamilton_path = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_hamilton_path `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_hamilton_path_a {`TAG_g_hamilton_path, 23'd0}
// @heap = internal unnamed_addr global [577 x %struct.edge*] zeroinitializer, align 4
`define TAG_g_heap `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_heap_a {`TAG_g_heap, 23'd0}
// @mst_edges = internal unnamed_addr global [46 x %struct.edge] zeroinitializer, align 2
`define TAG_g_mst_edges `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_mst_edges_a {`TAG_g_mst_edges, 23'd0}
// @queue = internal unnamed_addr global [24 x i16] zeroinitializer, align 2
`define TAG_g_queue `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_queue_a {`TAG_g_queue, 23'd0}
// @ufind_groups = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_ufind_groups `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ufind_groups_a {`TAG_g_ufind_groups, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [9:0] adj_matrix_address_a;
reg [9:0] adj_matrix_address_b;
reg adj_matrix_write_enable_a;
reg adj_matrix_write_enable_b;
reg [31:0] adj_matrix_in_a;
reg [31:0] adj_matrix_in_b;
wire [31:0] adj_matrix_out_a;
wire [31:0] adj_matrix_out_b;

// @adj_matrix = internal unnamed_addr global [24 x [24 x i32]] zeroinitializer, align 4
ram_dual_port adj_matrix (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( adj_matrix_address_a ),
	.address_b( adj_matrix_address_b ),
	.wren_a( adj_matrix_write_enable_a ),
	.wren_b( adj_matrix_write_enable_b ),
	.data_a( adj_matrix_in_a ),
	.data_b( adj_matrix_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( adj_matrix_out_a ),
	.q_b( adj_matrix_out_b)
);
defparam adj_matrix.width_a = 32;
defparam adj_matrix.width_b = 32;
defparam adj_matrix.widthad_a = 10;
defparam adj_matrix.widthad_b = 10;
defparam adj_matrix.width_be_a = 1;
defparam adj_matrix.width_be_b = 1;
defparam adj_matrix.numwords_a = 576;
defparam adj_matrix.numwords_b = 576;
defparam adj_matrix.latency = ram_latency;
defparam adj_matrix.init_file = "adj_matrix.mif";

reg [4:0] ufind_groups_address_a;
reg [4:0] ufind_groups_address_b;
reg ufind_groups_write_enable_a;
reg ufind_groups_write_enable_b;
reg [31:0] ufind_groups_in_a;
reg [31:0] ufind_groups_in_b;
wire [31:0] ufind_groups_out_a;
wire [31:0] ufind_groups_out_b;

// @ufind_groups = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port ufind_groups (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ufind_groups_address_a ),
	.address_b( ufind_groups_address_b ),
	.wren_a( ufind_groups_write_enable_a ),
	.wren_b( ufind_groups_write_enable_b ),
	.data_a( ufind_groups_in_a ),
	.data_b( ufind_groups_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ufind_groups_out_a ),
	.q_b( ufind_groups_out_b)
);
defparam ufind_groups.width_a = 32;
defparam ufind_groups.width_b = 32;
defparam ufind_groups.widthad_a = 5;
defparam ufind_groups.widthad_b = 5;
defparam ufind_groups.width_be_a = 1;
defparam ufind_groups.width_be_b = 1;
defparam ufind_groups.numwords_a = 24;
defparam ufind_groups.numwords_b = 24;
defparam ufind_groups.latency = ram_latency;
defparam ufind_groups.init_file = "ufind_groups.mif";

reg [9:0] edges_address_a;
reg [9:0] edges_address_b;
reg edges_write_enable_a;
reg edges_write_enable_b;
reg [63:0] edges_in_a;
reg [63:0] edges_in_b;
wire [63:0] edges_out_a;
wire [63:0] edges_out_b;
reg [8-1:0] edges_byteena_a;
reg [8-1:0] edges_byteena_b;

// @edges = internal global [576 x %struct.edge] zeroinitializer, align 2
ram_dual_port edges (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( edges_address_a ),
	.address_b( edges_address_b ),
	.wren_a( edges_write_enable_a ),
	.wren_b( edges_write_enable_b ),
	.data_a( edges_in_a ),
	.data_b( edges_in_b ),
	.byteena_a( edges_byteena_a ),
	.byteena_b( edges_byteena_b ),
	.q_a( edges_out_a ),
	.q_b( edges_out_b)
);
defparam edges.width_a = 64;
defparam edges.width_b = 64;
defparam edges.widthad_a = 10;
defparam edges.widthad_b = 10;
defparam edges.width_be_a = 8;
defparam edges.width_be_b = 8;
defparam edges.numwords_a = 576;
defparam edges.numwords_b = 576;
defparam edges.latency = ram_latency;
defparam edges.init_file = "edges.mif";

reg [9:0] heap_address_a;
reg [9:0] heap_address_b;
reg heap_write_enable_a;
reg heap_write_enable_b;
reg [31:0] heap_in_a;
reg [31:0] heap_in_b;
wire [31:0] heap_out_a;
wire [31:0] heap_out_b;

// @heap = internal unnamed_addr global [577 x %struct.edge*] zeroinitializer, align 4
ram_dual_port heap (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( heap_address_a ),
	.address_b( heap_address_b ),
	.wren_a( heap_write_enable_a ),
	.wren_b( heap_write_enable_b ),
	.data_a( heap_in_a ),
	.data_b( heap_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( heap_out_a ),
	.q_b( heap_out_b)
);
defparam heap.width_a = 32;
defparam heap.width_b = 32;
defparam heap.widthad_a = 10;
defparam heap.widthad_b = 10;
defparam heap.width_be_a = 1;
defparam heap.width_be_b = 1;
defparam heap.numwords_a = 577;
defparam heap.numwords_b = 577;
defparam heap.latency = ram_latency;
defparam heap.init_file = "heap.mif";

reg [5:0] mst_edges_address_a;
reg [5:0] mst_edges_address_b;
reg mst_edges_write_enable_a;
reg mst_edges_write_enable_b;
reg [63:0] mst_edges_in_a;
reg [63:0] mst_edges_in_b;
wire [63:0] mst_edges_out_a;
wire [63:0] mst_edges_out_b;
reg [8-1:0] mst_edges_byteena_a;
reg [8-1:0] mst_edges_byteena_b;

// @mst_edges = internal unnamed_addr global [46 x %struct.edge] zeroinitializer, align 2
ram_dual_port mst_edges (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( mst_edges_address_a ),
	.address_b( mst_edges_address_b ),
	.wren_a( mst_edges_write_enable_a ),
	.wren_b( mst_edges_write_enable_b ),
	.data_a( mst_edges_in_a ),
	.data_b( mst_edges_in_b ),
	.byteena_a( mst_edges_byteena_a ),
	.byteena_b( mst_edges_byteena_b ),
	.q_a( mst_edges_out_a ),
	.q_b( mst_edges_out_b)
);
defparam mst_edges.width_a = 64;
defparam mst_edges.width_b = 64;
defparam mst_edges.widthad_a = 6;
defparam mst_edges.widthad_b = 6;
defparam mst_edges.width_be_a = 8;
defparam mst_edges.width_be_b = 8;
defparam mst_edges.numwords_a = 46;
defparam mst_edges.numwords_b = 46;
defparam mst_edges.latency = ram_latency;
defparam mst_edges.init_file = "mst_edges.mif";

reg [4:0] bsf_touched_vertex_address_a;
reg [4:0] bsf_touched_vertex_address_b;
reg bsf_touched_vertex_write_enable_a;
reg bsf_touched_vertex_write_enable_b;
reg [31:0] bsf_touched_vertex_in_a;
reg [31:0] bsf_touched_vertex_in_b;
wire [31:0] bsf_touched_vertex_out_a;
wire [31:0] bsf_touched_vertex_out_b;

// @bsf_touched_vertex = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port bsf_touched_vertex (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bsf_touched_vertex_address_a ),
	.address_b( bsf_touched_vertex_address_b ),
	.wren_a( bsf_touched_vertex_write_enable_a ),
	.wren_b( bsf_touched_vertex_write_enable_b ),
	.data_a( bsf_touched_vertex_in_a ),
	.data_b( bsf_touched_vertex_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( bsf_touched_vertex_out_a ),
	.q_b( bsf_touched_vertex_out_b)
);
defparam bsf_touched_vertex.width_a = 32;
defparam bsf_touched_vertex.width_b = 32;
defparam bsf_touched_vertex.widthad_a = 5;
defparam bsf_touched_vertex.widthad_b = 5;
defparam bsf_touched_vertex.width_be_a = 1;
defparam bsf_touched_vertex.width_be_b = 1;
defparam bsf_touched_vertex.numwords_a = 24;
defparam bsf_touched_vertex.numwords_b = 24;
defparam bsf_touched_vertex.latency = ram_latency;
defparam bsf_touched_vertex.init_file = "bsf_touched_vertex.mif";

reg [4:0] queue_address_a;
reg [4:0] queue_address_b;
reg queue_write_enable_a;
reg queue_write_enable_b;
reg [15:0] queue_in_a;
reg [15:0] queue_in_b;
wire [15:0] queue_out_a;
wire [15:0] queue_out_b;

// @queue = internal unnamed_addr global [24 x i16] zeroinitializer, align 2
ram_dual_port queue (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( queue_address_a ),
	.address_b( queue_address_b ),
	.wren_a( queue_write_enable_a ),
	.wren_b( queue_write_enable_b ),
	.data_a( queue_in_a ),
	.data_b( queue_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( queue_out_a ),
	.q_b( queue_out_b)
);
defparam queue.width_a = 16;
defparam queue.width_b = 16;
defparam queue.widthad_a = 5;
defparam queue.widthad_b = 5;
defparam queue.width_be_a = 1;
defparam queue.width_be_b = 1;
defparam queue.numwords_a = 24;
defparam queue.numwords_b = 24;
defparam queue.latency = ram_latency;
defparam queue.init_file = "queue.mif";

reg [5:0] euler_path_address_a;
reg [5:0] euler_path_address_b;
reg euler_path_write_enable_a;
reg euler_path_write_enable_b;
reg [31:0] euler_path_in_a;
reg [31:0] euler_path_in_b;
wire [31:0] euler_path_out_a;
wire [31:0] euler_path_out_b;

// @euler_path = internal unnamed_addr global [46 x i32] zeroinitializer, align 4
ram_dual_port euler_path (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( euler_path_address_a ),
	.address_b( euler_path_address_b ),
	.wren_a( euler_path_write_enable_a ),
	.wren_b( euler_path_write_enable_b ),
	.data_a( euler_path_in_a ),
	.data_b( euler_path_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( euler_path_out_a ),
	.q_b( euler_path_out_b)
);
defparam euler_path.width_a = 32;
defparam euler_path.width_b = 32;
defparam euler_path.widthad_a = 6;
defparam euler_path.widthad_b = 6;
defparam euler_path.width_be_a = 1;
defparam euler_path.width_be_b = 1;
defparam euler_path.numwords_a = 46;
defparam euler_path.numwords_b = 46;
defparam euler_path.latency = ram_latency;
defparam euler_path.init_file = "euler_path.mif";

reg [4:0] hamilton_path_address_a;
reg [4:0] hamilton_path_address_b;
reg hamilton_path_write_enable_a;
reg hamilton_path_write_enable_b;
reg [31:0] hamilton_path_in_a;
reg [31:0] hamilton_path_in_b;
wire [31:0] hamilton_path_out_a;
wire [31:0] hamilton_path_out_b;

// @hamilton_path = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port hamilton_path (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( hamilton_path_address_a ),
	.address_b( hamilton_path_address_b ),
	.wren_a( hamilton_path_write_enable_a ),
	.wren_b( hamilton_path_write_enable_b ),
	.data_a( hamilton_path_in_a ),
	.data_b( hamilton_path_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( hamilton_path_out_a ),
	.q_b( hamilton_path_out_b)
);
defparam hamilton_path.width_a = 32;
defparam hamilton_path.width_b = 32;
defparam hamilton_path.widthad_a = 5;
defparam hamilton_path.widthad_b = 5;
defparam hamilton_path.width_be_a = 1;
defparam hamilton_path.width_be_b = 1;
defparam hamilton_path.numwords_a = 24;
defparam hamilton_path.numwords_b = 24;
defparam hamilton_path.latency = ram_latency;
defparam hamilton_path.init_file = "hamilton_path.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_adj_matrix_a;
assign select_adj_matrix_a = (tag_a == `TAG_g_adj_matrix);
reg [ram_latency:0] select_adj_matrix_reg_a;
wire [31:0] memory_controller_adj_matrix_out_a;
assign memory_controller_adj_matrix_out_a = {32{ select_adj_matrix_reg_a[ram_latency]}} & adj_matrix_out_a;

wire select_ufind_groups_a;
assign select_ufind_groups_a = (tag_a == `TAG_g_ufind_groups);
reg [ram_latency:0] select_ufind_groups_reg_a;
wire [31:0] memory_controller_ufind_groups_out_a;
assign memory_controller_ufind_groups_out_a = {32{ select_ufind_groups_reg_a[ram_latency]}} & ufind_groups_out_a;

wire select_edges_a;
assign select_edges_a = (tag_a == `TAG_g_edges);
reg [ram_latency:0] select_edges_reg_a;
reg [63:0] memory_controller_edges_out_a;
wire [63:0] memory_controller_edges_out_struct_a;
assign memory_controller_edges_out_struct_a = {64{ select_edges_reg_a[ram_latency]}} & edges_out_a;

wire select_heap_a;
assign select_heap_a = (tag_a == `TAG_g_heap);
reg [ram_latency:0] select_heap_reg_a;
wire [31:0] memory_controller_heap_out_a;
assign memory_controller_heap_out_a = {32{ select_heap_reg_a[ram_latency]}} & heap_out_a;

wire select_mst_edges_a;
assign select_mst_edges_a = (tag_a == `TAG_g_mst_edges);
reg [ram_latency:0] select_mst_edges_reg_a;
reg [63:0] memory_controller_mst_edges_out_a;
wire [63:0] memory_controller_mst_edges_out_struct_a;
assign memory_controller_mst_edges_out_struct_a = {64{ select_mst_edges_reg_a[ram_latency]}} & mst_edges_out_a;

wire select_bsf_touched_vertex_a;
assign select_bsf_touched_vertex_a = (tag_a == `TAG_g_bsf_touched_vertex);
reg [ram_latency:0] select_bsf_touched_vertex_reg_a;
wire [31:0] memory_controller_bsf_touched_vertex_out_a;
assign memory_controller_bsf_touched_vertex_out_a = {32{ select_bsf_touched_vertex_reg_a[ram_latency]}} & bsf_touched_vertex_out_a;

wire select_queue_a;
assign select_queue_a = (tag_a == `TAG_g_queue);
reg [ram_latency:0] select_queue_reg_a;
wire [15:0] memory_controller_queue_out_a;
assign memory_controller_queue_out_a = {16{ select_queue_reg_a[ram_latency]}} & queue_out_a;

wire select_euler_path_a;
assign select_euler_path_a = (tag_a == `TAG_g_euler_path);
reg [ram_latency:0] select_euler_path_reg_a;
wire [31:0] memory_controller_euler_path_out_a;
assign memory_controller_euler_path_out_a = {32{ select_euler_path_reg_a[ram_latency]}} & euler_path_out_a;

wire select_hamilton_path_a;
assign select_hamilton_path_a = (tag_a == `TAG_g_hamilton_path);
reg [ram_latency:0] select_hamilton_path_reg_a;
wire [31:0] memory_controller_hamilton_path_out_a;
assign memory_controller_hamilton_path_out_a = {32{ select_hamilton_path_reg_a[ram_latency]}} & hamilton_path_out_a;

always @(*)
begin
	adj_matrix_address_a = memory_controller_address_a [10-1+2:2] & {10{select_adj_matrix_a}};
	adj_matrix_write_enable_a = memory_controller_write_enable_a & select_adj_matrix_a;
	adj_matrix_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ufind_groups_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ufind_groups_a}};
	ufind_groups_write_enable_a = memory_controller_write_enable_a & select_ufind_groups_a;
	ufind_groups_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	edges_address_a = memory_controller_address_a[13-1:3] & {10{select_edges_a}};
	edges_write_enable_a = memory_controller_write_enable_a & select_edges_a;
				edges_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				edges_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				edges_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					edges_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					edges_byteena_a = 8'b00001111;
				end
				else
				begin
					edges_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					edges_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						edges_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						edges_byteena_a = 8'd3;
					end
					1:
					begin
						edges_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						edges_byteena_a = 8'd12;
					end
					2:
					begin
						edges_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						edges_byteena_a = 8'd48;
					end
					3:
					begin
						edges_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						edges_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						edges_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd1;
					end
					1:
					begin
						edges_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd2;
					end
					2:
					begin
						edges_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd4;
					end
					3:
					begin
						edges_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd8;
					end
					4:
					begin
						edges_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd16;
					end
					5:
					begin
						edges_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd32;
					end
					6:
					begin
						edges_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd64;
					end
					7:
					begin
						edges_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						edges_byteena_a = 8'd128;
					end
			endcase
		endcase

	heap_address_a = memory_controller_address_a [10-1+2:2] & {10{select_heap_a}};
	heap_write_enable_a = memory_controller_write_enable_a & select_heap_a;
	heap_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	mst_edges_address_a = memory_controller_address_a[9-1:3] & {6{select_mst_edges_a}};
	mst_edges_write_enable_a = memory_controller_write_enable_a & select_mst_edges_a;
				mst_edges_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				mst_edges_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				mst_edges_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					mst_edges_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					mst_edges_byteena_a = 8'b00001111;
				end
				else
				begin
					mst_edges_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					mst_edges_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						mst_edges_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						mst_edges_byteena_a = 8'd3;
					end
					1:
					begin
						mst_edges_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						mst_edges_byteena_a = 8'd12;
					end
					2:
					begin
						mst_edges_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						mst_edges_byteena_a = 8'd48;
					end
					3:
					begin
						mst_edges_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						mst_edges_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						mst_edges_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd1;
					end
					1:
					begin
						mst_edges_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd2;
					end
					2:
					begin
						mst_edges_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd4;
					end
					3:
					begin
						mst_edges_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd8;
					end
					4:
					begin
						mst_edges_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd16;
					end
					5:
					begin
						mst_edges_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd32;
					end
					6:
					begin
						mst_edges_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd64;
					end
					7:
					begin
						mst_edges_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						mst_edges_byteena_a = 8'd128;
					end
			endcase
		endcase

	bsf_touched_vertex_address_a = memory_controller_address_a [5-1+2:2] & {5{select_bsf_touched_vertex_a}};
	bsf_touched_vertex_write_enable_a = memory_controller_write_enable_a & select_bsf_touched_vertex_a;
	bsf_touched_vertex_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	queue_address_a = memory_controller_address_a [5-1+1:1] & {5{select_queue_a}};
	queue_write_enable_a = memory_controller_write_enable_a & select_queue_a;
	queue_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	euler_path_address_a = memory_controller_address_a [6-1+2:2] & {6{select_euler_path_a}};
	euler_path_write_enable_a = memory_controller_write_enable_a & select_euler_path_a;
	euler_path_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	hamilton_path_address_a = memory_controller_address_a [5-1+2:2] & {5{select_hamilton_path_a}};
	hamilton_path_write_enable_a = memory_controller_write_enable_a & select_hamilton_path_a;
	hamilton_path_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_adj_matrix_reg_a[ram_latency]}} | {2{select_ufind_groups_reg_a[ram_latency]}} | {2{select_heap_reg_a[ram_latency]}} | {2{select_bsf_touched_vertex_reg_a[ram_latency]}} | {1{select_queue_reg_a[ram_latency]}} | {2{select_euler_path_reg_a[ram_latency]}} | {2{select_hamilton_path_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_edges_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_edges_out_a[64-1:0] = memory_controller_edges_out_struct_a[64-1:0];
		1: memory_controller_edges_out_a[32-1:0] = memory_controller_edges_out_struct_a[40-1:8];
		2: memory_controller_edges_out_a[32-1:0] = memory_controller_edges_out_struct_a[48-1:16];
		3: memory_controller_edges_out_a[32-1:0] = memory_controller_edges_out_struct_a[56-1:24];
		4: memory_controller_edges_out_a[32-1:0] = memory_controller_edges_out_struct_a[64-1:32];
		5: memory_controller_edges_out_a[16-1:0] = memory_controller_edges_out_struct_a[56-1:40];
		6: memory_controller_edges_out_a[16-1:0] = memory_controller_edges_out_struct_a[64-1:48];
		7: memory_controller_edges_out_a[8-1:0] = memory_controller_edges_out_struct_a[64-1:56];
	endcase

	memory_controller_mst_edges_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_mst_edges_out_a[64-1:0] = memory_controller_mst_edges_out_struct_a[64-1:0];
		1: memory_controller_mst_edges_out_a[32-1:0] = memory_controller_mst_edges_out_struct_a[40-1:8];
		2: memory_controller_mst_edges_out_a[32-1:0] = memory_controller_mst_edges_out_struct_a[48-1:16];
		3: memory_controller_mst_edges_out_a[32-1:0] = memory_controller_mst_edges_out_struct_a[56-1:24];
		4: memory_controller_mst_edges_out_a[32-1:0] = memory_controller_mst_edges_out_struct_a[64-1:32];
		5: memory_controller_mst_edges_out_a[16-1:0] = memory_controller_mst_edges_out_struct_a[56-1:40];
		6: memory_controller_mst_edges_out_a[16-1:0] = memory_controller_mst_edges_out_struct_a[64-1:48];
		7: memory_controller_mst_edges_out_a[8-1:0] = memory_controller_mst_edges_out_struct_a[64-1:56];
	endcase

	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_adj_matrix_out_a | memory_controller_ufind_groups_out_a | memory_controller_edges_out_a | memory_controller_heap_out_a | memory_controller_mst_edges_out_a | memory_controller_bsf_touched_vertex_out_a | memory_controller_queue_out_a | memory_controller_euler_path_out_a | memory_controller_hamilton_path_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_adj_matrix_reg_a[j+1] <= select_adj_matrix_reg_a[j];
select_ufind_groups_reg_a[j+1] <= select_ufind_groups_reg_a[j];
select_edges_reg_a[j+1] <= select_edges_reg_a[j];
select_heap_reg_a[j+1] <= select_heap_reg_a[j];
select_mst_edges_reg_a[j+1] <= select_mst_edges_reg_a[j];
select_bsf_touched_vertex_reg_a[j+1] <= select_bsf_touched_vertex_reg_a[j];
select_queue_reg_a[j+1] <= select_queue_reg_a[j];
select_euler_path_reg_a[j+1] <= select_euler_path_reg_a[j];
select_hamilton_path_reg_a[j+1] <= select_hamilton_path_reg_a[j];
end
always @(*)
begin
select_adj_matrix_reg_a[0] <= select_adj_matrix_a;
select_ufind_groups_reg_a[0] <= select_ufind_groups_a;
select_edges_reg_a[0] <= select_edges_a;
select_heap_reg_a[0] <= select_heap_a;
select_mst_edges_reg_a[0] <= select_mst_edges_a;
select_bsf_touched_vertex_reg_a[0] <= select_bsf_touched_vertex_a;
select_queue_reg_a[0] <= select_queue_a;
select_euler_path_reg_a[0] <= select_euler_path_a;
select_hamilton_path_reg_a[0] <= select_hamilton_path_a;
end

reg [2:0] select_not_struct_b;

wire select_adj_matrix_b;
assign select_adj_matrix_b = (tag_b == `TAG_g_adj_matrix);
reg [ram_latency:0] select_adj_matrix_reg_b;
wire [31:0] memory_controller_adj_matrix_out_b;
assign memory_controller_adj_matrix_out_b = {32{ select_adj_matrix_reg_b[ram_latency]}} & adj_matrix_out_b;

wire select_ufind_groups_b;
assign select_ufind_groups_b = (tag_b == `TAG_g_ufind_groups);
reg [ram_latency:0] select_ufind_groups_reg_b;
wire [31:0] memory_controller_ufind_groups_out_b;
assign memory_controller_ufind_groups_out_b = {32{ select_ufind_groups_reg_b[ram_latency]}} & ufind_groups_out_b;

wire select_edges_b;
assign select_edges_b = (tag_b == `TAG_g_edges);
reg [ram_latency:0] select_edges_reg_b;
reg [63:0] memory_controller_edges_out_b;
wire [63:0] memory_controller_edges_out_struct_b;
assign memory_controller_edges_out_struct_b = {64{ select_edges_reg_b[ram_latency]}} & edges_out_b;

wire select_heap_b;
assign select_heap_b = (tag_b == `TAG_g_heap);
reg [ram_latency:0] select_heap_reg_b;
wire [31:0] memory_controller_heap_out_b;
assign memory_controller_heap_out_b = {32{ select_heap_reg_b[ram_latency]}} & heap_out_b;

wire select_mst_edges_b;
assign select_mst_edges_b = (tag_b == `TAG_g_mst_edges);
reg [ram_latency:0] select_mst_edges_reg_b;
reg [63:0] memory_controller_mst_edges_out_b;
wire [63:0] memory_controller_mst_edges_out_struct_b;
assign memory_controller_mst_edges_out_struct_b = {64{ select_mst_edges_reg_b[ram_latency]}} & mst_edges_out_b;

wire select_bsf_touched_vertex_b;
assign select_bsf_touched_vertex_b = (tag_b == `TAG_g_bsf_touched_vertex);
reg [ram_latency:0] select_bsf_touched_vertex_reg_b;
wire [31:0] memory_controller_bsf_touched_vertex_out_b;
assign memory_controller_bsf_touched_vertex_out_b = {32{ select_bsf_touched_vertex_reg_b[ram_latency]}} & bsf_touched_vertex_out_b;

wire select_queue_b;
assign select_queue_b = (tag_b == `TAG_g_queue);
reg [ram_latency:0] select_queue_reg_b;
wire [15:0] memory_controller_queue_out_b;
assign memory_controller_queue_out_b = {16{ select_queue_reg_b[ram_latency]}} & queue_out_b;

wire select_euler_path_b;
assign select_euler_path_b = (tag_b == `TAG_g_euler_path);
reg [ram_latency:0] select_euler_path_reg_b;
wire [31:0] memory_controller_euler_path_out_b;
assign memory_controller_euler_path_out_b = {32{ select_euler_path_reg_b[ram_latency]}} & euler_path_out_b;

wire select_hamilton_path_b;
assign select_hamilton_path_b = (tag_b == `TAG_g_hamilton_path);
reg [ram_latency:0] select_hamilton_path_reg_b;
wire [31:0] memory_controller_hamilton_path_out_b;
assign memory_controller_hamilton_path_out_b = {32{ select_hamilton_path_reg_b[ram_latency]}} & hamilton_path_out_b;

always @(*)
begin
	adj_matrix_address_b = memory_controller_address_b [10-1+2:2] & {10{select_adj_matrix_b}};
	adj_matrix_write_enable_b = memory_controller_write_enable_b & select_adj_matrix_b;
	adj_matrix_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ufind_groups_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ufind_groups_b}};
	ufind_groups_write_enable_b = memory_controller_write_enable_b & select_ufind_groups_b;
	ufind_groups_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	edges_address_b = memory_controller_address_b[13-1:3] & {10{select_edges_b}};
	edges_write_enable_b = memory_controller_write_enable_b & select_edges_b;
				edges_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				edges_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				edges_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					edges_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					edges_byteena_b = 8'b00001111;
				end
				else
				begin
					edges_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					edges_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						edges_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						edges_byteena_b = 8'd3;
					end
					1:
					begin
						edges_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						edges_byteena_b = 8'd12;
					end
					2:
					begin
						edges_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						edges_byteena_b = 8'd48;
					end
					3:
					begin
						edges_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						edges_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						edges_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd1;
					end
					1:
					begin
						edges_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd2;
					end
					2:
					begin
						edges_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd4;
					end
					3:
					begin
						edges_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd8;
					end
					4:
					begin
						edges_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd16;
					end
					5:
					begin
						edges_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd32;
					end
					6:
					begin
						edges_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd64;
					end
					7:
					begin
						edges_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						edges_byteena_b = 8'd128;
					end
			endcase
		endcase

	heap_address_b = memory_controller_address_b [10-1+2:2] & {10{select_heap_b}};
	heap_write_enable_b = memory_controller_write_enable_b & select_heap_b;
	heap_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	mst_edges_address_b = memory_controller_address_b[9-1:3] & {6{select_mst_edges_b}};
	mst_edges_write_enable_b = memory_controller_write_enable_b & select_mst_edges_b;
				mst_edges_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				mst_edges_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				mst_edges_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					mst_edges_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					mst_edges_byteena_b = 8'b00001111;
				end
				else
				begin
					mst_edges_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					mst_edges_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						mst_edges_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						mst_edges_byteena_b = 8'd3;
					end
					1:
					begin
						mst_edges_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						mst_edges_byteena_b = 8'd12;
					end
					2:
					begin
						mst_edges_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						mst_edges_byteena_b = 8'd48;
					end
					3:
					begin
						mst_edges_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						mst_edges_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						mst_edges_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd1;
					end
					1:
					begin
						mst_edges_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd2;
					end
					2:
					begin
						mst_edges_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd4;
					end
					3:
					begin
						mst_edges_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd8;
					end
					4:
					begin
						mst_edges_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd16;
					end
					5:
					begin
						mst_edges_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd32;
					end
					6:
					begin
						mst_edges_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd64;
					end
					7:
					begin
						mst_edges_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						mst_edges_byteena_b = 8'd128;
					end
			endcase
		endcase

	bsf_touched_vertex_address_b = memory_controller_address_b [5-1+2:2] & {5{select_bsf_touched_vertex_b}};
	bsf_touched_vertex_write_enable_b = memory_controller_write_enable_b & select_bsf_touched_vertex_b;
	bsf_touched_vertex_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	queue_address_b = memory_controller_address_b [5-1+1:1] & {5{select_queue_b}};
	queue_write_enable_b = memory_controller_write_enable_b & select_queue_b;
	queue_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	euler_path_address_b = memory_controller_address_b [6-1+2:2] & {6{select_euler_path_b}};
	euler_path_write_enable_b = memory_controller_write_enable_b & select_euler_path_b;
	euler_path_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	hamilton_path_address_b = memory_controller_address_b [5-1+2:2] & {5{select_hamilton_path_b}};
	hamilton_path_write_enable_b = memory_controller_write_enable_b & select_hamilton_path_b;
	hamilton_path_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_adj_matrix_reg_b[ram_latency]}} | {2{select_ufind_groups_reg_b[ram_latency]}} | {2{select_heap_reg_b[ram_latency]}} | {2{select_bsf_touched_vertex_reg_b[ram_latency]}} | {1{select_queue_reg_b[ram_latency]}} | {2{select_euler_path_reg_b[ram_latency]}} | {2{select_hamilton_path_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_edges_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_edges_out_b[64-1:0] = memory_controller_edges_out_struct_b[64-1:0];
		1: memory_controller_edges_out_b[32-1:0] = memory_controller_edges_out_struct_b[40-1:8];
		2: memory_controller_edges_out_b[32-1:0] = memory_controller_edges_out_struct_b[48-1:16];
		3: memory_controller_edges_out_b[32-1:0] = memory_controller_edges_out_struct_b[56-1:24];
		4: memory_controller_edges_out_b[32-1:0] = memory_controller_edges_out_struct_b[64-1:32];
		5: memory_controller_edges_out_b[16-1:0] = memory_controller_edges_out_struct_b[56-1:40];
		6: memory_controller_edges_out_b[16-1:0] = memory_controller_edges_out_struct_b[64-1:48];
		7: memory_controller_edges_out_b[8-1:0] = memory_controller_edges_out_struct_b[64-1:56];
	endcase

	memory_controller_mst_edges_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_mst_edges_out_b[64-1:0] = memory_controller_mst_edges_out_struct_b[64-1:0];
		1: memory_controller_mst_edges_out_b[32-1:0] = memory_controller_mst_edges_out_struct_b[40-1:8];
		2: memory_controller_mst_edges_out_b[32-1:0] = memory_controller_mst_edges_out_struct_b[48-1:16];
		3: memory_controller_mst_edges_out_b[32-1:0] = memory_controller_mst_edges_out_struct_b[56-1:24];
		4: memory_controller_mst_edges_out_b[32-1:0] = memory_controller_mst_edges_out_struct_b[64-1:32];
		5: memory_controller_mst_edges_out_b[16-1:0] = memory_controller_mst_edges_out_struct_b[56-1:40];
		6: memory_controller_mst_edges_out_b[16-1:0] = memory_controller_mst_edges_out_struct_b[64-1:48];
		7: memory_controller_mst_edges_out_b[8-1:0] = memory_controller_mst_edges_out_struct_b[64-1:56];
	endcase

	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_adj_matrix_out_b | memory_controller_ufind_groups_out_b | memory_controller_edges_out_b | memory_controller_heap_out_b | memory_controller_mst_edges_out_b | memory_controller_bsf_touched_vertex_out_b | memory_controller_queue_out_b | memory_controller_euler_path_out_b | memory_controller_hamilton_path_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_adj_matrix_reg_b[j+1] <= select_adj_matrix_reg_b[j];
select_ufind_groups_reg_b[j+1] <= select_ufind_groups_reg_b[j];
select_edges_reg_b[j+1] <= select_edges_reg_b[j];
select_heap_reg_b[j+1] <= select_heap_reg_b[j];
select_mst_edges_reg_b[j+1] <= select_mst_edges_reg_b[j];
select_bsf_touched_vertex_reg_b[j+1] <= select_bsf_touched_vertex_reg_b[j];
select_queue_reg_b[j+1] <= select_queue_reg_b[j];
select_euler_path_reg_b[j+1] <= select_euler_path_reg_b[j];
select_hamilton_path_reg_b[j+1] <= select_hamilton_path_reg_b[j];
end
always @(*)
begin
select_adj_matrix_reg_b[0] <= select_adj_matrix_b;
select_ufind_groups_reg_b[0] <= select_ufind_groups_b;
select_edges_reg_b[0] <= select_edges_b;
select_heap_reg_b[0] <= select_heap_b;
select_mst_edges_reg_b[0] <= select_mst_edges_b;
select_bsf_touched_vertex_reg_b[0] <= select_bsf_touched_vertex_b;
select_queue_reg_b[0] <= select_queue_b;
select_euler_path_reg_b[0] <= select_euler_path_b;
select_hamilton_path_reg_b[0] <= select_hamilton_path_b;
end

endmodule 

`timescale 1 ns / 1 ns
module is_bridge
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_a,
	arg_b
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_is_bridge_BB__1_1 = 8'd1;
parameter [7:0] LEGUP_F_is_bridge_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader1preheader_3 = 8'd3;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader1_4 = 8'd4;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader1_5 = 8'd5;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader1_6 = 8'd6;
parameter [7:0] LEGUP_F_is_bridge_BB__5_7 = 8'd7;
parameter [7:0] LEGUP_F_is_bridge_BB__5_8 = 8'd8;
parameter [7:0] LEGUP_F_is_bridge_BB__5_9 = 8'd9;
parameter [7:0] LEGUP_F_is_bridge_BB__8_10 = 8'd10;
parameter [7:0] LEGUP_F_is_bridge_BB__8_11 = 8'd11;
parameter [7:0] LEGUP_F_is_bridge_BB__9_12 = 8'd12;
parameter [7:0] LEGUP_F_is_bridge_BB_lrph_13 = 8'd13;
parameter [7:0] LEGUP_F_is_bridge_BB_lrph_14 = 8'd14;
parameter [7:0] LEGUP_F_is_bridge_BB_loopexit_15 = 8'd15;
parameter [7:0] LEGUP_F_is_bridge_BB_preheaderpreheader_16 = 8'd16;
parameter [7:0] LEGUP_F_is_bridge_BB__13_17 = 8'd17;
parameter [7:0] LEGUP_F_is_bridge_BB__13_18 = 8'd18;
parameter [7:0] LEGUP_F_is_bridge_BB__13_19 = 8'd19;
parameter [7:0] LEGUP_F_is_bridge_BB__13_20 = 8'd20;
parameter [7:0] LEGUP_F_is_bridge_BB__13_21 = 8'd21;
parameter [7:0] LEGUP_F_is_bridge_BB__13_22 = 8'd22;
parameter [7:0] LEGUP_F_is_bridge_BB__13_23 = 8'd23;
parameter [7:0] LEGUP_F_is_bridge_BB__13_24 = 8'd24;
parameter [7:0] LEGUP_F_is_bridge_BB__13_25 = 8'd25;
parameter [7:0] LEGUP_F_is_bridge_BB__13_26 = 8'd26;
parameter [7:0] LEGUP_F_is_bridge_BB__13_27 = 8'd27;
parameter [7:0] LEGUP_F_is_bridge_BB__13_28 = 8'd28;
parameter [7:0] LEGUP_F_is_bridge_BB__13_29 = 8'd29;
parameter [7:0] LEGUP_F_is_bridge_BB__13_30 = 8'd30;
parameter [7:0] LEGUP_F_is_bridge_BB__13_31 = 8'd31;
parameter [7:0] LEGUP_F_is_bridge_BB__13_32 = 8'd32;
parameter [7:0] LEGUP_F_is_bridge_BB__13_33 = 8'd33;
parameter [7:0] LEGUP_F_is_bridge_BB__13_34 = 8'd34;
parameter [7:0] LEGUP_F_is_bridge_BB__13_35 = 8'd35;
parameter [7:0] LEGUP_F_is_bridge_BB__13_36 = 8'd36;
parameter [7:0] LEGUP_F_is_bridge_BB__13_37 = 8'd37;
parameter [7:0] LEGUP_F_is_bridge_BB__13_38 = 8'd38;
parameter [7:0] LEGUP_F_is_bridge_BB__13_39 = 8'd39;
parameter [7:0] LEGUP_F_is_bridge_BB__13_40 = 8'd40;
parameter [7:0] LEGUP_F_is_bridge_BB__13_41 = 8'd41;
parameter [7:0] LEGUP_F_is_bridge_BB__13_42 = 8'd42;
parameter [7:0] LEGUP_F_is_bridge_BB__13_43 = 8'd43;
parameter [7:0] LEGUP_F_is_bridge_BB__13_44 = 8'd44;
parameter [7:0] LEGUP_F_is_bridge_BB__13_45 = 8'd45;
parameter [7:0] LEGUP_F_is_bridge_BB__13_46 = 8'd46;
parameter [7:0] LEGUP_F_is_bridge_BB__13_47 = 8'd47;
parameter [7:0] LEGUP_F_is_bridge_BB__13_48 = 8'd48;
parameter [7:0] LEGUP_F_is_bridge_BB__13_49 = 8'd49;
parameter [7:0] LEGUP_F_is_bridge_BB__13_50 = 8'd50;
parameter [7:0] LEGUP_F_is_bridge_BB__13_51 = 8'd51;
parameter [7:0] LEGUP_F_is_bridge_BB__13_52 = 8'd52;
parameter [7:0] LEGUP_F_is_bridge_BB__23_53 = 8'd53;
parameter [7:0] LEGUP_F_is_bridge_BB__23_54 = 8'd54;
parameter [7:0] LEGUP_F_is_bridge_BB__23_55 = 8'd55;
parameter [7:0] LEGUP_F_is_bridge_BB__27_56 = 8'd56;
parameter [7:0] LEGUP_F_is_bridge_BB__27_57 = 8'd57;
parameter [7:0] LEGUP_F_is_bridge_BB__27_58 = 8'd58;
parameter [7:0] LEGUP_F_is_bridge_BB__32_59 = 8'd59;
parameter [7:0] LEGUP_F_is_bridge_BB__32_60 = 8'd60;
parameter [7:0] LEGUP_F_is_bridge_BB__32_61 = 8'd61;
parameter [7:0] LEGUP_F_is_bridge_BB__37_62 = 8'd62;
parameter [7:0] LEGUP_F_is_bridge_BB__37_63 = 8'd63;
parameter [7:0] LEGUP_F_is_bridge_BB__37_64 = 8'd64;
parameter [7:0] LEGUP_F_is_bridge_BB__37_65 = 8'd65;
parameter [7:0] LEGUP_F_is_bridge_BB__37_66 = 8'd66;
parameter [7:0] LEGUP_F_is_bridge_BB__37_67 = 8'd67;
parameter [7:0] LEGUP_F_is_bridge_BB__37_68 = 8'd68;
parameter [7:0] LEGUP_F_is_bridge_BB__37_69 = 8'd69;
parameter [7:0] LEGUP_F_is_bridge_BB__37_70 = 8'd70;
parameter [7:0] LEGUP_F_is_bridge_BB__37_71 = 8'd71;
parameter [7:0] LEGUP_F_is_bridge_BB__37_72 = 8'd72;
parameter [7:0] LEGUP_F_is_bridge_BB__37_73 = 8'd73;
parameter [7:0] LEGUP_F_is_bridge_BB__37_74 = 8'd74;
parameter [7:0] LEGUP_F_is_bridge_BB__37_75 = 8'd75;
parameter [7:0] LEGUP_F_is_bridge_BB__37_76 = 8'd76;
parameter [7:0] LEGUP_F_is_bridge_BB__37_77 = 8'd77;
parameter [7:0] LEGUP_F_is_bridge_BB__37_78 = 8'd78;
parameter [7:0] LEGUP_F_is_bridge_BB__37_79 = 8'd79;
parameter [7:0] LEGUP_F_is_bridge_BB__37_80 = 8'd80;
parameter [7:0] LEGUP_F_is_bridge_BB__37_81 = 8'd81;
parameter [7:0] LEGUP_F_is_bridge_BB__37_82 = 8'd82;
parameter [7:0] LEGUP_F_is_bridge_BB__37_83 = 8'd83;
parameter [7:0] LEGUP_F_is_bridge_BB__37_84 = 8'd84;
parameter [7:0] LEGUP_F_is_bridge_BB__37_85 = 8'd85;
parameter [7:0] LEGUP_F_is_bridge_BB__37_86 = 8'd86;
parameter [7:0] LEGUP_F_is_bridge_BB__37_87 = 8'd87;
parameter [7:0] LEGUP_F_is_bridge_BB__37_88 = 8'd88;
parameter [7:0] LEGUP_F_is_bridge_BB__37_89 = 8'd89;
parameter [7:0] LEGUP_F_is_bridge_BB__37_90 = 8'd90;
parameter [7:0] LEGUP_F_is_bridge_BB__37_91 = 8'd91;
parameter [7:0] LEGUP_F_is_bridge_BB__37_92 = 8'd92;
parameter [7:0] LEGUP_F_is_bridge_BB__37_93 = 8'd93;
parameter [7:0] LEGUP_F_is_bridge_BB__37_94 = 8'd94;
parameter [7:0] LEGUP_F_is_bridge_BB__37_95 = 8'd95;
parameter [7:0] LEGUP_F_is_bridge_BB__crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_is_bridge_BB__43_97 = 8'd97;
parameter [7:0] LEGUP_F_is_bridge_BB__43_98 = 8'd98;
parameter [7:0] LEGUP_F_is_bridge_BB__43_99 = 8'd99;
parameter [7:0] LEGUP_F_is_bridge_BB__47_100 = 8'd100;
parameter [7:0] LEGUP_F_is_bridge_BB__47_101 = 8'd101;
parameter [7:0] LEGUP_F_is_bridge_BB__47_102 = 8'd102;
parameter [7:0] LEGUP_F_is_bridge_BB__47_103 = 8'd103;
parameter [7:0] LEGUP_F_is_bridge_BB__47_104 = 8'd104;
parameter [7:0] LEGUP_F_is_bridge_BB__47_105 = 8'd105;
parameter [7:0] LEGUP_F_is_bridge_BB__47_106 = 8'd106;
parameter [7:0] LEGUP_F_is_bridge_BB__47_107 = 8'd107;
parameter [7:0] LEGUP_F_is_bridge_BB__47_108 = 8'd108;
parameter [7:0] LEGUP_F_is_bridge_BB__47_109 = 8'd109;
parameter [7:0] LEGUP_F_is_bridge_BB__47_110 = 8'd110;
parameter [7:0] LEGUP_F_is_bridge_BB__47_111 = 8'd111;
parameter [7:0] LEGUP_F_is_bridge_BB__47_112 = 8'd112;
parameter [7:0] LEGUP_F_is_bridge_BB__47_113 = 8'd113;
parameter [7:0] LEGUP_F_is_bridge_BB__47_114 = 8'd114;
parameter [7:0] LEGUP_F_is_bridge_BB__47_115 = 8'd115;
parameter [7:0] LEGUP_F_is_bridge_BB__47_116 = 8'd116;
parameter [7:0] LEGUP_F_is_bridge_BB__47_117 = 8'd117;
parameter [7:0] LEGUP_F_is_bridge_BB__47_118 = 8'd118;
parameter [7:0] LEGUP_F_is_bridge_BB__47_119 = 8'd119;
parameter [7:0] LEGUP_F_is_bridge_BB__47_120 = 8'd120;
parameter [7:0] LEGUP_F_is_bridge_BB__47_121 = 8'd121;
parameter [7:0] LEGUP_F_is_bridge_BB__47_122 = 8'd122;
parameter [7:0] LEGUP_F_is_bridge_BB__47_123 = 8'd123;
parameter [7:0] LEGUP_F_is_bridge_BB__47_124 = 8'd124;
parameter [7:0] LEGUP_F_is_bridge_BB__47_125 = 8'd125;
parameter [7:0] LEGUP_F_is_bridge_BB__47_126 = 8'd126;
parameter [7:0] LEGUP_F_is_bridge_BB__47_127 = 8'd127;
parameter [7:0] LEGUP_F_is_bridge_BB__47_128 = 8'd128;
parameter [7:0] LEGUP_F_is_bridge_BB__47_129 = 8'd129;
parameter [7:0] LEGUP_F_is_bridge_BB__47_130 = 8'd130;
parameter [7:0] LEGUP_F_is_bridge_BB__47_131 = 8'd131;
parameter [7:0] LEGUP_F_is_bridge_BB__47_132 = 8'd132;
parameter [7:0] LEGUP_F_is_bridge_BB__47_133 = 8'd133;
parameter [7:0] LEGUP_F_is_bridge_BB__52_134 = 8'd134;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader_135 = 8'd135;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader_136 = 8'd136;
parameter [7:0] LEGUP_F_is_bridge_BB_preheader_137 = 8'd137;
parameter [7:0] LEGUP_F_is_bridge_BB__57_138 = 8'd138;
parameter [7:0] LEGUP_F_is_bridge_BB__57_139 = 8'd139;
parameter [7:0] LEGUP_F_is_bridge_BB__57_140 = 8'd140;
parameter [7:0] LEGUP_F_is_bridge_BB__60_141 = 8'd141;
parameter [7:0] LEGUP_F_is_bridge_BB__60_142 = 8'd142;
parameter [7:0] LEGUP_F_is_bridge_BB__61_143 = 8'd143;
parameter [7:0] LEGUP_F_is_bridge_BB__63_144 = 8'd144;
parameter [7:0] LEGUP_F_is_bridge_BB__63_145 = 8'd145;
parameter [7:0] LEGUP_F_is_bridge_BB__63_146 = 8'd146;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [15:0] arg_a;
input [15:0] arg_b;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] is_bridge_1_i05;
reg [31:0] is_bridge_1_i05_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_1_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_1_scevgep16;
reg [31:0] is_bridge_1_2;
reg [31:0] is_bridge_1_2_reg;
reg  is_bridge_1_exitcond14;
reg  is_bridge_1_exitcond14_reg;
reg [31:0] is_bridge_preheader1_i14;
reg [31:0] is_bridge_preheader1_i14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader1_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader1_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader1_scevgep1213;
reg [15:0] is_bridge_preheader1_3;
reg  is_bridge_preheader1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_5_scevgep11;
reg [15:0] is_bridge_5_6;
reg  is_bridge_5_7;
reg [31:0] is_bridge_9_10;
reg  is_bridge_9_exitcond9;
reg [15:0] is_bridge_loopexit_11;
reg  is_bridge_loopexit_12;
reg [15:0] is_bridge_13_14;
reg [15:0] is_bridge_13_14_reg;
reg [15:0] is_bridge_13_15;
reg [15:0] is_bridge_13_15_reg;
reg [15:0] is_bridge_13_16;
reg [15:0] is_bridge_13_16_reg;
reg [31:0] is_bridge_13_17;
reg [31:0] is_bridge_13_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_13_19;
reg [15:0] is_bridge_13_20;
reg [15:0] is_bridge_13_20_reg;
reg [31:0] is_bridge_13_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_13_22;
reg [15:0] is_bridge_23_24;
reg [15:0] is_bridge_23_24_reg;
reg [31:0] is_bridge_23_i23;
reg [31:0] is_bridge_23_i23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_23_scevgep8;
reg [15:0] is_bridge_23_25;
reg  is_bridge_23_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_27_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_27_scevgep56;
reg [15:0] is_bridge_27_28;
reg [15:0] is_bridge_27_28_reg;
reg [31:0] is_bridge_27_29;
reg [31:0] is_bridge_27_29_reg;
reg  is_bridge_27_30;
reg [15:0] is_bridge_27_31;
reg [15:0] is_bridge_27_31_reg;
reg [31:0] is_bridge_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_32_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_32_34_reg;
reg [31:0] is_bridge_32_35;
reg  is_bridge_32_36;
reg [15:0] is_bridge_37_38;
reg [15:0] is_bridge_37_38_reg;
reg [31:0] is_bridge_37_39;
reg [31:0] is_bridge_37_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_37_41;
reg  is_bridge__crit_edge_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_43_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_43_44_reg;
reg [31:0] is_bridge_43_45;
reg  is_bridge_43_46;
reg [15:0] is_bridge_47_48;
reg [15:0] is_bridge_47_48_reg;
reg [31:0] is_bridge_47_49;
reg [31:0] is_bridge_47_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_47_51;
reg [15:0] is_bridge_52_53;
reg [15:0] is_bridge_52_53_reg;
reg [31:0] is_bridge_52_54;
reg  is_bridge_52_exitcond;
reg [31:0] is_bridge_preheader_i32;
reg [31:0] is_bridge_preheader_i32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_preheader_scevgep34;
reg [15:0] is_bridge_preheader_55;
reg  is_bridge_preheader_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_57_scevgep2;
reg [15:0] is_bridge_57_58;
reg  is_bridge_57_59;
reg [31:0] is_bridge_61_62;
reg  is_bridge_61_exitcond1;
reg [31:0] is_bridge_63_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_63_65;
reg [31:0] is_bridge_63_66;
reg  is_bridge_63_67;
reg [7:0] is_bridge_63_;
reg [31:0] is_bridge_signed_modulus_32_0_op0;
reg [31:0] is_bridge_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_is_bridge_13_18_temp_out;
wire [31:0] is_bridge_13_18_unused;
reg  lpm_divide_is_bridge_13_18_en;
reg [31:0] lpm_divide_is_bridge_13_18_out;
reg [31:0] is_bridge_signed_modulus_32_0;

/*   %18 = srem i32 %17, 24*/
lpm_divide lpm_divide_is_bridge_13_18 (
	.quotient (is_bridge_13_18_unused),
	.remain (lpm_divide_is_bridge_13_18_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_is_bridge_13_18_en),
	.numer (is_bridge_signed_modulus_32_0_op0),
	.denom (is_bridge_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_is_bridge_13_18.lpm_pipeline = 32,
	lpm_divide_is_bridge_13_18.lpm_widthn = 32,
	lpm_divide_is_bridge_13_18.lpm_widthd = 32,
	lpm_divide_is_bridge_13_18.lpm_drepresentation = "SIGNED",
	lpm_divide_is_bridge_13_18.lpm_nrepresentation = "SIGNED",
	lpm_divide_is_bridge_13_18.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__1_1;
LEGUP_F_is_bridge_BB__13_17:
		next_state = LEGUP_F_is_bridge_BB__13_18;
LEGUP_F_is_bridge_BB__13_18:
		next_state = LEGUP_F_is_bridge_BB__13_19;
LEGUP_F_is_bridge_BB__13_19:
		next_state = LEGUP_F_is_bridge_BB__13_20;
LEGUP_F_is_bridge_BB__13_20:
		next_state = LEGUP_F_is_bridge_BB__13_21;
LEGUP_F_is_bridge_BB__13_21:
		next_state = LEGUP_F_is_bridge_BB__13_22;
LEGUP_F_is_bridge_BB__13_22:
		next_state = LEGUP_F_is_bridge_BB__13_23;
LEGUP_F_is_bridge_BB__13_23:
		next_state = LEGUP_F_is_bridge_BB__13_24;
LEGUP_F_is_bridge_BB__13_24:
		next_state = LEGUP_F_is_bridge_BB__13_25;
LEGUP_F_is_bridge_BB__13_25:
		next_state = LEGUP_F_is_bridge_BB__13_26;
LEGUP_F_is_bridge_BB__13_26:
		next_state = LEGUP_F_is_bridge_BB__13_27;
LEGUP_F_is_bridge_BB__13_27:
		next_state = LEGUP_F_is_bridge_BB__13_28;
LEGUP_F_is_bridge_BB__13_28:
		next_state = LEGUP_F_is_bridge_BB__13_29;
LEGUP_F_is_bridge_BB__13_29:
		next_state = LEGUP_F_is_bridge_BB__13_30;
LEGUP_F_is_bridge_BB__13_30:
		next_state = LEGUP_F_is_bridge_BB__13_31;
LEGUP_F_is_bridge_BB__13_31:
		next_state = LEGUP_F_is_bridge_BB__13_32;
LEGUP_F_is_bridge_BB__13_32:
		next_state = LEGUP_F_is_bridge_BB__13_33;
LEGUP_F_is_bridge_BB__13_33:
		next_state = LEGUP_F_is_bridge_BB__13_34;
LEGUP_F_is_bridge_BB__13_34:
		next_state = LEGUP_F_is_bridge_BB__13_35;
LEGUP_F_is_bridge_BB__13_35:
		next_state = LEGUP_F_is_bridge_BB__13_36;
LEGUP_F_is_bridge_BB__13_36:
		next_state = LEGUP_F_is_bridge_BB__13_37;
LEGUP_F_is_bridge_BB__13_37:
		next_state = LEGUP_F_is_bridge_BB__13_38;
LEGUP_F_is_bridge_BB__13_38:
		next_state = LEGUP_F_is_bridge_BB__13_39;
LEGUP_F_is_bridge_BB__13_39:
		next_state = LEGUP_F_is_bridge_BB__13_40;
LEGUP_F_is_bridge_BB__13_40:
		next_state = LEGUP_F_is_bridge_BB__13_41;
LEGUP_F_is_bridge_BB__13_41:
		next_state = LEGUP_F_is_bridge_BB__13_42;
LEGUP_F_is_bridge_BB__13_42:
		next_state = LEGUP_F_is_bridge_BB__13_43;
LEGUP_F_is_bridge_BB__13_43:
		next_state = LEGUP_F_is_bridge_BB__13_44;
LEGUP_F_is_bridge_BB__13_44:
		next_state = LEGUP_F_is_bridge_BB__13_45;
LEGUP_F_is_bridge_BB__13_45:
		next_state = LEGUP_F_is_bridge_BB__13_46;
LEGUP_F_is_bridge_BB__13_46:
		next_state = LEGUP_F_is_bridge_BB__13_47;
LEGUP_F_is_bridge_BB__13_47:
		next_state = LEGUP_F_is_bridge_BB__13_48;
LEGUP_F_is_bridge_BB__13_48:
		next_state = LEGUP_F_is_bridge_BB__13_49;
LEGUP_F_is_bridge_BB__13_49:
		next_state = LEGUP_F_is_bridge_BB__13_50;
LEGUP_F_is_bridge_BB__13_50:
		next_state = LEGUP_F_is_bridge_BB__13_51;
LEGUP_F_is_bridge_BB__13_51:
		next_state = LEGUP_F_is_bridge_BB__13_52;
LEGUP_F_is_bridge_BB__13_52:
		next_state = LEGUP_F_is_bridge_BB__23_53;
LEGUP_F_is_bridge_BB__1_1:
		next_state = LEGUP_F_is_bridge_BB__1_2;
LEGUP_F_is_bridge_BB__1_2:
	if ((is_bridge_1_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_is_bridge_BB_preheader1preheader_3;
	else if ((is_bridge_1_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__1_1;
LEGUP_F_is_bridge_BB__23_53:
		next_state = LEGUP_F_is_bridge_BB__23_54;
LEGUP_F_is_bridge_BB__23_54:
		next_state = LEGUP_F_is_bridge_BB__23_55;
LEGUP_F_is_bridge_BB__23_55:
	if ((is_bridge_23_26 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__27_56;
	else if ((is_bridge_23_26 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__52_134;
LEGUP_F_is_bridge_BB__27_56:
		next_state = LEGUP_F_is_bridge_BB__27_57;
LEGUP_F_is_bridge_BB__27_57:
		next_state = LEGUP_F_is_bridge_BB__27_58;
LEGUP_F_is_bridge_BB__27_58:
	if ((is_bridge_27_30 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__32_59;
	else if ((is_bridge_27_30 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__crit_edge_96;
LEGUP_F_is_bridge_BB__32_59:
		next_state = LEGUP_F_is_bridge_BB__32_60;
LEGUP_F_is_bridge_BB__32_60:
		next_state = LEGUP_F_is_bridge_BB__32_61;
LEGUP_F_is_bridge_BB__32_61:
	if ((is_bridge_32_36 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__37_62;
	else if ((is_bridge_32_36 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__crit_edge_96;
LEGUP_F_is_bridge_BB__37_62:
		next_state = LEGUP_F_is_bridge_BB__37_63;
LEGUP_F_is_bridge_BB__37_63:
		next_state = LEGUP_F_is_bridge_BB__37_64;
LEGUP_F_is_bridge_BB__37_64:
		next_state = LEGUP_F_is_bridge_BB__37_65;
LEGUP_F_is_bridge_BB__37_65:
		next_state = LEGUP_F_is_bridge_BB__37_66;
LEGUP_F_is_bridge_BB__37_66:
		next_state = LEGUP_F_is_bridge_BB__37_67;
LEGUP_F_is_bridge_BB__37_67:
		next_state = LEGUP_F_is_bridge_BB__37_68;
LEGUP_F_is_bridge_BB__37_68:
		next_state = LEGUP_F_is_bridge_BB__37_69;
LEGUP_F_is_bridge_BB__37_69:
		next_state = LEGUP_F_is_bridge_BB__37_70;
LEGUP_F_is_bridge_BB__37_70:
		next_state = LEGUP_F_is_bridge_BB__37_71;
LEGUP_F_is_bridge_BB__37_71:
		next_state = LEGUP_F_is_bridge_BB__37_72;
LEGUP_F_is_bridge_BB__37_72:
		next_state = LEGUP_F_is_bridge_BB__37_73;
LEGUP_F_is_bridge_BB__37_73:
		next_state = LEGUP_F_is_bridge_BB__37_74;
LEGUP_F_is_bridge_BB__37_74:
		next_state = LEGUP_F_is_bridge_BB__37_75;
LEGUP_F_is_bridge_BB__37_75:
		next_state = LEGUP_F_is_bridge_BB__37_76;
LEGUP_F_is_bridge_BB__37_76:
		next_state = LEGUP_F_is_bridge_BB__37_77;
LEGUP_F_is_bridge_BB__37_77:
		next_state = LEGUP_F_is_bridge_BB__37_78;
LEGUP_F_is_bridge_BB__37_78:
		next_state = LEGUP_F_is_bridge_BB__37_79;
LEGUP_F_is_bridge_BB__37_79:
		next_state = LEGUP_F_is_bridge_BB__37_80;
LEGUP_F_is_bridge_BB__37_80:
		next_state = LEGUP_F_is_bridge_BB__37_81;
LEGUP_F_is_bridge_BB__37_81:
		next_state = LEGUP_F_is_bridge_BB__37_82;
LEGUP_F_is_bridge_BB__37_82:
		next_state = LEGUP_F_is_bridge_BB__37_83;
LEGUP_F_is_bridge_BB__37_83:
		next_state = LEGUP_F_is_bridge_BB__37_84;
LEGUP_F_is_bridge_BB__37_84:
		next_state = LEGUP_F_is_bridge_BB__37_85;
LEGUP_F_is_bridge_BB__37_85:
		next_state = LEGUP_F_is_bridge_BB__37_86;
LEGUP_F_is_bridge_BB__37_86:
		next_state = LEGUP_F_is_bridge_BB__37_87;
LEGUP_F_is_bridge_BB__37_87:
		next_state = LEGUP_F_is_bridge_BB__37_88;
LEGUP_F_is_bridge_BB__37_88:
		next_state = LEGUP_F_is_bridge_BB__37_89;
LEGUP_F_is_bridge_BB__37_89:
		next_state = LEGUP_F_is_bridge_BB__37_90;
LEGUP_F_is_bridge_BB__37_90:
		next_state = LEGUP_F_is_bridge_BB__37_91;
LEGUP_F_is_bridge_BB__37_91:
		next_state = LEGUP_F_is_bridge_BB__37_92;
LEGUP_F_is_bridge_BB__37_92:
		next_state = LEGUP_F_is_bridge_BB__37_93;
LEGUP_F_is_bridge_BB__37_93:
		next_state = LEGUP_F_is_bridge_BB__37_94;
LEGUP_F_is_bridge_BB__37_94:
		next_state = LEGUP_F_is_bridge_BB__37_95;
LEGUP_F_is_bridge_BB__37_95:
		next_state = LEGUP_F_is_bridge_BB__52_134;
LEGUP_F_is_bridge_BB__43_97:
		next_state = LEGUP_F_is_bridge_BB__43_98;
LEGUP_F_is_bridge_BB__43_98:
		next_state = LEGUP_F_is_bridge_BB__43_99;
LEGUP_F_is_bridge_BB__43_99:
	if ((is_bridge_43_46 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__47_100;
	else if ((is_bridge_43_46 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__52_134;
LEGUP_F_is_bridge_BB__47_100:
		next_state = LEGUP_F_is_bridge_BB__47_101;
LEGUP_F_is_bridge_BB__47_101:
		next_state = LEGUP_F_is_bridge_BB__47_102;
LEGUP_F_is_bridge_BB__47_102:
		next_state = LEGUP_F_is_bridge_BB__47_103;
LEGUP_F_is_bridge_BB__47_103:
		next_state = LEGUP_F_is_bridge_BB__47_104;
LEGUP_F_is_bridge_BB__47_104:
		next_state = LEGUP_F_is_bridge_BB__47_105;
LEGUP_F_is_bridge_BB__47_105:
		next_state = LEGUP_F_is_bridge_BB__47_106;
LEGUP_F_is_bridge_BB__47_106:
		next_state = LEGUP_F_is_bridge_BB__47_107;
LEGUP_F_is_bridge_BB__47_107:
		next_state = LEGUP_F_is_bridge_BB__47_108;
LEGUP_F_is_bridge_BB__47_108:
		next_state = LEGUP_F_is_bridge_BB__47_109;
LEGUP_F_is_bridge_BB__47_109:
		next_state = LEGUP_F_is_bridge_BB__47_110;
LEGUP_F_is_bridge_BB__47_110:
		next_state = LEGUP_F_is_bridge_BB__47_111;
LEGUP_F_is_bridge_BB__47_111:
		next_state = LEGUP_F_is_bridge_BB__47_112;
LEGUP_F_is_bridge_BB__47_112:
		next_state = LEGUP_F_is_bridge_BB__47_113;
LEGUP_F_is_bridge_BB__47_113:
		next_state = LEGUP_F_is_bridge_BB__47_114;
LEGUP_F_is_bridge_BB__47_114:
		next_state = LEGUP_F_is_bridge_BB__47_115;
LEGUP_F_is_bridge_BB__47_115:
		next_state = LEGUP_F_is_bridge_BB__47_116;
LEGUP_F_is_bridge_BB__47_116:
		next_state = LEGUP_F_is_bridge_BB__47_117;
LEGUP_F_is_bridge_BB__47_117:
		next_state = LEGUP_F_is_bridge_BB__47_118;
LEGUP_F_is_bridge_BB__47_118:
		next_state = LEGUP_F_is_bridge_BB__47_119;
LEGUP_F_is_bridge_BB__47_119:
		next_state = LEGUP_F_is_bridge_BB__47_120;
LEGUP_F_is_bridge_BB__47_120:
		next_state = LEGUP_F_is_bridge_BB__47_121;
LEGUP_F_is_bridge_BB__47_121:
		next_state = LEGUP_F_is_bridge_BB__47_122;
LEGUP_F_is_bridge_BB__47_122:
		next_state = LEGUP_F_is_bridge_BB__47_123;
LEGUP_F_is_bridge_BB__47_123:
		next_state = LEGUP_F_is_bridge_BB__47_124;
LEGUP_F_is_bridge_BB__47_124:
		next_state = LEGUP_F_is_bridge_BB__47_125;
LEGUP_F_is_bridge_BB__47_125:
		next_state = LEGUP_F_is_bridge_BB__47_126;
LEGUP_F_is_bridge_BB__47_126:
		next_state = LEGUP_F_is_bridge_BB__47_127;
LEGUP_F_is_bridge_BB__47_127:
		next_state = LEGUP_F_is_bridge_BB__47_128;
LEGUP_F_is_bridge_BB__47_128:
		next_state = LEGUP_F_is_bridge_BB__47_129;
LEGUP_F_is_bridge_BB__47_129:
		next_state = LEGUP_F_is_bridge_BB__47_130;
LEGUP_F_is_bridge_BB__47_130:
		next_state = LEGUP_F_is_bridge_BB__47_131;
LEGUP_F_is_bridge_BB__47_131:
		next_state = LEGUP_F_is_bridge_BB__47_132;
LEGUP_F_is_bridge_BB__47_132:
		next_state = LEGUP_F_is_bridge_BB__47_133;
LEGUP_F_is_bridge_BB__47_133:
		next_state = LEGUP_F_is_bridge_BB__52_134;
LEGUP_F_is_bridge_BB__52_134:
	if ((is_bridge_52_exitcond == 1'd1))
		next_state = LEGUP_F_is_bridge_BB_loopexit_15;
	else if ((is_bridge_52_exitcond == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__23_53;
LEGUP_F_is_bridge_BB__57_138:
		next_state = LEGUP_F_is_bridge_BB__57_139;
LEGUP_F_is_bridge_BB__57_139:
		next_state = LEGUP_F_is_bridge_BB__57_140;
LEGUP_F_is_bridge_BB__57_140:
	if ((is_bridge_57_59 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__60_141;
	else if ((is_bridge_57_59 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__61_143;
LEGUP_F_is_bridge_BB__5_7:
		next_state = LEGUP_F_is_bridge_BB__5_8;
LEGUP_F_is_bridge_BB__5_8:
		next_state = LEGUP_F_is_bridge_BB__5_9;
LEGUP_F_is_bridge_BB__5_9:
	if ((is_bridge_5_7 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__8_10;
	else if ((is_bridge_5_7 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__9_12;
LEGUP_F_is_bridge_BB__60_141:
		next_state = LEGUP_F_is_bridge_BB__60_142;
LEGUP_F_is_bridge_BB__60_142:
		next_state = LEGUP_F_is_bridge_BB__61_143;
LEGUP_F_is_bridge_BB__61_143:
	if ((is_bridge_61_exitcond1 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__63_144;
	else if ((is_bridge_61_exitcond1 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB_preheader_135;
LEGUP_F_is_bridge_BB__63_144:
		next_state = LEGUP_F_is_bridge_BB__63_145;
LEGUP_F_is_bridge_BB__63_145:
		next_state = LEGUP_F_is_bridge_BB__63_146;
LEGUP_F_is_bridge_BB__63_146:
		next_state = LEGUP_0;
LEGUP_F_is_bridge_BB__8_10:
		next_state = LEGUP_F_is_bridge_BB__8_11;
LEGUP_F_is_bridge_BB__8_11:
		next_state = LEGUP_F_is_bridge_BB__9_12;
LEGUP_F_is_bridge_BB__9_12:
	if ((is_bridge_9_exitcond9 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB_lrph_13;
	else if ((is_bridge_9_exitcond9 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB_preheader1_4;
LEGUP_F_is_bridge_BB__crit_edge_96:
	if ((is_bridge__crit_edge_42 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__43_97;
	else if ((is_bridge__crit_edge_42 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__52_134;
LEGUP_F_is_bridge_BB_loopexit_15:
	if ((is_bridge_loopexit_12 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB_preheaderpreheader_16;
	else if ((is_bridge_loopexit_12 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__13_17;
LEGUP_F_is_bridge_BB_lrph_13:
		next_state = LEGUP_F_is_bridge_BB_lrph_14;
LEGUP_F_is_bridge_BB_lrph_14:
		next_state = LEGUP_F_is_bridge_BB__13_17;
LEGUP_F_is_bridge_BB_preheader1_4:
		next_state = LEGUP_F_is_bridge_BB_preheader1_5;
LEGUP_F_is_bridge_BB_preheader1_5:
		next_state = LEGUP_F_is_bridge_BB_preheader1_6;
LEGUP_F_is_bridge_BB_preheader1_6:
	if ((is_bridge_preheader1_4 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__5_7;
	else if ((is_bridge_preheader1_4 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__9_12;
LEGUP_F_is_bridge_BB_preheader1preheader_3:
		next_state = LEGUP_F_is_bridge_BB_preheader1_4;
LEGUP_F_is_bridge_BB_preheader_135:
		next_state = LEGUP_F_is_bridge_BB_preheader_136;
LEGUP_F_is_bridge_BB_preheader_136:
		next_state = LEGUP_F_is_bridge_BB_preheader_137;
LEGUP_F_is_bridge_BB_preheader_137:
	if ((is_bridge_preheader_56 == 1'd1))
		next_state = LEGUP_F_is_bridge_BB__57_138;
	else if ((is_bridge_preheader_56 == 1'd0))
		next_state = LEGUP_F_is_bridge_BB__61_143;
LEGUP_F_is_bridge_BB_preheaderpreheader_16:
		next_state = LEGUP_F_is_bridge_BB_preheader_135;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* is_bridge: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		is_bridge_1_i05 = 32'd0;
	end
	/* is_bridge: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB__1_2) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_1_exitcond14_reg == 1'd0))) */ begin
		is_bridge_1_i05 = is_bridge_1_2_reg;
	end
end
always @(posedge clk) begin
	/* is_bridge: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		is_bridge_1_i05_reg <= is_bridge_1_i05;
		if (start == 1'b0 && ^(is_bridge_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_1_i05_reg"); $finish; end
	end
	/* is_bridge: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__1_2) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_1_exitcond14_reg == 1'd0))) begin
		is_bridge_1_i05_reg <= is_bridge_1_i05;
		if (start == 1'b0 && ^(is_bridge_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_1_i05_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %1*/
	/*   %scevgep15 = getelementptr [24 x i16]* @queue, i32 0, i32 %i.05*/
		is_bridge_1_scevgep15 = (`TAG_g_queue_a + (2 * is_bridge_1_i05_reg));
end
always @(*) begin
	/* is_bridge: %1*/
	/*   %scevgep16 = getelementptr [24 x i32]* @bsf_touched_vertex, i32 0, i32 %i.05*/
		is_bridge_1_scevgep16 = (`TAG_g_bsf_touched_vertex_a + (4 * is_bridge_1_i05_reg));
end
always @(*) begin
	/* is_bridge: %1*/
	/*   %2 = add nsw i32 %i.05, 1*/
		is_bridge_1_2 = (is_bridge_1_i05_reg + 32'd1);
end
always @(posedge clk) begin
	/* is_bridge: %1*/
	/*   %2 = add nsw i32 %i.05, 1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		is_bridge_1_2_reg <= is_bridge_1_2;
		if (start == 1'b0 && ^(is_bridge_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %1*/
	/*   %exitcond14 = icmp eq i32 %2, 24*/
		is_bridge_1_exitcond14 = (is_bridge_1_2 == 32'd24);
end
always @(posedge clk) begin
	/* is_bridge: %1*/
	/*   %exitcond14 = icmp eq i32 %2, 24*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		is_bridge_1_exitcond14_reg <= is_bridge_1_exitcond14;
		if (start == 1'b0 && ^(is_bridge_1_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_1_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %.preheader1*/
	/*   %i.14 = phi i32 [ %10, %9 ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_preheader1preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_preheader1_i14 = 32'd0;
	end
	/* is_bridge: %.preheader1*/
	/*   %i.14 = phi i32 [ %10, %9 ], [ 0, %.preheader1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB__9_12) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_9_exitcond9 == 1'd0))) */ begin
		is_bridge_preheader1_i14 = is_bridge_9_10;
	end
end
always @(posedge clk) begin
	/* is_bridge: %.preheader1*/
	/*   %i.14 = phi i32 [ %10, %9 ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_preheader1preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_preheader1_i14_reg <= is_bridge_preheader1_i14;
		if (start == 1'b0 && ^(is_bridge_preheader1_i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader1_i14_reg"); $finish; end
	end
	/* is_bridge: %.preheader1*/
	/*   %i.14 = phi i32 [ %10, %9 ], [ 0, %.preheader1.preheader ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__9_12) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_9_exitcond9 == 1'd0))) begin
		is_bridge_preheader1_i14_reg <= is_bridge_preheader1_i14;
		if (start == 1'b0 && ^(is_bridge_preheader1_i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader1_i14_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %.preheader1*/
	/*   %scevgep10 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.14, i32 3*/
		is_bridge_preheader1_scevgep10 = (`TAG_g_mst_edges_a + ((8 * is_bridge_preheader1_i14_reg) + 6));
end
always @(posedge clk) begin
	/* is_bridge: %.preheader1*/
	/*   %scevgep10 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.14, i32 3*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader1_4)) begin
		is_bridge_preheader1_scevgep10_reg <= is_bridge_preheader1_scevgep10;
		if (start == 1'b0 && ^(is_bridge_preheader1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader1_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %.preheader1*/
	/*   %scevgep1213 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.14, i32 0*/
		is_bridge_preheader1_scevgep1213 = (`TAG_g_mst_edges_a + (8 * is_bridge_preheader1_i14_reg));
end
always @(*) begin
	/* is_bridge: %.preheader1*/
	/*   %3 = load i16* %scevgep1213, align 2, !tbaa !7*/
		is_bridge_preheader1_3 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* is_bridge: %.preheader1*/
	/*   %4 = icmp eq i16 %3, %a*/
		is_bridge_preheader1_4 = (is_bridge_preheader1_3 == arg_a);
end
always @(*) begin
	/* is_bridge: %5*/
	/*   %scevgep11 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.14, i32 1*/
		is_bridge_5_scevgep11 = (`TAG_g_mst_edges_a + ((8 * is_bridge_preheader1_i14_reg) + 2));
end
always @(*) begin
	/* is_bridge: %5*/
	/*   %6 = load i16* %scevgep11, align 2, !tbaa !9*/
		is_bridge_5_6 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* is_bridge: %5*/
	/*   %7 = icmp eq i16 %6, %b*/
		is_bridge_5_7 = (is_bridge_5_6 == arg_b);
end
always @(*) begin
	/* is_bridge: %9*/
	/*   %10 = add nsw i32 %i.14, 1*/
		is_bridge_9_10 = (is_bridge_preheader1_i14_reg + 32'd1);
end
always @(*) begin
	/* is_bridge: %9*/
	/*   %exitcond9 = icmp eq i32 %10, 46*/
		is_bridge_9_exitcond9 = (is_bridge_9_10 == 32'd46);
end
always @(*) begin
	/* is_bridge: %.loopexit*/
	/*   %11 = add i16 %15, 1*/
		is_bridge_loopexit_11 = (is_bridge_13_15_reg + 16'd1);
end
always @(*) begin
	/* is_bridge: %.loopexit*/
	/*   %12 = icmp sgt i16 %16, %53*/
		is_bridge_loopexit_12 = ($signed(is_bridge_13_16_reg) > $signed(is_bridge_52_53_reg));
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %14 = phi i16 [ 0, %.lr.ph ], [ %53, %.loopexit ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_lrph_14) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_13_14 = 16'd0;
	end
	/* is_bridge: %13*/
	/*   %14 = phi i16 [ 0, %.lr.ph ], [ %53, %.loopexit ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB_loopexit_15) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_loopexit_12 == 1'd0))) */ begin
		is_bridge_13_14 = is_bridge_52_53_reg;
	end
end
always @(posedge clk) begin
	/* is_bridge: %13*/
	/*   %14 = phi i16 [ 0, %.lr.ph ], [ %53, %.loopexit ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_lrph_14) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_13_14_reg <= is_bridge_13_14;
		if (start == 1'b0 && ^(is_bridge_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_14_reg"); $finish; end
	end
	/* is_bridge: %13*/
	/*   %14 = phi i16 [ 0, %.lr.ph ], [ %53, %.loopexit ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB_loopexit_15) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_loopexit_12 == 1'd0))) begin
		is_bridge_13_14_reg <= is_bridge_13_14;
		if (start == 1'b0 && ^(is_bridge_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %15 = phi i16 [ 0, %.lr.ph ], [ %11, %.loopexit ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_lrph_14) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_13_15 = 16'd0;
	end
	/* is_bridge: %13*/
	/*   %15 = phi i16 [ 0, %.lr.ph ], [ %11, %.loopexit ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB_loopexit_15) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_loopexit_12 == 1'd0))) */ begin
		is_bridge_13_15 = is_bridge_loopexit_11;
	end
end
always @(posedge clk) begin
	/* is_bridge: %13*/
	/*   %15 = phi i16 [ 0, %.lr.ph ], [ %11, %.loopexit ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_lrph_14) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_13_15_reg <= is_bridge_13_15;
		if (start == 1'b0 && ^(is_bridge_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_15_reg"); $finish; end
	end
	/* is_bridge: %13*/
	/*   %15 = phi i16 [ 0, %.lr.ph ], [ %11, %.loopexit ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB_loopexit_15) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_loopexit_12 == 1'd0))) begin
		is_bridge_13_15_reg <= is_bridge_13_15;
		if (start == 1'b0 && ^(is_bridge_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_15_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %16 = add i16 %15, 1*/
		is_bridge_13_16 = (is_bridge_13_15_reg + 16'd1);
end
always @(posedge clk) begin
	/* is_bridge: %13*/
	/*   %16 = add i16 %15, 1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_17)) begin
		is_bridge_13_16_reg <= is_bridge_13_16;
		if (start == 1'b0 && ^(is_bridge_13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_16_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %17 = sext i16 %15 to i32*/
		is_bridge_13_17 = $signed(is_bridge_13_15_reg);
end
always @(*) begin
	is_bridge_13_18 = is_bridge_signed_modulus_32_0;
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %19 = getelementptr inbounds [24 x i16]* @queue, i32 0, i32 %18*/
		is_bridge_13_19 = (`TAG_g_queue_a + (2 * is_bridge_13_18));
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
		is_bridge_13_20 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		is_bridge_13_20_reg <= is_bridge_13_20;
		if (start == 1'b0 && ^(is_bridge_13_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_13_20_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %21 = sext i16 %20 to i32*/
		is_bridge_13_21 = $signed(is_bridge_13_20);
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %22 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %21*/
		is_bridge_13_22 = (`TAG_g_bsf_touched_vertex_a + (4 * is_bridge_13_21));
end
always @(*) begin
	/* is_bridge: %23*/
	/*   %24 = phi i16 [ %14, %13 ], [ %53, %52 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__13_52) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_23_24 = is_bridge_13_14_reg;
	end
	/* is_bridge: %23*/
	/*   %24 = phi i16 [ %14, %13 ], [ %53, %52 ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB__52_134) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_52_exitcond == 1'd0))) */ begin
		is_bridge_23_24 = is_bridge_52_53_reg;
	end
end
always @(posedge clk) begin
	/* is_bridge: %23*/
	/*   %24 = phi i16 [ %14, %13 ], [ %53, %52 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__13_52) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_23_24_reg <= is_bridge_23_24;
		if (start == 1'b0 && ^(is_bridge_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_23_24_reg"); $finish; end
	end
	/* is_bridge: %23*/
	/*   %24 = phi i16 [ %14, %13 ], [ %53, %52 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__52_134) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_52_exitcond == 1'd0))) begin
		is_bridge_23_24_reg <= is_bridge_23_24;
		if (start == 1'b0 && ^(is_bridge_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %23*/
	/*   %i.23 = phi i32 [ 0, %13 ], [ %54, %52 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__13_52) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_23_i23 = 32'd0;
	end
	/* is_bridge: %23*/
	/*   %i.23 = phi i32 [ 0, %13 ], [ %54, %52 ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB__52_134) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_52_exitcond == 1'd0))) */ begin
		is_bridge_23_i23 = is_bridge_52_54;
	end
end
always @(posedge clk) begin
	/* is_bridge: %23*/
	/*   %i.23 = phi i32 [ 0, %13 ], [ %54, %52 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__13_52) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_23_i23_reg <= is_bridge_23_i23;
		if (start == 1'b0 && ^(is_bridge_23_i23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_23_i23_reg"); $finish; end
	end
	/* is_bridge: %23*/
	/*   %i.23 = phi i32 [ 0, %13 ], [ %54, %52 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__52_134) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_52_exitcond == 1'd0))) begin
		is_bridge_23_i23_reg <= is_bridge_23_i23;
		if (start == 1'b0 && ^(is_bridge_23_i23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_23_i23_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %23*/
	/*   %scevgep8 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.23, i32 3*/
		is_bridge_23_scevgep8 = (`TAG_g_mst_edges_a + ((8 * is_bridge_23_i23_reg) + 6));
end
always @(*) begin
	/* is_bridge: %23*/
	/*   %25 = load i16* %scevgep8, align 2, !tbaa !10*/
		is_bridge_23_25 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* is_bridge: %23*/
	/*   %26 = icmp eq i16 %25, 0*/
		is_bridge_23_26 = (is_bridge_23_25 == 16'd0);
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %scevgep7 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.23, i32 1*/
		is_bridge_27_scevgep7 = (`TAG_g_mst_edges_a + ((8 * is_bridge_23_i23_reg) + 2));
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %scevgep56 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.23, i32 0*/
		is_bridge_27_scevgep56 = (`TAG_g_mst_edges_a + (8 * is_bridge_23_i23_reg));
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
		is_bridge_27_28 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_58)) begin
		is_bridge_27_28_reg <= is_bridge_27_28;
		if (start == 1'b0 && ^(is_bridge_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_27_28_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %29 = sext i16 %28 to i32*/
		is_bridge_27_29 = $signed(is_bridge_27_28);
end
always @(posedge clk) begin
	/* is_bridge: %27*/
	/*   %29 = sext i16 %28 to i32*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_58)) begin
		is_bridge_27_29_reg <= is_bridge_27_29;
		if (start == 1'b0 && ^(is_bridge_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_27_29_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %30 = icmp eq i16 %28, %20*/
		is_bridge_27_30 = (is_bridge_27_28 == is_bridge_13_20_reg);
end
always @(*) begin
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
		is_bridge_27_31 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_58)) begin
		is_bridge_27_31_reg <= is_bridge_27_31;
		if (start == 1'b0 && ^(is_bridge_27_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_27_31_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %32*/
	/*   %33 = sext i16 %31 to i32*/
		is_bridge_32_33 = $signed(is_bridge_27_31_reg);
end
always @(*) begin
	/* is_bridge: %32*/
	/*   %34 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %33*/
		is_bridge_32_34 = (`TAG_g_bsf_touched_vertex_a + (4 * is_bridge_32_33));
end
always @(posedge clk) begin
	/* is_bridge: %32*/
	/*   %34 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_is_bridge_BB__32_59)) begin
		is_bridge_32_34_reg <= is_bridge_32_34;
		if (start == 1'b0 && ^(is_bridge_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_32_34_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %32*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		is_bridge_32_35 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* is_bridge: %32*/
	/*   %36 = icmp eq i32 %35, 0*/
		is_bridge_32_36 = (is_bridge_32_35 == 32'd0);
end
always @(*) begin
	/* is_bridge: %37*/
	/*   %38 = add i16 %24, 1*/
		is_bridge_37_38 = (is_bridge_23_24_reg + 16'd1);
end
always @(posedge clk) begin
	/* is_bridge: %37*/
	/*   %38 = add i16 %24, 1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		is_bridge_37_38_reg <= is_bridge_37_38;
		if (start == 1'b0 && ^(is_bridge_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %37*/
	/*   %39 = sext i16 %38 to i32*/
		is_bridge_37_39 = $signed(is_bridge_37_38);
end
always @(*) begin
	is_bridge_37_40 = is_bridge_signed_modulus_32_0;
end
always @(*) begin
	/* is_bridge: %37*/
	/*   %41 = getelementptr inbounds [24 x i16]* @queue, i32 0, i32 %40*/
		is_bridge_37_41 = (`TAG_g_queue_a + (2 * is_bridge_37_40));
end
always @(*) begin
	/* is_bridge: %._crit_edge*/
	/*   %42 = icmp eq i16 %31, %20*/
		is_bridge__crit_edge_42 = (is_bridge_27_31_reg == is_bridge_13_20_reg);
end
always @(*) begin
	/* is_bridge: %43*/
	/*   %44 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %29*/
		is_bridge_43_44 = (`TAG_g_bsf_touched_vertex_a + (4 * is_bridge_27_29_reg));
end
always @(posedge clk) begin
	/* is_bridge: %43*/
	/*   %44 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %29*/
	if ((cur_state == LEGUP_F_is_bridge_BB__43_97)) begin
		is_bridge_43_44_reg <= is_bridge_43_44;
		if (start == 1'b0 && ^(is_bridge_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %43*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		is_bridge_43_45 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* is_bridge: %43*/
	/*   %46 = icmp eq i32 %45, 0*/
		is_bridge_43_46 = (is_bridge_43_45 == 32'd0);
end
always @(*) begin
	/* is_bridge: %47*/
	/*   %48 = add i16 %24, 1*/
		is_bridge_47_48 = (is_bridge_23_24_reg + 16'd1);
end
always @(posedge clk) begin
	/* is_bridge: %47*/
	/*   %48 = add i16 %24, 1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		is_bridge_47_48_reg <= is_bridge_47_48;
		if (start == 1'b0 && ^(is_bridge_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_47_48_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %47*/
	/*   %49 = sext i16 %48 to i32*/
		is_bridge_47_49 = $signed(is_bridge_47_48);
end
always @(*) begin
	is_bridge_47_50 = is_bridge_signed_modulus_32_0;
end
always @(*) begin
	/* is_bridge: %47*/
	/*   %51 = getelementptr inbounds [24 x i16]* @queue, i32 0, i32 %50*/
		is_bridge_47_51 = (`TAG_g_queue_a + (2 * is_bridge_47_50));
end
always @(*) begin
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__23_55) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_23_26 == 1'd0))) begin
		is_bridge_52_53 = is_bridge_23_24_reg;
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	else if (((cur_state == LEGUP_F_is_bridge_BB__37_95) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_52_53 = is_bridge_37_38_reg;
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	else if ((((cur_state == LEGUP_F_is_bridge_BB__crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (is_bridge__crit_edge_42 == 1'd0))) begin
		is_bridge_52_53 = is_bridge_23_24_reg;
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	else if ((((cur_state == LEGUP_F_is_bridge_BB__43_99) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_43_46 == 1'd0))) begin
		is_bridge_52_53 = is_bridge_23_24_reg;
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	else /* if (((cur_state == LEGUP_F_is_bridge_BB__47_133) & (memory_controller_waitrequest == 1'd0))) */ begin
		is_bridge_52_53 = is_bridge_47_48_reg;
	end
end
always @(posedge clk) begin
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__23_55) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_23_26 == 1'd0))) begin
		is_bridge_52_53_reg <= is_bridge_52_53;
		if (start == 1'b0 && ^(is_bridge_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_52_53_reg"); $finish; end
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__37_95) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_52_53_reg <= is_bridge_52_53;
		if (start == 1'b0 && ^(is_bridge_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_52_53_reg"); $finish; end
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (is_bridge__crit_edge_42 == 1'd0))) begin
		is_bridge_52_53_reg <= is_bridge_52_53;
		if (start == 1'b0 && ^(is_bridge_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_52_53_reg"); $finish; end
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__43_99) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_43_46 == 1'd0))) begin
		is_bridge_52_53_reg <= is_bridge_52_53;
		if (start == 1'b0 && ^(is_bridge_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_52_53_reg"); $finish; end
	end
	/* is_bridge: %52*/
	/*   %53 = phi i16 [ %24, %23 ], [ %24, %._crit_edge ], [ %24, %43 ], [ %48, %47 ], [ %38, %37 ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB__47_133) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_52_53_reg <= is_bridge_52_53;
		if (start == 1'b0 && ^(is_bridge_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %52*/
	/*   %54 = add nsw i32 %i.23, 1*/
		is_bridge_52_54 = (is_bridge_23_i23_reg + 32'd1);
end
always @(*) begin
	/* is_bridge: %52*/
	/*   %exitcond = icmp eq i32 %54, 46*/
		is_bridge_52_exitcond = (is_bridge_52_54 == 32'd46);
end
always @(*) begin
	/* is_bridge: %.preheader*/
	/*   %i.32 = phi i32 [ %62, %61 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_preheaderpreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_preheader_i32 = 32'd0;
	end
	/* is_bridge: %.preheader*/
	/*   %i.32 = phi i32 [ %62, %61 ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_is_bridge_BB__61_143) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_61_exitcond1 == 1'd0))) */ begin
		is_bridge_preheader_i32 = is_bridge_61_62;
	end
end
always @(posedge clk) begin
	/* is_bridge: %.preheader*/
	/*   %i.32 = phi i32 [ %62, %61 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_is_bridge_BB_preheaderpreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		is_bridge_preheader_i32_reg <= is_bridge_preheader_i32;
		if (start == 1'b0 && ^(is_bridge_preheader_i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader_i32_reg"); $finish; end
	end
	/* is_bridge: %.preheader*/
	/*   %i.32 = phi i32 [ %62, %61 ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_is_bridge_BB__61_143) & (memory_controller_waitrequest == 1'd0)) & (is_bridge_61_exitcond1 == 1'd0))) begin
		is_bridge_preheader_i32_reg <= is_bridge_preheader_i32;
		if (start == 1'b0 && ^(is_bridge_preheader_i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader_i32_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %.preheader*/
	/*   %scevgep = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.32, i32 3*/
		is_bridge_preheader_scevgep = (`TAG_g_mst_edges_a + ((8 * is_bridge_preheader_i32_reg) + 6));
end
always @(posedge clk) begin
	/* is_bridge: %.preheader*/
	/*   %scevgep = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.32, i32 3*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader_135)) begin
		is_bridge_preheader_scevgep_reg <= is_bridge_preheader_scevgep;
		if (start == 1'b0 && ^(is_bridge_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* is_bridge: %.preheader*/
	/*   %scevgep34 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.32, i32 0*/
		is_bridge_preheader_scevgep34 = (`TAG_g_mst_edges_a + (8 * is_bridge_preheader_i32_reg));
end
always @(*) begin
	/* is_bridge: %.preheader*/
	/*   %55 = load i16* %scevgep34, align 2, !tbaa !7*/
		is_bridge_preheader_55 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* is_bridge: %.preheader*/
	/*   %56 = icmp eq i16 %55, %a*/
		is_bridge_preheader_56 = (is_bridge_preheader_55 == arg_a);
end
always @(*) begin
	/* is_bridge: %57*/
	/*   %scevgep2 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.32, i32 1*/
		is_bridge_57_scevgep2 = (`TAG_g_mst_edges_a + ((8 * is_bridge_preheader_i32_reg) + 2));
end
always @(*) begin
	/* is_bridge: %57*/
	/*   %58 = load i16* %scevgep2, align 2, !tbaa !9*/
		is_bridge_57_58 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* is_bridge: %57*/
	/*   %59 = icmp eq i16 %58, %b*/
		is_bridge_57_59 = (is_bridge_57_58 == arg_b);
end
always @(*) begin
	/* is_bridge: %61*/
	/*   %62 = add nsw i32 %i.32, 1*/
		is_bridge_61_62 = (is_bridge_preheader_i32_reg + 32'd1);
end
always @(*) begin
	/* is_bridge: %61*/
	/*   %exitcond1 = icmp eq i32 %62, 46*/
		is_bridge_61_exitcond1 = (is_bridge_61_62 == 32'd46);
end
always @(*) begin
	/* is_bridge: %63*/
	/*   %64 = sext i16 %b to i32*/
		is_bridge_63_64 = $signed(arg_b);
end
always @(*) begin
	/* is_bridge: %63*/
	/*   %65 = getelementptr inbounds [24 x i32]* @bsf_touched_vertex, i32 0, i32 %64*/
		is_bridge_63_65 = (`TAG_g_bsf_touched_vertex_a + (4 * is_bridge_63_64));
end
always @(*) begin
	/* is_bridge: %63*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
		is_bridge_63_66 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* is_bridge: %63*/
	/*   %67 = icmp eq i32 %66, 0*/
		is_bridge_63_67 = (is_bridge_63_66 == 32'd0);
end
always @(*) begin
	/* is_bridge: %63*/
	/*   %. = zext i1 %67 to i8*/
		is_bridge_63_ = is_bridge_63_67;
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %18 = srem i32 %17, 24*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_17)) begin
		is_bridge_signed_modulus_32_0_op0 = is_bridge_13_17;
	end
	/* is_bridge: %37*/
	/*   %40 = srem i32 %39, 24*/
	else if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		is_bridge_signed_modulus_32_0_op0 = is_bridge_37_39;
	end
	/* is_bridge: %47*/
	/*   %50 = srem i32 %49, 24*/
	else /* if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) */ begin
		is_bridge_signed_modulus_32_0_op0 = is_bridge_47_49;
	end
end
always @(*) begin
	/* is_bridge: %13*/
	/*   %18 = srem i32 %17, 24*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_17)) begin
		is_bridge_signed_modulus_32_0_op1 = 32'd24;
	end
	/* is_bridge: %37*/
	/*   %40 = srem i32 %39, 24*/
	else if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		is_bridge_signed_modulus_32_0_op1 = 32'd24;
	end
	/* is_bridge: %47*/
	/*   %50 = srem i32 %49, 24*/
	else /* if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) */ begin
		is_bridge_signed_modulus_32_0_op1 = 32'd24;
	end
end
always @(*) begin
	lpm_divide_is_bridge_13_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_is_bridge_13_18_out = lpm_divide_is_bridge_13_18_temp_out;
end
always @(*) begin
	is_bridge_signed_modulus_32_0 = lpm_divide_is_bridge_13_18_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* is_bridge: %63*/
	/*   ret i8 %.*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_146)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i32 0, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %.preheader1*/
	/*   %3 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader1_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %8*/
	/*   store i16 1, i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__8_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %13*/
	/*   store i32 1, i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %32*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__32_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %37*/
	/*   store i32 1, i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %43*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__43_97)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %47*/
	/*   store i32 1, i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %47*/
	/*   store i16 %28, i16* %51, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_132)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* is_bridge: %60*/
	/*   store i16 0, i16* %scevgep, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__60_141)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i32 0, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_address_a = is_bridge_1_scevgep16;
	end
	/* is_bridge: %.preheader1*/
	/*   %3 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader1_4)) begin
		memory_controller_address_a = is_bridge_preheader1_scevgep1213;
	end
	/* is_bridge: %8*/
	/*   store i16 1, i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__8_10)) begin
		memory_controller_address_a = is_bridge_preheader1_scevgep10_reg;
	end
	/* is_bridge: %13*/
	/*   store i32 1, i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		memory_controller_address_a = is_bridge_13_22;
	end
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_address_a = is_bridge_27_scevgep56;
	end
	/* is_bridge: %32*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__32_59)) begin
		memory_controller_address_a = is_bridge_32_34;
	end
	/* is_bridge: %37*/
	/*   store i32 1, i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		memory_controller_address_a = is_bridge_32_34_reg;
	end
	/* is_bridge: %43*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__43_97)) begin
		memory_controller_address_a = is_bridge_43_44;
	end
	/* is_bridge: %47*/
	/*   store i32 1, i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		memory_controller_address_a = is_bridge_43_44_reg;
	end
	/* is_bridge: %47*/
	/*   store i16 %28, i16* %51, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_132)) begin
		memory_controller_address_a = is_bridge_47_51;
	end
	/* is_bridge: %60*/
	/*   store i16 0, i16* %scevgep, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__60_141)) begin
		memory_controller_address_a = is_bridge_preheader_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i32 0, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %.preheader1*/
	/*   %3 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader1_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* is_bridge: %8*/
	/*   store i16 1, i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__8_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %13*/
	/*   store i32 1, i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* is_bridge: %32*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__32_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* is_bridge: %37*/
	/*   store i32 1, i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %43*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__43_97)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* is_bridge: %47*/
	/*   store i32 1, i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %47*/
	/*   store i16 %28, i16* %51, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_132)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* is_bridge: %60*/
	/*   store i16 0, i16* %scevgep, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__60_141)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i32 0, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* is_bridge: %8*/
	/*   store i16 1, i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__8_10)) begin
		memory_controller_in_a = 16'd1;
	end
	/* is_bridge: %13*/
	/*   store i32 1, i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		memory_controller_in_a = 32'd1;
	end
	/* is_bridge: %37*/
	/*   store i32 1, i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		memory_controller_in_a = 32'd1;
	end
	/* is_bridge: %47*/
	/*   store i32 1, i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		memory_controller_in_a = 32'd1;
	end
	/* is_bridge: %47*/
	/*   store i16 %28, i16* %51, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_132)) begin
		memory_controller_in_a = is_bridge_27_28_reg;
	end
	/* is_bridge: %60*/
	/*   store i16 0, i16* %scevgep, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__60_141)) begin
		memory_controller_in_a = 16'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i32 0, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %.preheader1*/
	/*   %3 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader1_4)) begin
		memory_controller_size_a = 2'd1;
	end
	/* is_bridge: %8*/
	/*   store i16 1, i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__8_10)) begin
		memory_controller_size_a = 2'd1;
	end
	/* is_bridge: %13*/
	/*   store i32 1, i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %27*/
	/*   %28 = load i16* %scevgep56, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_size_a = 2'd1;
	end
	/* is_bridge: %32*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__32_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %37*/
	/*   store i32 1, i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %43*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__43_97)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %47*/
	/*   store i32 1, i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* is_bridge: %47*/
	/*   store i16 %28, i16* %51, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__47_132)) begin
		memory_controller_size_a = 2'd1;
	end
	/* is_bridge: %60*/
	/*   store i16 0, i16* %scevgep, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__60_141)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i16 0, i16* %scevgep15, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %5*/
	/*   %6 = load i16* %scevgep11, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__5_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %.lr.ph*/
	/*   store i16 %a, i16* getelementptr inbounds ([24 x i16]* @queue, i32 0, i32 0), align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB_lrph_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %23*/
	/*   %25 = load i16* %scevgep8, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__23_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %37*/
	/*   store i16 %31, i16* %41, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %.preheader*/
	/*   %55 = load i16* %scevgep34, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %57*/
	/*   %58 = load i16* %scevgep2, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__57_138)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* is_bridge: %63*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_144)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i16 0, i16* %scevgep15, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_address_b = is_bridge_1_scevgep15;
	end
	/* is_bridge: %5*/
	/*   %6 = load i16* %scevgep11, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__5_7)) begin
		memory_controller_address_b = is_bridge_5_scevgep11;
	end
	/* is_bridge: %.lr.ph*/
	/*   store i16 %a, i16* getelementptr inbounds ([24 x i16]* @queue, i32 0, i32 0), align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB_lrph_13)) begin
		memory_controller_address_b = `TAG_g_queue_a;
	end
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_49)) begin
		memory_controller_address_b = is_bridge_13_19;
	end
	/* is_bridge: %23*/
	/*   %25 = load i16* %scevgep8, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__23_53)) begin
		memory_controller_address_b = is_bridge_23_scevgep8;
	end
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_address_b = is_bridge_27_scevgep7;
	end
	/* is_bridge: %37*/
	/*   store i16 %31, i16* %41, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_94)) begin
		memory_controller_address_b = is_bridge_37_41;
	end
	/* is_bridge: %.preheader*/
	/*   %55 = load i16* %scevgep34, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader_135)) begin
		memory_controller_address_b = is_bridge_preheader_scevgep34;
	end
	/* is_bridge: %57*/
	/*   %58 = load i16* %scevgep2, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__57_138)) begin
		memory_controller_address_b = is_bridge_57_scevgep2;
	end
	/* is_bridge: %63*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_144)) begin
		memory_controller_address_b = is_bridge_63_65;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i16 0, i16* %scevgep15, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* is_bridge: %5*/
	/*   %6 = load i16* %scevgep11, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__5_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %.lr.ph*/
	/*   store i16 %a, i16* getelementptr inbounds ([24 x i16]* @queue, i32 0, i32 0), align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB_lrph_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %23*/
	/*   %25 = load i16* %scevgep8, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__23_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %37*/
	/*   store i16 %31, i16* %41, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* is_bridge: %.preheader*/
	/*   %55 = load i16* %scevgep34, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %57*/
	/*   %58 = load i16* %scevgep2, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__57_138)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* is_bridge: %63*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_144)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i16 0, i16* %scevgep15, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_in_b = 16'd0;
	end
	/* is_bridge: %.lr.ph*/
	/*   store i16 %a, i16* getelementptr inbounds ([24 x i16]* @queue, i32 0, i32 0), align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB_lrph_13)) begin
		memory_controller_in_b = arg_a;
	end
	/* is_bridge: %37*/
	/*   store i16 %31, i16* %41, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_94)) begin
		memory_controller_in_b = is_bridge_27_31_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* is_bridge: %1*/
	/*   store i16 0, i16* %scevgep15, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__1_1)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %5*/
	/*   %6 = load i16* %scevgep11, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__5_7)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %.lr.ph*/
	/*   store i16 %a, i16* getelementptr inbounds ([24 x i16]* @queue, i32 0, i32 0), align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB_lrph_13)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %13*/
	/*   %20 = load i16* %19, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__13_49)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %23*/
	/*   %25 = load i16* %scevgep8, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_is_bridge_BB__23_53)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %27*/
	/*   %31 = load i16* %scevgep7, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__27_56)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %37*/
	/*   store i16 %31, i16* %41, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_is_bridge_BB__37_94)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %.preheader*/
	/*   %55 = load i16* %scevgep34, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_is_bridge_BB_preheader_135)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %57*/
	/*   %58 = load i16* %scevgep2, align 2, !tbaa !9*/
	if ((cur_state == LEGUP_F_is_bridge_BB__57_138)) begin
		memory_controller_size_b = 2'd1;
	end
	/* is_bridge: %63*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_144)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* is_bridge: %63*/
	/*   ret i8 %.*/
	if ((cur_state == LEGUP_F_is_bridge_BB__63_146)) begin
		return_val <= is_bridge_63_;
		if (start == 1'b0 && ^(is_bridge_63_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB_preheaderi3_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB_init_adjexit_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB__4_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB__4_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB__4_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB_preheaderipreheader_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB_preheaderi_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB_preheaderi_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB__8_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__8_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB__8_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB__8_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB__14_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_init_edgesexit_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB__18_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__20_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB__22_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__22_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB__22_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB_lrphipreheaderi_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_lrph2ipreheader_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB_lrph2i_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_lrph2i_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB_lrph2i_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_insertexitiloopexit_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB_insertexiti_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB_lrphipreheader_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB_lrphi_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB_lrphi_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_lrphi_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_lrphi_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_lrphi_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB_lrphi_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_lrphiiipreheader_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_lrphiii_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB__56_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB__56_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB__56_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__56_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__56_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB__67_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__67_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__67_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__67_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__67_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__77_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__77_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__77_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB_get_minexitiloopexit_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB_get_minexiti_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB_get_minexiti_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB_get_minexiti_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB_get_minexiti_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB_get_minexiti_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__91_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__94_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__94_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__94_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__97_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__97_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__98_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB_ufind_join_groupsexiti_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB_ufind_join_groupsexiti_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB_ufind_join_groupsexiti_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB_ufind_join_groupsexiti_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB_backedgei10_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB_mstexit_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__110_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__110_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__110_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__110_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__110_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB_mst_duplicate_edgesexit_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__118_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__118_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__120_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__120_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__121_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__123_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__123_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB__123_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__126_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__126_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB__126_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB__130_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB__130_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB__130_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB__134_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__136_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB__138_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB__140_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB__142_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB_preheaderi5preheader_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB_preheaderi5_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_preheaderi5_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_preheaderi5_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB__147_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB__147_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB__147_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB__153_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB__153_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__156_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB__158_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB__158_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_backedgeiloopexit_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_backedgeiloopexit1_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB_backedgei_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_backedge_crit_edgei_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB_backedge_crit_edgei_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB_backedge_crit_edgei_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB__162_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB__165_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB_preheader2ipreheader_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_preheader2i_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_preheader2i_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_preheader2i_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB__170_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB__170_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__170_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB__175_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB__175_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB__178_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB__178_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__178_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__178_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__183_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__186_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__186_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB__189_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB__189_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__189_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB__189_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB__194_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_find_euler_pathexit_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB__199_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB__200_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB__200_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB_legup_memset_4_i64exit_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB_legup_memset_4_i64exit_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB_legup_memset_4_i64exit_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB_legup_memset_4_i64exit_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB__205_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB__205_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__205_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__205_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB__208_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB__208_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB__208_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB__212_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB__214_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB__214_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB__214_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB__214_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB__214_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB__214_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB__223_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB_find_hamiltonian_pathexit_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB_find_hamiltonian_pathexit_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB_find_hamiltonian_pathexit_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB_find_hamiltonian_pathexit_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB_find_hamiltonian_pathexit_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__231_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__233_284 = 9'd284;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [8:0] LEGUP_function_call_240 = 9'd240;
parameter [8:0] LEGUP_function_call_248 = 9'd248;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_preheaderi3_i03i1;
reg [31:0] main_preheaderi3_i03i1_reg;
reg [31:0] main_preheaderi3_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi3_scevgep86;
reg [31:0] main_preheaderi3_3;
reg [31:0] main_preheaderi3_3_reg;
reg  main_preheaderi3_exitcond61;
reg  main_preheaderi3_exitcond61_reg;
reg [31:0] main_4_indvar57;
reg [31:0] main_4_indvar57_reg;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep60;
reg [31:0] main_4_indvarnext58;
reg [31:0] main_4_indvarnext58_reg;
reg  main_4_exitcond59;
reg  main_4_exitcond59_reg;
reg [31:0] main_preheaderi_i03i;
reg [31:0] main_preheaderi_i03i_reg;
reg [15:0] main_preheaderi_6;
reg [15:0] main_preheaderi_6_reg;
reg [31:0] main_preheaderi_7;
reg [31:0] main_preheaderi_7_reg;
reg [31:0] main_8_j01i4;
reg [31:0] main_8_j01i4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep49;
reg [31:0] main_8_9;
reg [31:0] main_8_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep4748;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep44_reg;
reg [15:0] main_8_10;
reg [15:0] main_8_10_reg;
reg [31:0] main_8_11;
reg [15:0] main_8_12;
reg [31:0] main_8_13;
reg [31:0] main_8_13_reg;
reg  main_8_exitcond43;
reg  main_8_exitcond43_reg;
reg [31:0] main_14_15;
reg  main_14_exitcond50;
reg [31:0] main_18_heap_size0;
reg [31:0] main_18_heap_size0_reg;
reg [31:0] main_18_i03i8;
reg [31:0] main_18_i03i8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_scevgep41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_scevgep41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_scevgep42_reg;
reg  main_18_19;
reg [31:0] main_22_23;
reg [31:0] main_22_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_22_24;
reg  main_22_25;
reg  main_22_25_reg;
reg [31:0] main_lrphipreheaderi_26;
reg [31:0] main_lrphipreheaderi_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphipreheaderi_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphipreheaderi_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphipreheaderi_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphipreheaderi_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphipreheaderi_29;
reg [15:0] main_lrphipreheaderi_30;
reg [15:0] main_lrphipreheaderi_31;
reg [15:0] main_lrphipreheaderi_31_reg;
reg  main_lrphipreheaderi_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_34_reg;
reg [31:0] main_lrph2i_35;
reg [31:0] main_lrph2i_35_reg;
reg [31:0] main_lrph2i_p01i1i;
reg [31:0] main_lrph2i_p01i1i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph2i_37_reg;
reg  main_lrph2i_38;
reg  main_lrph2i_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_preii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_preii_reg;
reg [31:0] main__crit_edgeii_39;
reg [31:0] main__crit_edgeii_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_42;
reg [15:0] main__crit_edgeii_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeii_44_reg;
reg [15:0] main__crit_edgeii_45;
reg [15:0] main__crit_edgeii_45_reg;
reg  main__crit_edgeii_46;
reg [31:0] main_insertexiti_heap_size1;
reg [31:0] main_insertexiti_heap_size1_reg;
reg [31:0] main_insertexiti_47;
reg  main_insertexiti_exitcond40;
reg [31:0] main_lrphipreheader_48;
reg [31:0] main_lrphipreheader_48_reg;
reg [31:0] main_lrphi_indvar37;
reg [31:0] main_lrphi_indvar37_reg;
reg [31:0] main_lrphi_mst_num_edges0;
reg [31:0] main_lrphi_mst_num_edges0_reg;
reg [31:0] main_lrphi_49;
reg [31:0] main_lrphi_49_reg;
reg [31:0] main_lrphi_50;
reg [31:0] main_lrphi_50_reg;
reg [31:0] main_lrphi_51;
reg [31:0] main_lrphi_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_53;
reg  main_lrphi_54;
reg  main_lrphi_54_reg;
reg [31:0] main_lrphiii_filho02iii;
reg [31:0] main_lrphiii_filho02iii_reg;
reg [31:0] main_lrphiii_pai01iii;
reg [31:0] main_lrphiii_pai01iii_reg;
reg  main_lrphiii_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_59;
reg [15:0] main_56_60;
reg [31:0] main_56_61;
reg [31:0] main_56_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_64;
reg [15:0] main_56_65;
reg  main_56_66;
reg [31:0] main_56_filho0iii;
reg [31:0] main_67_filho1iii;
reg [31:0] main_67_filho1iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_70;
reg [15:0] main_67_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_74;
reg [15:0] main_67_75;
reg  main_67_76;
reg [31:0] main_77_78;
reg [31:0] main_77_78_reg;
reg  main_77_79;
reg  main_77_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_minexiti_80;
reg [15:0] main_get_minexiti_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_minexiti_82;
reg [15:0] main_get_minexiti_83;
reg [31:0] main_get_minexiti_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_minexiti_85;
reg [31:0] main_get_minexiti_86;
reg [31:0] main_get_minexiti_86_reg;
reg [31:0] main_get_minexiti_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_minexiti_88;
reg [31:0] main_get_minexiti_89;
reg [31:0] main_get_minexiti_89_reg;
reg  main_get_minexiti_90;
reg [31:0] main_91_sextii;
reg [31:0] main_91_92;
reg [31:0] main_91_92_reg;
reg [31:0] main_91_sext1ii;
reg [31:0] main_91_93;
reg [31:0] main_91_93_reg;
reg [31:0] main_94_indvarsivii;
reg [31:0] main_94_indvarsivii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_scevgep36_reg;
reg [31:0] main_94_95;
reg  main_94_96;
reg [31:0] main_98_99;
reg  main_98_exitcond35;
reg [31:0] main_ufind_join_groupsexiti_100;
reg [31:0] main_ufind_join_groupsexiti_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_ufind_join_groupsexiti_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_ufind_join_groupsexiti_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_ufind_join_groupsexiti_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_ufind_join_groupsexiti_103_reg;
reg [63:0] main_ufind_join_groupsexiti_104;
reg [31:0] main_ufind_join_groupsexiti_105;
reg [31:0] main_ufind_join_groupsexiti_105_reg;
reg [31:0] main_backedgei10_mst_num_edges1;
reg [31:0] main_backedgei10_mst_num_edges1_reg;
reg [31:0] main_backedgei10_106;
reg [31:0] main_backedgei10_106_reg;
reg  main_backedgei10_107;
reg [31:0] main_backedgei10_indvarnext38;
reg [31:0] main_110_i01i2;
reg [31:0] main_110_i01i2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep2829;
reg [31:0] main_110_111;
reg [31:0] main_110_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep3233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep3233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_110_scevgep34_reg;
reg [15:0] main_110_112;
reg [15:0] main_110_113;
reg [15:0] main_110_114;
reg [31:0] main_110_115;
reg [31:0] main_110_115_reg;
reg  main_110_exitcond25;
reg  main_110_exitcond25_reg;
reg [31:0] main_118_i023i;
reg [31:0] main_118_i023i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_scevgep24;
reg [31:0] main_118_119;
reg [31:0] main_118_119_reg;
reg  main_118_exitcond23;
reg  main_118_exitcond23_reg;
reg [31:0] main_121_indvar20;
reg [31:0] main_121_indvar20_reg;
reg [31:0] main_121_122;
reg [31:0] main_121_122_reg;
reg [31:0] main_121_last_index021i;
reg [31:0] main_121_last_index021i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_phitransinserti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_phitransinserti_reg;
reg [31:0] main_123_count_deleted_edges017i;
reg [31:0] main_123_count_deleted_edges017i_reg;
reg [31:0] main_123_count_edges016i;
reg [31:0] main_123_count_edges016i_reg;
reg [31:0] main_123_i115i;
reg [31:0] main_123_i115i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_123_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_123_scevgep89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_123_scevgep11;
reg [15:0] main_123_124;
reg  main_123_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_scevgep10;
reg [15:0] main_126_127;
reg [31:0] main_126_128;
reg  main_126_129;
reg [15:0] main_130_131;
reg [31:0] main_130_132;
reg  main_130_133;
reg [31:0] main_134_135;
reg [31:0] main_136_137;
reg [31:0] main_138_count_edges1i;
reg [31:0] main_138_count_edges1i_reg;
reg [31:0] main_138_count_deleted_edges1i;
reg [31:0] main_138_count_deleted_edges1i_reg;
reg [31:0] main_138_139;
reg  main_138_exitcond7;
reg  main_140_141;
reg  main_142_143;
reg [31:0] main_preheaderi5_i219i;
reg [31:0] main_preheaderi5_i219i_reg;
reg [31:0] main_preheaderi5_144;
reg [31:0] main_preheaderi5_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi5_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi5_scevgep19_reg;
reg [15:0] main_preheaderi5_145;
reg  main_preheaderi5_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_147_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_147_scevgep1617;
reg [15:0] main_147_148;
reg [31:0] main_147_149;
reg [31:0] main_147_149_reg;
reg  main_147_150;
reg [15:0] main_147_151;
reg [31:0] main_147_152;
reg [31:0] main_147_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_153_154;
reg [31:0] main_153_155;
reg [31:0] main_153_155_reg;
reg  main_156_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_158_159;
reg [31:0] main_158_160;
reg [31:0] main_158_160_reg;
reg [31:0] main_backedgei_last_index0bei;
reg [31:0] main_backedgei_last_index0bei_reg;
reg  main_backedgei_161;
reg [31:0] main_backedge_crit_edgei_prei;
reg [31:0] main_backedge_crit_edgei_phitmp;
reg [31:0] main_backedge_crit_edgei_phitmp_reg;
reg [31:0] main_162_163;
reg  main_162_164;
reg  main_165_166;
reg [31:0] main_preheader2i_i318i;
reg [31:0] main_preheader2i_i318i_reg;
reg [31:0] main_preheader2i_167;
reg [31:0] main_preheader2i_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep1213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep1213_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i_scevgep15_reg;
reg [15:0] main_preheader2i_168;
reg  main_preheader2i_169;
reg [15:0] main_170_171;
reg [15:0] main_170_171_reg;
reg [31:0] main_170_172;
reg  main_170_173;
reg [15:0] main_170_174;
reg [15:0] main_170_174_reg;
reg [7:0] main_175_176;
reg [7:0] main_175_176_reg;
reg  main_175_177;
reg [15:0] main_178_179;
reg [31:0] main_178_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_181_reg;
reg [31:0] main_178_182;
reg [31:0] main_178_182_reg;
reg [31:0] main_183_184;
reg  main_183_185;
reg [7:0] main_186_187;
reg [7:0] main_186_187_reg;
reg  main_186_188;
reg [15:0] main_189_190;
reg [31:0] main_189_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192_reg;
reg [31:0] main_189_193;
reg [31:0] main_189_193_reg;
reg [31:0] main_194_195;
reg  main_194_196;
reg [63:0] main_199_indvar4;
reg [63:0] main_199_indvar4_reg;
reg  main_199_exitcond6;
reg [63:0] main_200_201;
reg [63:0] main_200_202;
reg [31:0] main_200_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_si0;
reg [63:0] main_200_indvarnext5;
reg [63:0] main_200_indvarnext5_reg;
reg [31:0] main_legup_memset_4_i64exit_204;
reg [31:0] main_205_indvar;
reg [31:0] main_205_indvar_reg;
reg [31:0] main_205_total_weight05i;
reg [31:0] main_205_total_weight05i_reg;
reg [31:0] main_205_path_index04i;
reg [31:0] main_205_path_index04i_reg;
reg [31:0] main_205_206;
reg [31:0] main_205_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_205_scevgep3;
reg [31:0] main_205_207;
reg [31:0] main_205_207_reg;
reg [7:0] main_208_v_in_hamilton_path02i;
reg [7:0] main_208_v_in_hamilton_path02i_reg;
reg [31:0] main_208_j01i;
reg [31:0] main_208_j01i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_208_scevgep;
reg [31:0] main_208_209;
reg  main_208_210;
reg [7:0] main_208_v_in_hamilton_path0i;
reg [7:0] main_208_v_in_hamilton_path0i_reg;
reg [31:0] main_208_211;
reg [31:0] main_208_211_reg;
reg  main_208_exitcond;
reg  main_208_exitcond_reg;
reg  main_212_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_214_215;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_214_215_reg;
reg [31:0] main_214_216;
reg [31:0] main_214_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_214_217;
reg [31:0] main_214_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_214_219;
reg [31:0] main_214_220;
reg [31:0] main_214_221;
reg [31:0] main_214_222;
reg [31:0] main_214_222_reg;
reg [31:0] main_223_path_index1i;
reg [31:0] main_223_path_index1i_reg;
reg [31:0] main_223_total_weight1i;
reg [31:0] main_223_total_weight1i_reg;
reg [31:0] main_223_indvarnext;
reg  main_223_exitcond2;
reg [31:0] main_find_hamiltonian_pathexit_224;
reg [31:0] main_find_hamiltonian_pathexit_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_find_hamiltonian_pathexit_226;
reg [31:0] main_find_hamiltonian_pathexit_227;
reg [31:0] main_find_hamiltonian_pathexit_228;
reg  main_find_hamiltonian_pathexit_230;
reg  is_bridge_start;
reg [15:0] is_bridge_arg_a;
reg [15:0] is_bridge_arg_b;
wire  is_bridge_memory_controller_enable_a;
wire  is_bridge_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] is_bridge_memory_controller_in_a;
wire [1:0] is_bridge_memory_controller_size_a;
wire  is_bridge_memory_controller_enable_b;
wire  is_bridge_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] is_bridge_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] is_bridge_memory_controller_in_b;
wire [1:0] is_bridge_memory_controller_size_b;
reg  is_bridge_finish_final;
reg  is_bridge_finish_reg;
wire  is_bridge_finish;
wire [7:0] is_bridge_return_val;
reg [7:0] is_bridge_return_val_reg;
reg  legup_function_call;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_lrphipreheaderi_26_temp_out;
wire [31:0] main_lrphipreheaderi_26_unused;
reg  lpm_divide_main_lrphipreheaderi_26_en;
reg [31:0] lpm_divide_main_lrphipreheaderi_26_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_preheaderi3_2_en;
reg [31:0] main_preheaderi3_2_stage0_reg;
reg  lpm_mult_main_preheaderi_7_en;
reg [31:0] main_preheaderi_7_stage0_reg;

/*   %26 = sdiv i32 %23, 2*/
lpm_divide lpm_divide_main_lrphipreheaderi_26 (
	.quotient (lpm_divide_main_lrphipreheaderi_26_temp_out),
	.remain (main_lrphipreheaderi_26_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_lrphipreheaderi_26_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_lrphipreheaderi_26.lpm_pipeline = 32,
	lpm_divide_main_lrphipreheaderi_26.lpm_widthn = 32,
	lpm_divide_main_lrphipreheaderi_26.lpm_widthd = 32,
	lpm_divide_main_lrphipreheaderi_26.lpm_drepresentation = "SIGNED",
	lpm_divide_main_lrphipreheaderi_26.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_lrphipreheaderi_26.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


is_bridge is_bridge (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (is_bridge_memory_controller_enable_a),
	.memory_controller_address_a (is_bridge_memory_controller_address_a),
	.memory_controller_write_enable_a (is_bridge_memory_controller_write_enable_a),
	.memory_controller_in_a (is_bridge_memory_controller_in_a),
	.memory_controller_size_a (is_bridge_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (is_bridge_memory_controller_enable_b),
	.memory_controller_address_b (is_bridge_memory_controller_address_b),
	.memory_controller_write_enable_b (is_bridge_memory_controller_write_enable_b),
	.memory_controller_in_b (is_bridge_memory_controller_in_b),
	.memory_controller_size_b (is_bridge_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (is_bridge_start),
	.finish (is_bridge_finish),
	.return_val (is_bridge_return_val),
	.arg_a (is_bridge_arg_a),
	.arg_b (is_bridge_arg_b)
);

defparam
	is_bridge.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %0*/
	/*   %1 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		$write("Começando inicialização\n");
	end
	/* main: %init_edges.exit*/
	/*   %16 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_init_edgesexit_60)) begin
		$write("Inicialização finalizada\n\n");
	end
	/* main: %init_edges.exit*/
	/*   %17 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_init_edgesexit_60)) begin
		$write("Gerando MST\n");
	end
	/* main: %20*/
	/*   %21 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str11, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		$write("Heap cheio\n");
	end
	/* main: %mst.exit*/
	/*   %108 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_mstexit_186)) begin
		$write("MST gerada\n\n");
	end
	/* main: %mst.exit*/
	/*   %109 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str4, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_mstexit_186)) begin
		$write("Duplicando aresta\n");
	end
	/* main: %mst_duplicate_edges.exit*/
	/*   %116 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str5, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_mst_duplicate_edgesexit_192)) begin
		$write("Arestas duplicadas\n\n");
	end
	/* main: %mst_duplicate_edges.exit*/
	/*   %117 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str6, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_mst_duplicate_edgesexit_192)) begin
		$write("Calculando caminho euleriano\n");
	end
	/* main: %find_euler_path.exit*/
	/*   %197 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str7, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_find_euler_pathexit_255)) begin
		$write("Caminho euleriano calculado\n\n");
	end
	/* main: %find_euler_path.exit*/
	/*   %198 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([33 x i8]* @.str8, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_find_euler_pathexit_255)) begin
		$write("Calculando caminho hamiltoniano\n");
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %229 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([33 x i8]* @.str9, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_282)) begin
		$write("Caminho hamiltoniano calculado\n\n");
	end
	/* main: %231*/
	/*   %232 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str10, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__231_283)) begin
		$write("ALGORITMO PASSOU!\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB_preheaderi3_2;
LEGUP_F_main_BB__110_187:
		next_state = LEGUP_F_main_BB__110_188;
LEGUP_F_main_BB__110_188:
		next_state = LEGUP_F_main_BB__110_189;
LEGUP_F_main_BB__110_189:
		next_state = LEGUP_F_main_BB__110_190;
LEGUP_F_main_BB__110_190:
		next_state = LEGUP_F_main_BB__110_191;
LEGUP_F_main_BB__110_191:
	if ((main_110_exitcond25_reg == 1'd1))
		next_state = LEGUP_F_main_BB_mst_duplicate_edgesexit_192;
	else if ((main_110_exitcond25_reg == 1'd0))
		next_state = LEGUP_F_main_BB__110_187;
LEGUP_F_main_BB__118_193:
		next_state = LEGUP_F_main_BB__118_194;
LEGUP_F_main_BB__118_194:
	if ((main_118_exitcond23_reg == 1'd1))
		next_state = LEGUP_F_main_BB__120_195;
	else if ((main_118_exitcond23_reg == 1'd0))
		next_state = LEGUP_F_main_BB__118_193;
LEGUP_F_main_BB__120_195:
		next_state = LEGUP_F_main_BB__120_196;
LEGUP_F_main_BB__120_196:
		next_state = LEGUP_F_main_BB__121_197;
LEGUP_F_main_BB__121_197:
		next_state = LEGUP_F_main_BB__123_198;
LEGUP_F_main_BB__123_198:
		next_state = LEGUP_F_main_BB__123_199;
LEGUP_F_main_BB__123_199:
		next_state = LEGUP_F_main_BB__123_200;
LEGUP_F_main_BB__123_200:
	if ((main_123_125 == 1'd1))
		next_state = LEGUP_F_main_BB__126_201;
	else if ((main_123_125 == 1'd0))
		next_state = LEGUP_F_main_BB__136_208;
LEGUP_F_main_BB__126_201:
		next_state = LEGUP_F_main_BB__126_202;
LEGUP_F_main_BB__126_202:
		next_state = LEGUP_F_main_BB__126_203;
LEGUP_F_main_BB__126_203:
	if ((main_126_129 == 1'd1))
		next_state = LEGUP_F_main_BB__134_207;
	else if ((main_126_129 == 1'd0))
		next_state = LEGUP_F_main_BB__130_204;
LEGUP_F_main_BB__130_204:
		next_state = LEGUP_F_main_BB__130_205;
LEGUP_F_main_BB__130_205:
		next_state = LEGUP_F_main_BB__130_206;
LEGUP_F_main_BB__130_206:
	if ((main_130_133 == 1'd1))
		next_state = LEGUP_F_main_BB__134_207;
	else if ((main_130_133 == 1'd0))
		next_state = LEGUP_F_main_BB__138_209;
LEGUP_F_main_BB__134_207:
		next_state = LEGUP_F_main_BB__138_209;
LEGUP_F_main_BB__136_208:
		next_state = LEGUP_F_main_BB__138_209;
LEGUP_F_main_BB__138_209:
	if ((main_138_exitcond7 == 1'd1))
		next_state = LEGUP_F_main_BB__140_210;
	else if ((main_138_exitcond7 == 1'd0))
		next_state = LEGUP_F_main_BB__123_198;
LEGUP_F_main_BB__140_210:
	if ((main_140_141 == 1'd1))
		next_state = LEGUP_F_main_BB_find_euler_pathexit_255;
	else if ((main_140_141 == 1'd0))
		next_state = LEGUP_F_main_BB__142_211;
LEGUP_F_main_BB__142_211:
	if ((main_142_143 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5preheader_212;
	else if ((main_142_143 == 1'd0))
		next_state = LEGUP_F_main_BB__165_231;
LEGUP_F_main_BB__147_216:
		next_state = LEGUP_F_main_BB__147_217;
LEGUP_F_main_BB__147_217:
		next_state = LEGUP_F_main_BB__147_218;
LEGUP_F_main_BB__147_218:
	if ((main_147_150 == 1'd1))
		next_state = LEGUP_F_main_BB__153_219;
	else if ((main_147_150 == 1'd0))
		next_state = LEGUP_F_main_BB__156_221;
LEGUP_F_main_BB__14_59:
	if ((main_14_exitcond50 == 1'd1))
		next_state = LEGUP_F_main_BB_init_edgesexit_60;
	else if ((main_14_exitcond50 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_53;
LEGUP_F_main_BB__153_219:
		next_state = LEGUP_F_main_BB__153_220;
LEGUP_F_main_BB__153_220:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB__156_221:
	if ((main_156_157 == 1'd1))
		next_state = LEGUP_F_main_BB__158_222;
	else if ((main_156_157 == 1'd0))
		next_state = LEGUP_F_main_BB__162_230;
LEGUP_F_main_BB__158_222:
		next_state = LEGUP_F_main_BB__158_223;
LEGUP_F_main_BB__158_223:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB__162_230:
	if ((main_162_164 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5_213;
	else if ((main_162_164 == 1'd0))
		next_state = LEGUP_F_main_BB_backedgeiloopexit_224;
LEGUP_F_main_BB__165_231:
	if ((main_165_166 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2ipreheader_232;
	else if ((main_165_166 == 1'd0))
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB__170_236:
		next_state = LEGUP_F_main_BB__170_237;
LEGUP_F_main_BB__170_237:
		next_state = LEGUP_F_main_BB__170_238;
LEGUP_F_main_BB__170_238:
	if ((main_170_173 == 1'd1))
		next_state = LEGUP_F_main_BB__175_239;
	else if ((main_170_173 == 1'd0))
		next_state = LEGUP_F_main_BB__183_246;
LEGUP_F_main_BB__175_239:
		next_state = LEGUP_function_call_240;
LEGUP_F_main_BB__175_241:
	if ((main_175_177 == 1'd1))
		next_state = LEGUP_F_main_BB__178_242;
	else if ((main_175_177 == 1'd0))
		next_state = LEGUP_F_main_BB__194_254;
LEGUP_F_main_BB__178_242:
		next_state = LEGUP_F_main_BB__178_243;
LEGUP_F_main_BB__178_243:
		next_state = LEGUP_F_main_BB__178_244;
LEGUP_F_main_BB__178_244:
		next_state = LEGUP_F_main_BB__178_245;
LEGUP_F_main_BB__178_245:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB__183_246:
	if ((main_183_185 == 1'd1))
		next_state = LEGUP_F_main_BB__186_247;
	else if ((main_183_185 == 1'd0))
		next_state = LEGUP_F_main_BB__194_254;
LEGUP_F_main_BB__186_247:
		next_state = LEGUP_function_call_248;
LEGUP_F_main_BB__186_249:
	if ((main_186_188 == 1'd1))
		next_state = LEGUP_F_main_BB__189_250;
	else if ((main_186_188 == 1'd0))
		next_state = LEGUP_F_main_BB__194_254;
LEGUP_F_main_BB__189_250:
		next_state = LEGUP_F_main_BB__189_251;
LEGUP_F_main_BB__189_251:
		next_state = LEGUP_F_main_BB__189_252;
LEGUP_F_main_BB__189_252:
		next_state = LEGUP_F_main_BB__189_253;
LEGUP_F_main_BB__189_253:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB__18_61:
	if ((main_18_19 == 1'd1))
		next_state = LEGUP_F_main_BB__20_62;
	else if ((main_18_19 == 1'd0))
		next_state = LEGUP_F_main_BB__22_63;
LEGUP_F_main_BB__194_254:
	if ((main_194_196 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_233;
	else if ((main_194_196 == 1'd0))
		next_state = LEGUP_F_main_BB_backedgeiloopexit1_225;
LEGUP_F_main_BB__199_256:
	if ((main_199_exitcond6 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_259;
	else if ((main_199_exitcond6 == 1'd0))
		next_state = LEGUP_F_main_BB__200_257;
LEGUP_F_main_BB__200_257:
		next_state = LEGUP_F_main_BB__200_258;
LEGUP_F_main_BB__200_258:
		next_state = LEGUP_F_main_BB__199_256;
LEGUP_F_main_BB__205_263:
		next_state = LEGUP_F_main_BB__205_264;
LEGUP_F_main_BB__205_264:
		next_state = LEGUP_F_main_BB__205_265;
LEGUP_F_main_BB__205_265:
		next_state = LEGUP_F_main_BB__205_266;
LEGUP_F_main_BB__205_266:
		next_state = LEGUP_F_main_BB__208_267;
LEGUP_F_main_BB__208_267:
		next_state = LEGUP_F_main_BB__208_268;
LEGUP_F_main_BB__208_268:
		next_state = LEGUP_F_main_BB__208_269;
LEGUP_F_main_BB__208_269:
	if ((main_208_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__212_270;
	else if ((main_208_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__208_267;
LEGUP_F_main_BB__20_62:
		next_state = LEGUP_F_main_BB_insertexiti_145;
LEGUP_F_main_BB__212_270:
	if ((main_212_213 == 1'd1))
		next_state = LEGUP_F_main_BB__214_271;
	else if ((main_212_213 == 1'd0))
		next_state = LEGUP_F_main_BB__223_277;
LEGUP_F_main_BB__214_271:
		next_state = LEGUP_F_main_BB__214_272;
LEGUP_F_main_BB__214_272:
		next_state = LEGUP_F_main_BB__214_273;
LEGUP_F_main_BB__214_273:
		next_state = LEGUP_F_main_BB__214_274;
LEGUP_F_main_BB__214_274:
		next_state = LEGUP_F_main_BB__214_275;
LEGUP_F_main_BB__214_275:
		next_state = LEGUP_F_main_BB__214_276;
LEGUP_F_main_BB__214_276:
		next_state = LEGUP_F_main_BB__223_277;
LEGUP_F_main_BB__223_277:
	if ((main_223_exitcond2 == 1'd1))
		next_state = LEGUP_F_main_BB_find_hamiltonian_pathexit_278;
	else if ((main_223_exitcond2 == 1'd0))
		next_state = LEGUP_F_main_BB__205_263;
LEGUP_F_main_BB__22_63:
		next_state = LEGUP_F_main_BB__22_64;
LEGUP_F_main_BB__22_64:
		next_state = LEGUP_F_main_BB__22_65;
LEGUP_F_main_BB__22_65:
	if ((main_22_25_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheaderi_66;
	else if ((main_22_25_reg == 1'd0))
		next_state = LEGUP_F_main_BB_insertexiti_145;
LEGUP_F_main_BB__231_283:
		next_state = LEGUP_F_main_BB__233_284;
LEGUP_F_main_BB__233_284:
		next_state = LEGUP_0;
LEGUP_F_main_BB__4_49:
		next_state = LEGUP_F_main_BB__4_50;
LEGUP_F_main_BB__4_50:
		next_state = LEGUP_F_main_BB__4_51;
LEGUP_F_main_BB__4_51:
	if ((main_4_exitcond59_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderipreheader_52;
	else if ((main_4_exitcond59_reg == 1'd0))
		next_state = LEGUP_F_main_BB__4_49;
LEGUP_F_main_BB__56_155:
		next_state = LEGUP_F_main_BB__56_156;
LEGUP_F_main_BB__56_156:
		next_state = LEGUP_F_main_BB__56_157;
LEGUP_F_main_BB__56_157:
		next_state = LEGUP_F_main_BB__56_158;
LEGUP_F_main_BB__56_158:
		next_state = LEGUP_F_main_BB__56_159;
LEGUP_F_main_BB__56_159:
		next_state = LEGUP_F_main_BB__67_160;
LEGUP_F_main_BB__67_160:
		next_state = LEGUP_F_main_BB__67_161;
LEGUP_F_main_BB__67_161:
		next_state = LEGUP_F_main_BB__67_162;
LEGUP_F_main_BB__67_162:
		next_state = LEGUP_F_main_BB__67_163;
LEGUP_F_main_BB__67_163:
		next_state = LEGUP_F_main_BB__67_164;
LEGUP_F_main_BB__67_164:
	if ((main_67_76 == 1'd1))
		next_state = LEGUP_F_main_BB__77_165;
	else if ((main_67_76 == 1'd0))
		next_state = LEGUP_F_main_BB_get_minexitiloopexit_168;
LEGUP_F_main_BB__77_165:
		next_state = LEGUP_F_main_BB__77_166;
LEGUP_F_main_BB__77_166:
		next_state = LEGUP_F_main_BB__77_167;
LEGUP_F_main_BB__77_167:
	if ((main_77_79_reg == 1'd1))
		next_state = LEGUP_F_main_BB_get_minexitiloopexit_168;
	else if ((main_77_79_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiii_154;
LEGUP_F_main_BB__8_55:
		next_state = LEGUP_F_main_BB__8_56;
LEGUP_F_main_BB__8_56:
		next_state = LEGUP_F_main_BB__8_57;
LEGUP_F_main_BB__8_57:
		next_state = LEGUP_F_main_BB__8_58;
LEGUP_F_main_BB__8_58:
	if ((main_8_exitcond43_reg == 1'd1))
		next_state = LEGUP_F_main_BB__14_59;
	else if ((main_8_exitcond43_reg == 1'd0))
		next_state = LEGUP_F_main_BB__8_55;
LEGUP_F_main_BB__91_174:
		next_state = LEGUP_F_main_BB__94_175;
LEGUP_F_main_BB__94_175:
		next_state = LEGUP_F_main_BB__94_176;
LEGUP_F_main_BB__94_176:
		next_state = LEGUP_F_main_BB__94_177;
LEGUP_F_main_BB__94_177:
	if ((main_94_96 == 1'd1))
		next_state = LEGUP_F_main_BB__97_178;
	else if ((main_94_96 == 1'd0))
		next_state = LEGUP_F_main_BB__98_180;
LEGUP_F_main_BB__97_178:
		next_state = LEGUP_F_main_BB__97_179;
LEGUP_F_main_BB__97_179:
		next_state = LEGUP_F_main_BB__98_180;
LEGUP_F_main_BB__98_180:
	if ((main_98_exitcond35 == 1'd1))
		next_state = LEGUP_F_main_BB_ufind_join_groupsexiti_181;
	else if ((main_98_exitcond35 == 1'd0))
		next_state = LEGUP_F_main_BB__94_175;
LEGUP_F_main_BB__crit_edgeii_107:
		next_state = LEGUP_F_main_BB__crit_edgeii_108;
LEGUP_F_main_BB__crit_edgeii_108:
		next_state = LEGUP_F_main_BB__crit_edgeii_109;
LEGUP_F_main_BB__crit_edgeii_109:
		next_state = LEGUP_F_main_BB__crit_edgeii_110;
LEGUP_F_main_BB__crit_edgeii_110:
		next_state = LEGUP_F_main_BB__crit_edgeii_111;
LEGUP_F_main_BB__crit_edgeii_111:
		next_state = LEGUP_F_main_BB__crit_edgeii_112;
LEGUP_F_main_BB__crit_edgeii_112:
		next_state = LEGUP_F_main_BB__crit_edgeii_113;
LEGUP_F_main_BB__crit_edgeii_113:
		next_state = LEGUP_F_main_BB__crit_edgeii_114;
LEGUP_F_main_BB__crit_edgeii_114:
		next_state = LEGUP_F_main_BB__crit_edgeii_115;
LEGUP_F_main_BB__crit_edgeii_115:
		next_state = LEGUP_F_main_BB__crit_edgeii_116;
LEGUP_F_main_BB__crit_edgeii_116:
		next_state = LEGUP_F_main_BB__crit_edgeii_117;
LEGUP_F_main_BB__crit_edgeii_117:
		next_state = LEGUP_F_main_BB__crit_edgeii_118;
LEGUP_F_main_BB__crit_edgeii_118:
		next_state = LEGUP_F_main_BB__crit_edgeii_119;
LEGUP_F_main_BB__crit_edgeii_119:
		next_state = LEGUP_F_main_BB__crit_edgeii_120;
LEGUP_F_main_BB__crit_edgeii_120:
		next_state = LEGUP_F_main_BB__crit_edgeii_121;
LEGUP_F_main_BB__crit_edgeii_121:
		next_state = LEGUP_F_main_BB__crit_edgeii_122;
LEGUP_F_main_BB__crit_edgeii_122:
		next_state = LEGUP_F_main_BB__crit_edgeii_123;
LEGUP_F_main_BB__crit_edgeii_123:
		next_state = LEGUP_F_main_BB__crit_edgeii_124;
LEGUP_F_main_BB__crit_edgeii_124:
		next_state = LEGUP_F_main_BB__crit_edgeii_125;
LEGUP_F_main_BB__crit_edgeii_125:
		next_state = LEGUP_F_main_BB__crit_edgeii_126;
LEGUP_F_main_BB__crit_edgeii_126:
		next_state = LEGUP_F_main_BB__crit_edgeii_127;
LEGUP_F_main_BB__crit_edgeii_127:
		next_state = LEGUP_F_main_BB__crit_edgeii_128;
LEGUP_F_main_BB__crit_edgeii_128:
		next_state = LEGUP_F_main_BB__crit_edgeii_129;
LEGUP_F_main_BB__crit_edgeii_129:
		next_state = LEGUP_F_main_BB__crit_edgeii_130;
LEGUP_F_main_BB__crit_edgeii_130:
		next_state = LEGUP_F_main_BB__crit_edgeii_131;
LEGUP_F_main_BB__crit_edgeii_131:
		next_state = LEGUP_F_main_BB__crit_edgeii_132;
LEGUP_F_main_BB__crit_edgeii_132:
		next_state = LEGUP_F_main_BB__crit_edgeii_133;
LEGUP_F_main_BB__crit_edgeii_133:
		next_state = LEGUP_F_main_BB__crit_edgeii_134;
LEGUP_F_main_BB__crit_edgeii_134:
		next_state = LEGUP_F_main_BB__crit_edgeii_135;
LEGUP_F_main_BB__crit_edgeii_135:
		next_state = LEGUP_F_main_BB__crit_edgeii_136;
LEGUP_F_main_BB__crit_edgeii_136:
		next_state = LEGUP_F_main_BB__crit_edgeii_137;
LEGUP_F_main_BB__crit_edgeii_137:
		next_state = LEGUP_F_main_BB__crit_edgeii_138;
LEGUP_F_main_BB__crit_edgeii_138:
		next_state = LEGUP_F_main_BB__crit_edgeii_139;
LEGUP_F_main_BB__crit_edgeii_139:
		next_state = LEGUP_F_main_BB__crit_edgeii_140;
LEGUP_F_main_BB__crit_edgeii_140:
		next_state = LEGUP_F_main_BB__crit_edgeii_141;
LEGUP_F_main_BB__crit_edgeii_141:
		next_state = LEGUP_F_main_BB__crit_edgeii_142;
LEGUP_F_main_BB__crit_edgeii_142:
		next_state = LEGUP_F_main_BB__crit_edgeii_143;
LEGUP_F_main_BB__crit_edgeii_143:
	if ((main__crit_edgeii_46 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph2i_104;
	else if ((main__crit_edgeii_46 == 1'd0))
		next_state = LEGUP_F_main_BB_insertexitiloopexit_144;
LEGUP_F_main_BB_backedge_crit_edgei_227:
		next_state = LEGUP_F_main_BB_backedge_crit_edgei_228;
LEGUP_F_main_BB_backedge_crit_edgei_228:
		next_state = LEGUP_F_main_BB_backedge_crit_edgei_229;
LEGUP_F_main_BB_backedge_crit_edgei_229:
		next_state = LEGUP_F_main_BB__121_197;
LEGUP_F_main_BB_backedgei10_185:
	if ((main_backedgei10_107 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_147;
	else if ((main_backedgei10_107 == 1'd0))
		next_state = LEGUP_F_main_BB_mstexit_186;
LEGUP_F_main_BB_backedgei_226:
	if ((main_backedgei_161 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge_crit_edgei_227;
	else if ((main_backedgei_161 == 1'd0))
		next_state = LEGUP_F_main_BB_find_euler_pathexit_255;
LEGUP_F_main_BB_backedgeiloopexit1_225:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB_backedgeiloopexit_224:
		next_state = LEGUP_F_main_BB_backedgei_226;
LEGUP_F_main_BB_find_euler_pathexit_255:
		next_state = LEGUP_F_main_BB__199_256;
LEGUP_F_main_BB_find_hamiltonian_pathexit_278:
		next_state = LEGUP_F_main_BB_find_hamiltonian_pathexit_279;
LEGUP_F_main_BB_find_hamiltonian_pathexit_279:
		next_state = LEGUP_F_main_BB_find_hamiltonian_pathexit_280;
LEGUP_F_main_BB_find_hamiltonian_pathexit_280:
		next_state = LEGUP_F_main_BB_find_hamiltonian_pathexit_281;
LEGUP_F_main_BB_find_hamiltonian_pathexit_281:
		next_state = LEGUP_F_main_BB_find_hamiltonian_pathexit_282;
LEGUP_F_main_BB_find_hamiltonian_pathexit_282:
	if ((main_find_hamiltonian_pathexit_230 == 1'd1))
		next_state = LEGUP_F_main_BB__231_283;
	else if ((main_find_hamiltonian_pathexit_230 == 1'd0))
		next_state = LEGUP_F_main_BB__233_284;
LEGUP_F_main_BB_get_minexiti_169:
		next_state = LEGUP_F_main_BB_get_minexiti_170;
LEGUP_F_main_BB_get_minexiti_170:
		next_state = LEGUP_F_main_BB_get_minexiti_171;
LEGUP_F_main_BB_get_minexiti_171:
		next_state = LEGUP_F_main_BB_get_minexiti_172;
LEGUP_F_main_BB_get_minexiti_172:
		next_state = LEGUP_F_main_BB_get_minexiti_173;
LEGUP_F_main_BB_get_minexiti_173:
	if ((main_get_minexiti_90 == 1'd1))
		next_state = LEGUP_F_main_BB_backedgei10_185;
	else if ((main_get_minexiti_90 == 1'd0))
		next_state = LEGUP_F_main_BB__91_174;
LEGUP_F_main_BB_get_minexitiloopexit_168:
		next_state = LEGUP_F_main_BB_get_minexiti_169;
LEGUP_F_main_BB_init_adjexit_16:
		next_state = LEGUP_F_main_BB_init_adjexit_17;
LEGUP_F_main_BB_init_adjexit_17:
		next_state = LEGUP_F_main_BB_init_adjexit_18;
LEGUP_F_main_BB_init_adjexit_18:
		next_state = LEGUP_F_main_BB_init_adjexit_19;
LEGUP_F_main_BB_init_adjexit_19:
		next_state = LEGUP_F_main_BB_init_adjexit_20;
LEGUP_F_main_BB_init_adjexit_20:
		next_state = LEGUP_F_main_BB_init_adjexit_21;
LEGUP_F_main_BB_init_adjexit_21:
		next_state = LEGUP_F_main_BB_init_adjexit_22;
LEGUP_F_main_BB_init_adjexit_22:
		next_state = LEGUP_F_main_BB_init_adjexit_23;
LEGUP_F_main_BB_init_adjexit_23:
		next_state = LEGUP_F_main_BB_init_adjexit_24;
LEGUP_F_main_BB_init_adjexit_24:
		next_state = LEGUP_F_main_BB_init_adjexit_25;
LEGUP_F_main_BB_init_adjexit_25:
		next_state = LEGUP_F_main_BB_init_adjexit_26;
LEGUP_F_main_BB_init_adjexit_26:
		next_state = LEGUP_F_main_BB_init_adjexit_27;
LEGUP_F_main_BB_init_adjexit_27:
		next_state = LEGUP_F_main_BB_init_adjexit_28;
LEGUP_F_main_BB_init_adjexit_28:
		next_state = LEGUP_F_main_BB_init_adjexit_29;
LEGUP_F_main_BB_init_adjexit_29:
		next_state = LEGUP_F_main_BB_init_adjexit_30;
LEGUP_F_main_BB_init_adjexit_30:
		next_state = LEGUP_F_main_BB_init_adjexit_31;
LEGUP_F_main_BB_init_adjexit_31:
		next_state = LEGUP_F_main_BB_init_adjexit_32;
LEGUP_F_main_BB_init_adjexit_32:
		next_state = LEGUP_F_main_BB_init_adjexit_33;
LEGUP_F_main_BB_init_adjexit_33:
		next_state = LEGUP_F_main_BB_init_adjexit_34;
LEGUP_F_main_BB_init_adjexit_34:
		next_state = LEGUP_F_main_BB_init_adjexit_35;
LEGUP_F_main_BB_init_adjexit_35:
		next_state = LEGUP_F_main_BB_init_adjexit_36;
LEGUP_F_main_BB_init_adjexit_36:
		next_state = LEGUP_F_main_BB_init_adjexit_37;
LEGUP_F_main_BB_init_adjexit_37:
		next_state = LEGUP_F_main_BB_init_adjexit_38;
LEGUP_F_main_BB_init_adjexit_38:
		next_state = LEGUP_F_main_BB_init_adjexit_39;
LEGUP_F_main_BB_init_adjexit_39:
		next_state = LEGUP_F_main_BB_init_adjexit_40;
LEGUP_F_main_BB_init_adjexit_40:
		next_state = LEGUP_F_main_BB_init_adjexit_41;
LEGUP_F_main_BB_init_adjexit_41:
		next_state = LEGUP_F_main_BB_init_adjexit_42;
LEGUP_F_main_BB_init_adjexit_42:
		next_state = LEGUP_F_main_BB_init_adjexit_43;
LEGUP_F_main_BB_init_adjexit_43:
		next_state = LEGUP_F_main_BB_init_adjexit_44;
LEGUP_F_main_BB_init_adjexit_44:
		next_state = LEGUP_F_main_BB_init_adjexit_45;
LEGUP_F_main_BB_init_adjexit_45:
		next_state = LEGUP_F_main_BB_init_adjexit_46;
LEGUP_F_main_BB_init_adjexit_46:
		next_state = LEGUP_F_main_BB_init_adjexit_47;
LEGUP_F_main_BB_init_adjexit_47:
		next_state = LEGUP_F_main_BB_init_adjexit_48;
LEGUP_F_main_BB_init_adjexit_48:
		next_state = LEGUP_F_main_BB__4_49;
LEGUP_F_main_BB_init_edgesexit_60:
		next_state = LEGUP_F_main_BB__18_61;
LEGUP_F_main_BB_insertexiti_145:
	if ((main_insertexiti_exitcond40 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_146;
	else if ((main_insertexiti_exitcond40 == 1'd0))
		next_state = LEGUP_F_main_BB__18_61;
LEGUP_F_main_BB_insertexitiloopexit_144:
		next_state = LEGUP_F_main_BB_insertexiti_145;
LEGUP_F_main_BB_legup_memset_4_i64exit_259:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_260;
LEGUP_F_main_BB_legup_memset_4_i64exit_260:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_261;
LEGUP_F_main_BB_legup_memset_4_i64exit_261:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_262;
LEGUP_F_main_BB_legup_memset_4_i64exit_262:
		next_state = LEGUP_F_main_BB__205_263;
LEGUP_F_main_BB_lrph2i_104:
		next_state = LEGUP_F_main_BB_lrph2i_105;
LEGUP_F_main_BB_lrph2i_105:
		next_state = LEGUP_F_main_BB_lrph2i_106;
LEGUP_F_main_BB_lrph2i_106:
	if ((main_lrph2i_38_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgeii_107;
	else if ((main_lrph2i_38_reg == 1'd0))
		next_state = LEGUP_F_main_BB_insertexitiloopexit_144;
LEGUP_F_main_BB_lrph2ipreheader_103:
		next_state = LEGUP_F_main_BB_lrph2i_104;
LEGUP_F_main_BB_lrphi_147:
		next_state = LEGUP_F_main_BB_lrphi_148;
LEGUP_F_main_BB_lrphi_148:
		next_state = LEGUP_F_main_BB_lrphi_149;
LEGUP_F_main_BB_lrphi_149:
		next_state = LEGUP_F_main_BB_lrphi_150;
LEGUP_F_main_BB_lrphi_150:
		next_state = LEGUP_F_main_BB_lrphi_151;
LEGUP_F_main_BB_lrphi_151:
		next_state = LEGUP_F_main_BB_lrphi_152;
LEGUP_F_main_BB_lrphi_152:
	if ((main_lrphi_54_reg == 1'd1))
		next_state = LEGUP_F_main_BB_get_minexiti_169;
	else if ((main_lrphi_54_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiipreheader_153;
LEGUP_F_main_BB_lrphiii_154:
	if ((main_lrphiii_55 == 1'd1))
		next_state = LEGUP_F_main_BB__56_155;
	else if ((main_lrphiii_55 == 1'd0))
		next_state = LEGUP_F_main_BB__67_160;
LEGUP_F_main_BB_lrphiiipreheader_153:
		next_state = LEGUP_F_main_BB_lrphiii_154;
LEGUP_F_main_BB_lrphipreheader_146:
		next_state = LEGUP_F_main_BB_lrphi_147;
LEGUP_F_main_BB_lrphipreheaderi_100:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_101;
LEGUP_F_main_BB_lrphipreheaderi_101:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_102;
LEGUP_F_main_BB_lrphipreheaderi_102:
	if ((main_lrphipreheaderi_32 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph2ipreheader_103;
	else if ((main_lrphipreheaderi_32 == 1'd0))
		next_state = LEGUP_F_main_BB_insertexiti_145;
LEGUP_F_main_BB_lrphipreheaderi_66:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_67;
LEGUP_F_main_BB_lrphipreheaderi_67:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_68;
LEGUP_F_main_BB_lrphipreheaderi_68:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_69;
LEGUP_F_main_BB_lrphipreheaderi_69:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_70;
LEGUP_F_main_BB_lrphipreheaderi_70:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_71;
LEGUP_F_main_BB_lrphipreheaderi_71:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_72;
LEGUP_F_main_BB_lrphipreheaderi_72:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_73;
LEGUP_F_main_BB_lrphipreheaderi_73:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_74;
LEGUP_F_main_BB_lrphipreheaderi_74:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_75;
LEGUP_F_main_BB_lrphipreheaderi_75:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_76;
LEGUP_F_main_BB_lrphipreheaderi_76:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_77;
LEGUP_F_main_BB_lrphipreheaderi_77:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_78;
LEGUP_F_main_BB_lrphipreheaderi_78:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_79;
LEGUP_F_main_BB_lrphipreheaderi_79:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_80;
LEGUP_F_main_BB_lrphipreheaderi_80:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_81;
LEGUP_F_main_BB_lrphipreheaderi_81:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_82;
LEGUP_F_main_BB_lrphipreheaderi_82:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_83;
LEGUP_F_main_BB_lrphipreheaderi_83:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_84;
LEGUP_F_main_BB_lrphipreheaderi_84:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_85;
LEGUP_F_main_BB_lrphipreheaderi_85:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_86;
LEGUP_F_main_BB_lrphipreheaderi_86:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_87;
LEGUP_F_main_BB_lrphipreheaderi_87:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_88;
LEGUP_F_main_BB_lrphipreheaderi_88:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_89;
LEGUP_F_main_BB_lrphipreheaderi_89:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_90;
LEGUP_F_main_BB_lrphipreheaderi_90:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_91;
LEGUP_F_main_BB_lrphipreheaderi_91:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_92;
LEGUP_F_main_BB_lrphipreheaderi_92:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_93;
LEGUP_F_main_BB_lrphipreheaderi_93:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_94;
LEGUP_F_main_BB_lrphipreheaderi_94:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_95;
LEGUP_F_main_BB_lrphipreheaderi_95:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_96;
LEGUP_F_main_BB_lrphipreheaderi_96:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_97;
LEGUP_F_main_BB_lrphipreheaderi_97:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_98;
LEGUP_F_main_BB_lrphipreheaderi_98:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_99;
LEGUP_F_main_BB_lrphipreheaderi_99:
		next_state = LEGUP_F_main_BB_lrphipreheaderi_100;
LEGUP_F_main_BB_mst_duplicate_edgesexit_192:
		next_state = LEGUP_F_main_BB__118_193;
LEGUP_F_main_BB_mstexit_186:
		next_state = LEGUP_F_main_BB__110_187;
LEGUP_F_main_BB_preheader2i_233:
		next_state = LEGUP_F_main_BB_preheader2i_234;
LEGUP_F_main_BB_preheader2i_234:
		next_state = LEGUP_F_main_BB_preheader2i_235;
LEGUP_F_main_BB_preheader2i_235:
	if ((main_preheader2i_169 == 1'd1))
		next_state = LEGUP_F_main_BB__170_236;
	else if ((main_preheader2i_169 == 1'd0))
		next_state = LEGUP_F_main_BB__194_254;
LEGUP_F_main_BB_preheader2ipreheader_232:
		next_state = LEGUP_F_main_BB_preheader2i_233;
LEGUP_F_main_BB_preheaderi3_10:
		next_state = LEGUP_F_main_BB_preheaderi3_11;
LEGUP_F_main_BB_preheaderi3_11:
		next_state = LEGUP_F_main_BB_preheaderi3_12;
LEGUP_F_main_BB_preheaderi3_12:
		next_state = LEGUP_F_main_BB_preheaderi3_13;
LEGUP_F_main_BB_preheaderi3_13:
		next_state = LEGUP_F_main_BB_preheaderi3_14;
LEGUP_F_main_BB_preheaderi3_14:
		next_state = LEGUP_F_main_BB_preheaderi3_15;
LEGUP_F_main_BB_preheaderi3_15:
	if ((main_preheaderi3_exitcond61_reg == 1'd1))
		next_state = LEGUP_F_main_BB_init_adjexit_16;
	else if ((main_preheaderi3_exitcond61_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi3_2;
LEGUP_F_main_BB_preheaderi3_2:
		next_state = LEGUP_F_main_BB_preheaderi3_3;
LEGUP_F_main_BB_preheaderi3_3:
		next_state = LEGUP_F_main_BB_preheaderi3_4;
LEGUP_F_main_BB_preheaderi3_4:
		next_state = LEGUP_F_main_BB_preheaderi3_5;
LEGUP_F_main_BB_preheaderi3_5:
		next_state = LEGUP_F_main_BB_preheaderi3_6;
LEGUP_F_main_BB_preheaderi3_6:
		next_state = LEGUP_F_main_BB_preheaderi3_7;
LEGUP_F_main_BB_preheaderi3_7:
		next_state = LEGUP_F_main_BB_preheaderi3_8;
LEGUP_F_main_BB_preheaderi3_8:
		next_state = LEGUP_F_main_BB_preheaderi3_9;
LEGUP_F_main_BB_preheaderi3_9:
		next_state = LEGUP_F_main_BB_preheaderi3_10;
LEGUP_F_main_BB_preheaderi5_213:
		next_state = LEGUP_F_main_BB_preheaderi5_214;
LEGUP_F_main_BB_preheaderi5_214:
		next_state = LEGUP_F_main_BB_preheaderi5_215;
LEGUP_F_main_BB_preheaderi5_215:
	if ((main_preheaderi5_146 == 1'd1))
		next_state = LEGUP_F_main_BB__147_216;
	else if ((main_preheaderi5_146 == 1'd0))
		next_state = LEGUP_F_main_BB__162_230;
LEGUP_F_main_BB_preheaderi5preheader_212:
		next_state = LEGUP_F_main_BB_preheaderi5_213;
LEGUP_F_main_BB_preheaderi_53:
		next_state = LEGUP_F_main_BB_preheaderi_54;
LEGUP_F_main_BB_preheaderi_54:
		next_state = LEGUP_F_main_BB__8_55;
LEGUP_F_main_BB_preheaderipreheader_52:
		next_state = LEGUP_F_main_BB_preheaderi_53;
LEGUP_F_main_BB_ufind_join_groupsexiti_181:
		next_state = LEGUP_F_main_BB_ufind_join_groupsexiti_182;
LEGUP_F_main_BB_ufind_join_groupsexiti_182:
		next_state = LEGUP_F_main_BB_ufind_join_groupsexiti_183;
LEGUP_F_main_BB_ufind_join_groupsexiti_183:
		next_state = LEGUP_F_main_BB_ufind_join_groupsexiti_184;
LEGUP_F_main_BB_ufind_join_groupsexiti_184:
		next_state = LEGUP_F_main_BB_backedgei10_185;
LEGUP_function_call_240:
	if ((is_bridge_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__175_241;
LEGUP_function_call_248:
	if ((is_bridge_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__186_249;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %i.03.i1 = phi i32 [ 0, %0 ], [ %3, %.preheader.i3 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi3_i03i1 = 32'd0;
	end
	/* main: %.preheader.i3*/
	/*   %i.03.i1 = phi i32 [ 0, %0 ], [ %3, %.preheader.i3 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi3_15) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi3_exitcond61_reg == 1'd0))) */ begin
		main_preheaderi3_i03i1 = main_preheaderi3_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %i.03.i1 = phi i32 [ 0, %0 ], [ %3, %.preheader.i3 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi3_i03i1_reg <= main_preheaderi3_i03i1;
		if (start == 1'b0 && ^(main_preheaderi3_i03i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_i03i1_reg"); $finish; end
	end
	/* main: %.preheader.i3*/
	/*   %i.03.i1 = phi i32 [ 0, %0 ], [ %3, %.preheader.i3 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi3_15) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi3_exitcond61_reg == 1'd0))) begin
		main_preheaderi3_i03i1_reg <= main_preheaderi3_i03i1;
		if (start == 1'b0 && ^(main_preheaderi3_i03i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_i03i1_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi3_2 = main_preheaderi3_2_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep62 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 %2*/
		main_preheaderi3_scevgep62 = (`TAG_g_adj_matrix_a + (4 * main_preheaderi3_2));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep62 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		main_preheaderi3_scevgep62_reg <= main_preheaderi3_scevgep62;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep63 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 23*/
		main_preheaderi3_scevgep63 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd23)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep63 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 23*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep63_reg <= main_preheaderi3_scevgep63;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep64 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 22*/
		main_preheaderi3_scevgep64 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd22)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep64 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 22*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep64_reg <= main_preheaderi3_scevgep64;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep65 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 21*/
		main_preheaderi3_scevgep65 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd21)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep65 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 21*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep65_reg <= main_preheaderi3_scevgep65;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep66 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 20*/
		main_preheaderi3_scevgep66 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd20)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep66 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 20*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep66_reg <= main_preheaderi3_scevgep66;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep67 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 19*/
		main_preheaderi3_scevgep67 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd19)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep67 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 19*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep67_reg <= main_preheaderi3_scevgep67;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep68 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 18*/
		main_preheaderi3_scevgep68 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd18)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep68 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 18*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep68_reg <= main_preheaderi3_scevgep68;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep69 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 17*/
		main_preheaderi3_scevgep69 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd17)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep69 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 17*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep69_reg <= main_preheaderi3_scevgep69;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep70 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 16*/
		main_preheaderi3_scevgep70 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd16)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep70 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep70_reg <= main_preheaderi3_scevgep70;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep71 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 15*/
		main_preheaderi3_scevgep71 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd15)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep71 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep71_reg <= main_preheaderi3_scevgep71;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep72 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 14*/
		main_preheaderi3_scevgep72 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd14)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep72 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep72_reg <= main_preheaderi3_scevgep72;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep73 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 13*/
		main_preheaderi3_scevgep73 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd13)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep73 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 13*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep73_reg <= main_preheaderi3_scevgep73;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep74 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 12*/
		main_preheaderi3_scevgep74 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd12)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep74 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep74_reg <= main_preheaderi3_scevgep74;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep75 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 11*/
		main_preheaderi3_scevgep75 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd11)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep75 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep75_reg <= main_preheaderi3_scevgep75;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep76 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 10*/
		main_preheaderi3_scevgep76 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd10)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep76 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 10*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep76_reg <= main_preheaderi3_scevgep76;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep77 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 9*/
		main_preheaderi3_scevgep77 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd9)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep77 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 9*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep77_reg <= main_preheaderi3_scevgep77;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep78 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 8*/
		main_preheaderi3_scevgep78 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd8)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep78 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep78_reg <= main_preheaderi3_scevgep78;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep79 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 7*/
		main_preheaderi3_scevgep79 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd7)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep79 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep79_reg <= main_preheaderi3_scevgep79;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep80 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 6*/
		main_preheaderi3_scevgep80 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd6)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep80 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep80_reg <= main_preheaderi3_scevgep80;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep81 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 5*/
		main_preheaderi3_scevgep81 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd5)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep81 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep81_reg <= main_preheaderi3_scevgep81;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep82 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 4*/
		main_preheaderi3_scevgep82 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd4)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep82 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep82_reg <= main_preheaderi3_scevgep82;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep83 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 3*/
		main_preheaderi3_scevgep83 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd3)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep83 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep83_reg <= main_preheaderi3_scevgep83;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep84 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 2*/
		main_preheaderi3_scevgep84 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd2)));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %scevgep84 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_scevgep84_reg <= main_preheaderi3_scevgep84;
		if (start == 1'b0 && ^(main_preheaderi3_scevgep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_scevgep84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep85 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 1*/
		main_preheaderi3_scevgep85 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi3_i03i1_reg) + (4 * 32'd1)));
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %scevgep86 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i1, i32 0*/
		main_preheaderi3_scevgep86 = (`TAG_g_adj_matrix_a + (96 * main_preheaderi3_i03i1_reg));
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %3 = add nsw i32 %i.03.i1, 1*/
		main_preheaderi3_3 = (main_preheaderi3_i03i1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %3 = add nsw i32 %i.03.i1, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_3_reg <= main_preheaderi3_3;
		if (start == 1'b0 && ^(main_preheaderi3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i3*/
	/*   %exitcond61 = icmp eq i32 %3, 24*/
		main_preheaderi3_exitcond61 = (main_preheaderi3_3 == 32'd24);
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %exitcond61 = icmp eq i32 %3, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		main_preheaderi3_exitcond61_reg <= main_preheaderi3_exitcond61;
		if (start == 1'b0 && ^(main_preheaderi3_exitcond61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi3_exitcond61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %4 ], [ 0, %init_adj.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_init_adjexit_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar57 = 32'd0;
	end
	/* main: %4*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %4 ], [ 0, %init_adj.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__4_51) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond59_reg == 1'd0))) */ begin
		main_4_indvar57 = main_4_indvarnext58_reg;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %4 ], [ 0, %init_adj.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_init_adjexit_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar57_reg <= main_4_indvar57;
		if (start == 1'b0 && ^(main_4_indvar57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar57_reg"); $finish; end
	end
	/* main: %4*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %4 ], [ 0, %init_adj.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__4_51) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond59_reg == 1'd0))) begin
		main_4_indvar57_reg <= main_4_indvar57;
		if (start == 1'b0 && ^(main_4_indvar57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = add i32 %indvar57, 1*/
		main_4_5 = (main_4_indvar57_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = add i32 %indvar57, 1*/
	if ((cur_state == LEGUP_F_main_BB__4_49)) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep60 = getelementptr [577 x %struct.edge*]* @heap, i32 0, i32 %5*/
		main_4_scevgep60 = (`TAG_g_heap_a + (4 * main_4_5_reg));
end
always @(*) begin
	/* main: %4*/
	/*   %indvar.next58 = add i32 %indvar57, 1*/
		main_4_indvarnext58 = (main_4_indvar57_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar.next58 = add i32 %indvar57, 1*/
	if ((cur_state == LEGUP_F_main_BB__4_49)) begin
		main_4_indvarnext58_reg <= main_4_indvarnext58;
		if (start == 1'b0 && ^(main_4_indvarnext58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvarnext58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %exitcond59 = icmp eq i32 %indvar.next58, 576*/
		main_4_exitcond59 = (main_4_indvarnext58 == 32'd576);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %exitcond59 = icmp eq i32 %indvar.next58, 576*/
	if ((cur_state == LEGUP_F_main_BB__4_49)) begin
		main_4_exitcond59_reg <= main_4_exitcond59;
		if (start == 1'b0 && ^(main_4_exitcond59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_exitcond59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %15, %14 ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i03i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %15, %14 ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__14_59) & (memory_controller_waitrequest == 1'd0)) & (main_14_exitcond50 == 1'd0))) */ begin
		main_preheaderi_i03i = main_14_15;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %15, %14 ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i03i_reg <= main_preheaderi_i03i;
		if (start == 1'b0 && ^(main_preheaderi_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i03i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %15, %14 ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__14_59) & (memory_controller_waitrequest == 1'd0)) & (main_14_exitcond50 == 1'd0))) begin
		main_preheaderi_i03i_reg <= main_preheaderi_i03i;
		if (start == 1'b0 && ^(main_preheaderi_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %6 = trunc i32 %i.03.i to i16*/
		main_preheaderi_6 = main_preheaderi_i03i_reg[15:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %6 = trunc i32 %i.03.i to i16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_53)) begin
		main_preheaderi_6_reg <= main_preheaderi_6;
		if (start == 1'b0 && ^(main_preheaderi_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_6_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_7 = main_preheaderi_7_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %7 = mul i32 %i.03.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_7_reg <= main_preheaderi_7;
		if (start == 1'b0 && ^(main_preheaderi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %7 = mul i32 %i.03.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_7_reg <= main_preheaderi_7;
		if (start == 1'b0 && ^(main_preheaderi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %j.01.i4 = phi i32 [ 0, %.preheader.i ], [ %13, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_j01i4 = 32'd0;
	end
	/* main: %8*/
	/*   %j.01.i4 = phi i32 [ 0, %.preheader.i ], [ %13, %8 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__8_58) & (memory_controller_waitrequest == 1'd0)) & (main_8_exitcond43_reg == 1'd0))) */ begin
		main_8_j01i4 = main_8_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %j.01.i4 = phi i32 [ 0, %.preheader.i ], [ %13, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_j01i4_reg <= main_8_j01i4;
		if (start == 1'b0 && ^(main_8_j01i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_j01i4_reg"); $finish; end
	end
	/* main: %8*/
	/*   %j.01.i4 = phi i32 [ 0, %.preheader.i ], [ %13, %8 ]*/
	if ((((cur_state == LEGUP_F_main_BB__8_58) & (memory_controller_waitrequest == 1'd0)) & (main_8_exitcond43_reg == 1'd0))) begin
		main_8_j01i4_reg <= main_8_j01i4;
		if (start == 1'b0 && ^(main_8_j01i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_j01i4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep49 = getelementptr [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %i.03.i, i32 %j.01.i4*/
		main_8_scevgep49 = (`TAG_g_adj_matrix_a + ((96 * main_preheaderi_i03i_reg) + (4 * main_8_j01i4_reg)));
end
always @(*) begin
	/* main: %8*/
	/*   %9 = add i32 %7, %j.01.i4*/
		main_8_9 = (main_preheaderi_7_reg + main_8_j01i4_reg);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %9 = add i32 %7, %j.01.i4*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		main_8_9_reg <= main_8_9;
		if (start == 1'b0 && ^(main_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep4748 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 0*/
		main_8_scevgep4748 = (`TAG_g_edges_a + (8 * main_8_9_reg));
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep46 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 1*/
		main_8_scevgep46 = (`TAG_g_edges_a + ((8 * main_8_9_reg) + 2));
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep45 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 2*/
		main_8_scevgep45 = (`TAG_g_edges_a + ((8 * main_8_9_reg) + 4));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %scevgep45 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		main_8_scevgep45_reg <= main_8_scevgep45;
		if (start == 1'b0 && ^(main_8_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_scevgep45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep44 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 3*/
		main_8_scevgep44 = (`TAG_g_edges_a + ((8 * main_8_9_reg) + 6));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %scevgep44 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %9, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		main_8_scevgep44_reg <= main_8_scevgep44;
		if (start == 1'b0 && ^(main_8_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %10 = trunc i32 %j.01.i4 to i16*/
		main_8_10 = main_8_j01i4_reg[15:0];
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %10 = trunc i32 %j.01.i4 to i16*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		main_8_10_reg <= main_8_10;
		if (start == 1'b0 && ^(main_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %11 = load i32* %scevgep49, align 4, !tbaa !1*/
		main_8_11 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %8*/
	/*   %12 = trunc i32 %11 to i16*/
		main_8_12 = main_8_11[15:0];
end
always @(*) begin
	/* main: %8*/
	/*   %13 = add nsw i32 %j.01.i4, 1*/
		main_8_13 = (main_8_j01i4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %13 = add nsw i32 %j.01.i4, 1*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		main_8_13_reg <= main_8_13;
		if (start == 1'b0 && ^(main_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %exitcond43 = icmp eq i32 %13, 24*/
		main_8_exitcond43 = (main_8_13 == 32'd24);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %exitcond43 = icmp eq i32 %13, 24*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		main_8_exitcond43_reg <= main_8_exitcond43;
		if (start == 1'b0 && ^(main_8_exitcond43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_exitcond43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %15 = add nsw i32 %i.03.i, 1*/
		main_14_15 = (main_preheaderi_i03i_reg + 32'd1);
end
always @(*) begin
	/* main: %14*/
	/*   %exitcond50 = icmp eq i32 %15, 24*/
		main_14_exitcond50 = (main_14_15 == 32'd24);
end
always @(*) begin
	/* main: %18*/
	/*   %heap_size.0 = phi i32 [ 0, %init_edges.exit ], [ %heap_size.1, %insert.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_init_edgesexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_heap_size0 = 32'd0;
	end
	/* main: %18*/
	/*   %heap_size.0 = phi i32 [ 0, %init_edges.exit ], [ %heap_size.1, %insert.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_insertexiti_145) & (memory_controller_waitrequest == 1'd0)) & (main_insertexiti_exitcond40 == 1'd0))) */ begin
		main_18_heap_size0 = main_insertexiti_heap_size1_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %heap_size.0 = phi i32 [ 0, %init_edges.exit ], [ %heap_size.1, %insert.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_init_edgesexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_heap_size0_reg <= main_18_heap_size0;
		if (start == 1'b0 && ^(main_18_heap_size0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_heap_size0_reg"); $finish; end
	end
	/* main: %18*/
	/*   %heap_size.0 = phi i32 [ 0, %init_edges.exit ], [ %heap_size.1, %insert.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_insertexiti_145) & (memory_controller_waitrequest == 1'd0)) & (main_insertexiti_exitcond40 == 1'd0))) begin
		main_18_heap_size0_reg <= main_18_heap_size0;
		if (start == 1'b0 && ^(main_18_heap_size0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_heap_size0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %i.03.i8 = phi i32 [ 0, %init_edges.exit ], [ %47, %insert.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_init_edgesexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_i03i8 = 32'd0;
	end
	/* main: %18*/
	/*   %i.03.i8 = phi i32 [ 0, %init_edges.exit ], [ %47, %insert.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_insertexiti_145) & (memory_controller_waitrequest == 1'd0)) & (main_insertexiti_exitcond40 == 1'd0))) */ begin
		main_18_i03i8 = main_insertexiti_47;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %i.03.i8 = phi i32 [ 0, %init_edges.exit ], [ %47, %insert.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_init_edgesexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_i03i8_reg <= main_18_i03i8;
		if (start == 1'b0 && ^(main_18_i03i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_i03i8_reg"); $finish; end
	end
	/* main: %18*/
	/*   %i.03.i8 = phi i32 [ 0, %init_edges.exit ], [ %47, %insert.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_insertexiti_145) & (memory_controller_waitrequest == 1'd0)) & (main_insertexiti_exitcond40 == 1'd0))) begin
		main_18_i03i8_reg <= main_18_i03i8;
		if (start == 1'b0 && ^(main_18_i03i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_i03i8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %scevgep41 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %i.03.i8, i32 2*/
		main_18_scevgep41 = (`TAG_g_edges_a + ((8 * main_18_i03i8_reg) + 4));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %scevgep41 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %i.03.i8, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__18_61)) begin
		main_18_scevgep41_reg <= main_18_scevgep41;
		if (start == 1'b0 && ^(main_18_scevgep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_scevgep41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %scevgep42 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %i.03.i8*/
		main_18_scevgep42 = (`TAG_g_edges_a + (8 * main_18_i03i8_reg));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %scevgep42 = getelementptr [576 x %struct.edge]* @edges, i32 0, i32 %i.03.i8*/
	if ((cur_state == LEGUP_F_main_BB__18_61)) begin
		main_18_scevgep42_reg <= main_18_scevgep42;
		if (start == 1'b0 && ^(main_18_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_scevgep42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = icmp eq i32 %heap_size.0, 576*/
		main_18_19 = (main_18_heap_size0_reg == 32'd576);
end
always @(*) begin
	/* main: %22*/
	/*   %23 = add nsw i32 %heap_size.0, 1*/
		main_22_23 = (main_18_heap_size0_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = add nsw i32 %heap_size.0, 1*/
	if ((cur_state == LEGUP_F_main_BB__22_63)) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %24 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %23*/
		main_22_24 = (`TAG_g_heap_a + (4 * main_22_23_reg));
end
always @(*) begin
	/* main: %22*/
	/*   %25 = icmp sgt i32 %heap_size.0, 0*/
		main_22_25 = ($signed(main_18_heap_size0_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %25 = icmp sgt i32 %heap_size.0, 0*/
	if ((cur_state == LEGUP_F_main_BB__22_63)) begin
		main_22_25_reg <= main_22_25;
		if (start == 1'b0 && ^(main_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_25_reg"); $finish; end
	end
end
always @(*) begin
	main_lrphipreheaderi_26 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %26 = sdiv i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		main_lrphipreheaderi_26_reg <= main_lrphipreheaderi_26;
		if (start == 1'b0 && ^(main_lrphipreheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheaderi_26_reg"); $finish; end
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %26 = sdiv i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		main_lrphipreheaderi_26_reg <= main_lrphipreheaderi_26;
		if (start == 1'b0 && ^(main_lrphipreheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheaderi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %27 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %26*/
		main_lrphipreheaderi_27 = (`TAG_g_heap_a + (4 * main_lrphipreheaderi_26));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %27 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		main_lrphipreheaderi_27_reg <= main_lrphipreheaderi_27;
		if (start == 1'b0 && ^(main_lrphipreheaderi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheaderi_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
		main_lrphipreheaderi_28 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_100)) begin
		main_lrphipreheaderi_28_reg <= main_lrphipreheaderi_28;
		if (start == 1'b0 && ^(main_lrphipreheaderi_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheaderi_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %29 = getelementptr inbounds %struct.edge* %28, i32 0, i32 2*/
		main_lrphipreheaderi_29 = (main_lrphipreheaderi_28 + 4);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %30 = load i16* %29, align 2, !tbaa !11*/
		main_lrphipreheaderi_30 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
		main_lrphipreheaderi_31 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_68)) begin
		main_lrphipreheaderi_31_reg <= main_lrphipreheaderi_31;
		if (start == 1'b0 && ^(main_lrphipreheaderi_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheaderi_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %32 = icmp sgt i16 %30, %31*/
		main_lrphipreheaderi_32 = ($signed(main_lrphipreheaderi_30) > $signed(main_lrphipreheaderi_31_reg));
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %33 = phi %struct.edge* [ %41, %._crit_edge.i.i ], [ %28, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_33 = main_lrphipreheaderi_28_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   %33 = phi %struct.edge* [ %41, %._crit_edge.i.i ], [ %28, %.lr.ph2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) */ begin
		main_lrph2i_33 = main__crit_edgeii_41_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %33 = phi %struct.edge* [ %41, %._crit_edge.i.i ], [ %28, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_33_reg <= main_lrph2i_33;
		if (start == 1'b0 && ^(main_lrph2i_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_33_reg"); $finish; end
	end
	/* main: %.lr.ph2.i*/
	/*   %33 = phi %struct.edge* [ %41, %._crit_edge.i.i ], [ %28, %.lr.ph2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) begin
		main_lrph2i_33_reg <= main_lrph2i_33;
		if (start == 1'b0 && ^(main_lrph2i_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %34 = phi %struct.edge** [ %40, %._crit_edge.i.i ], [ %27, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_34 = main_lrphipreheaderi_27_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   %34 = phi %struct.edge** [ %40, %._crit_edge.i.i ], [ %27, %.lr.ph2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) */ begin
		main_lrph2i_34 = main__crit_edgeii_40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %34 = phi %struct.edge** [ %40, %._crit_edge.i.i ], [ %27, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_34_reg <= main_lrph2i_34;
		if (start == 1'b0 && ^(main_lrph2i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_34_reg"); $finish; end
	end
	/* main: %.lr.ph2.i*/
	/*   %34 = phi %struct.edge** [ %40, %._crit_edge.i.i ], [ %27, %.lr.ph2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) begin
		main_lrph2i_34_reg <= main_lrph2i_34;
		if (start == 1'b0 && ^(main_lrph2i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %35 = phi i32 [ %39, %._crit_edge.i.i ], [ %26, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_35 = main_lrphipreheaderi_26_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   %35 = phi i32 [ %39, %._crit_edge.i.i ], [ %26, %.lr.ph2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) */ begin
		main_lrph2i_35 = main__crit_edgeii_39_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %35 = phi i32 [ %39, %._crit_edge.i.i ], [ %26, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_35_reg <= main_lrph2i_35;
		if (start == 1'b0 && ^(main_lrph2i_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_35_reg"); $finish; end
	end
	/* main: %.lr.ph2.i*/
	/*   %35 = phi i32 [ %39, %._crit_edge.i.i ], [ %26, %.lr.ph2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) begin
		main_lrph2i_35_reg <= main_lrph2i_35;
		if (start == 1'b0 && ^(main_lrph2i_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %p.01.i1.i = phi i32 [ %35, %._crit_edge.i.i ], [ %23, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_p01i1i = main_22_23_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   %p.01.i1.i = phi i32 [ %35, %._crit_edge.i.i ], [ %23, %.lr.ph2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) */ begin
		main_lrph2i_p01i1i = main_lrph2i_35_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %p.01.i1.i = phi i32 [ %35, %._crit_edge.i.i ], [ %23, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_p01i1i_reg <= main_lrph2i_p01i1i;
		if (start == 1'b0 && ^(main_lrph2i_p01i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_p01i1i_reg"); $finish; end
	end
	/* main: %.lr.ph2.i*/
	/*   %p.01.i1.i = phi i32 [ %35, %._crit_edge.i.i ], [ %23, %.lr.ph2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) begin
		main_lrph2i_p01i1i_reg <= main_lrph2i_p01i1i;
		if (start == 1'b0 && ^(main_lrph2i_p01i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_p01i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %36 = phi %struct.edge* [ %.pre.i.i, %._crit_edge.i.i ], [ %scevgep42, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_36 = main_18_scevgep42_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   %36 = phi %struct.edge* [ %.pre.i.i, %._crit_edge.i.i ], [ %scevgep42, %.lr.ph2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) */ begin
		main_lrph2i_36 = main__crit_edgeii_preii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %36 = phi %struct.edge* [ %.pre.i.i, %._crit_edge.i.i ], [ %scevgep42, %.lr.ph2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph2ipreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph2i_36_reg <= main_lrph2i_36;
		if (start == 1'b0 && ^(main_lrph2i_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_36_reg"); $finish; end
	end
	/* main: %.lr.ph2.i*/
	/*   %36 = phi %struct.edge* [ %.pre.i.i, %._crit_edge.i.i ], [ %scevgep42, %.lr.ph2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_143) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_46 == 1'd1))) begin
		main_lrph2i_36_reg <= main_lrph2i_36;
		if (start == 1'b0 && ^(main_lrph2i_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %37 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %p.01.i1.i*/
		main_lrph2i_37 = (`TAG_g_heap_a + (4 * main_lrph2i_p01i1i_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %37 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %p.01.i1.i*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		main_lrph2i_37_reg <= main_lrph2i_37;
		if (start == 1'b0 && ^(main_lrph2i_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph2.i*/
	/*   %38 = icmp sgt i32 %p.01.i1.i, 3*/
		main_lrph2i_38 = ($signed(main_lrph2i_p01i1i_reg) > $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %.lr.ph2.i*/
	/*   %38 = icmp sgt i32 %p.01.i1.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		main_lrph2i_38_reg <= main_lrph2i_38;
		if (start == 1'b0 && ^(main_lrph2i_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph2i_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
		main__crit_edgeii_preii = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_109)) begin
		main__crit_edgeii_preii_reg <= main__crit_edgeii_preii;
		if (start == 1'b0 && ^(main__crit_edgeii_preii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_preii_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edgeii_39 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %39 = sdiv i32 %35, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		main__crit_edgeii_39_reg <= main__crit_edgeii_39;
		if (start == 1'b0 && ^(main__crit_edgeii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_39_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %39 = sdiv i32 %35, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		main__crit_edgeii_39_reg <= main__crit_edgeii_39;
		if (start == 1'b0 && ^(main__crit_edgeii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %40 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %39*/
		main__crit_edgeii_40 = (`TAG_g_heap_a + (4 * main__crit_edgeii_39));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %40 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		main__crit_edgeii_40_reg <= main__crit_edgeii_40;
		if (start == 1'b0 && ^(main__crit_edgeii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
		main__crit_edgeii_41 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_141)) begin
		main__crit_edgeii_41_reg <= main__crit_edgeii_41;
		if (start == 1'b0 && ^(main__crit_edgeii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %42 = getelementptr inbounds %struct.edge* %41, i32 0, i32 2*/
		main__crit_edgeii_42 = (main__crit_edgeii_41 + 4);
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %43 = load i16* %42, align 2, !tbaa !11*/
		main__crit_edgeii_43 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %44 = getelementptr inbounds %struct.edge* %.pre.i.i, i32 0, i32 2*/
		main__crit_edgeii_44 = (main__crit_edgeii_preii + 4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %44 = getelementptr inbounds %struct.edge* %.pre.i.i, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_109)) begin
		main__crit_edgeii_44_reg <= main__crit_edgeii_44;
		if (start == 1'b0 && ^(main__crit_edgeii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
		main__crit_edgeii_45 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_142)) begin
		main__crit_edgeii_45_reg <= main__crit_edgeii_45;
		if (start == 1'b0 && ^(main__crit_edgeii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %46 = icmp sgt i16 %43, %45*/
		main__crit_edgeii_46 = ($signed(main__crit_edgeii_43) > $signed(main__crit_edgeii_45_reg));
end
always @(*) begin
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__20_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_insertexiti_heap_size1 = 32'd576;
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22_65) & (memory_controller_waitrequest == 1'd0)) & (main_22_25_reg == 1'd0))) begin
		main_insertexiti_heap_size1 = main_22_23_reg;
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	else if ((((cur_state == LEGUP_F_main_BB_lrphipreheaderi_102) & (memory_controller_waitrequest == 1'd0)) & (main_lrphipreheaderi_32 == 1'd0))) begin
		main_insertexiti_heap_size1 = main_22_23_reg;
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_insertexitiloopexit_144) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_insertexiti_heap_size1 = main_22_23_reg;
	end
end
always @(posedge clk) begin
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__20_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_insertexiti_heap_size1_reg <= main_insertexiti_heap_size1;
		if (start == 1'b0 && ^(main_insertexiti_heap_size1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_insertexiti_heap_size1_reg"); $finish; end
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__22_65) & (memory_controller_waitrequest == 1'd0)) & (main_22_25_reg == 1'd0))) begin
		main_insertexiti_heap_size1_reg <= main_insertexiti_heap_size1;
		if (start == 1'b0 && ^(main_insertexiti_heap_size1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_insertexiti_heap_size1_reg"); $finish; end
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphipreheaderi_102) & (memory_controller_waitrequest == 1'd0)) & (main_lrphipreheaderi_32 == 1'd0))) begin
		main_insertexiti_heap_size1_reg <= main_insertexiti_heap_size1;
		if (start == 1'b0 && ^(main_insertexiti_heap_size1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_insertexiti_heap_size1_reg"); $finish; end
	end
	/* main: %insert.exit.i*/
	/*   %heap_size.1 = phi i32 [ 576, %20 ], [ %23, %.lr.ph.i.preheader.i ], [ %23, %22 ], [ %23, %insert.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_insertexitiloopexit_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_insertexiti_heap_size1_reg <= main_insertexiti_heap_size1;
		if (start == 1'b0 && ^(main_insertexiti_heap_size1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_insertexiti_heap_size1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %insert.exit.i*/
	/*   %47 = add nsw i32 %i.03.i8, 1*/
		main_insertexiti_47 = (main_18_i03i8_reg + 32'd1);
end
always @(*) begin
	/* main: %insert.exit.i*/
	/*   %exitcond40 = icmp eq i32 %47, 576*/
		main_insertexiti_exitcond40 = (main_insertexiti_47 == 32'd576);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %48 = add i32 %heap_size.1, -1*/
		main_lrphipreheader_48 = (main_insertexiti_heap_size1_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %48 = add i32 %heap_size.1, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_146)) begin
		main_lrphipreheader_48_reg <= main_lrphipreheader_48;
		if (start == 1'b0 && ^(main_lrphipreheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %indvar37 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next38, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_indvar37 = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %indvar37 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next38, %.backedge.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) */ begin
		main_lrphi_indvar37 = main_backedgei10_indvarnext38;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %indvar37 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next38, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_indvar37_reg <= main_lrphi_indvar37;
		if (start == 1'b0 && ^(main_lrphi_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_indvar37_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %indvar37 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next38, %.backedge.i10 ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) begin
		main_lrphi_indvar37_reg <= main_lrphi_indvar37;
		if (start == 1'b0 && ^(main_lrphi_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_indvar37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %mst_num_edges.0 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %mst_num_edges.1, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_mst_num_edges0 = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %mst_num_edges.0 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %mst_num_edges.1, %.backedge.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) */ begin
		main_lrphi_mst_num_edges0 = main_backedgei10_mst_num_edges1_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %mst_num_edges.0 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %mst_num_edges.1, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_mst_num_edges0_reg <= main_lrphi_mst_num_edges0;
		if (start == 1'b0 && ^(main_lrphi_mst_num_edges0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_mst_num_edges0_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %mst_num_edges.0 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %mst_num_edges.1, %.backedge.i10 ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) begin
		main_lrphi_mst_num_edges0_reg <= main_lrphi_mst_num_edges0;
		if (start == 1'b0 && ^(main_lrphi_mst_num_edges0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_mst_num_edges0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %49 = phi i32 [ 24, %.lr.ph.i.preheader ], [ %106, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_49 = 32'd24;
	end
	/* main: %.lr.ph.i*/
	/*   %49 = phi i32 [ 24, %.lr.ph.i.preheader ], [ %106, %.backedge.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) */ begin
		main_lrphi_49 = main_backedgei10_106_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %49 = phi i32 [ 24, %.lr.ph.i.preheader ], [ %106, %.backedge.i10 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_49_reg <= main_lrphi_49;
		if (start == 1'b0 && ^(main_lrphi_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_49_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %49 = phi i32 [ 24, %.lr.ph.i.preheader ], [ %106, %.backedge.i10 ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedgei10_185) & (memory_controller_waitrequest == 1'd0)) & (main_backedgei10_107 == 1'd1))) begin
		main_lrphi_49_reg <= main_lrphi_49;
		if (start == 1'b0 && ^(main_lrphi_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %50 = sub i32 %heap_size.1, %indvar37*/
		main_lrphi_50 = (main_insertexiti_heap_size1_reg - main_lrphi_indvar37_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %50 = sub i32 %heap_size.1, %indvar37*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		main_lrphi_50_reg <= main_lrphi_50;
		if (start == 1'b0 && ^(main_lrphi_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %51 = sub i32 %48, %indvar37*/
		main_lrphi_51 = (main_lrphipreheader_48_reg - main_lrphi_indvar37_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %51 = sub i32 %48, %indvar37*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		main_lrphi_51_reg <= main_lrphi_51;
		if (start == 1'b0 && ^(main_lrphi_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep39 = getelementptr [577 x %struct.edge*]* @heap, i32 0, i32 %50*/
		main_lrphi_scevgep39 = (`TAG_g_heap_a + (4 * main_lrphi_50_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep39 = getelementptr [577 x %struct.edge*]* @heap, i32 0, i32 %50*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_148)) begin
		main_lrphi_scevgep39_reg <= main_lrphi_scevgep39;
		if (start == 1'b0 && ^(main_lrphi_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_scevgep39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
		main_lrphi_52 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_149)) begin
		main_lrphi_52_reg <= main_lrphi_52;
		if (start == 1'b0 && ^(main_lrphi_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %53 = load %struct.edge** %scevgep39, align 4, !tbaa !5*/
		main_lrphi_53 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %54 = icmp slt i32 %50, 3*/
		main_lrphi_54 = ($signed(main_lrphi_50) < $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %54 = icmp slt i32 %50, 3*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		main_lrphi_54_reg <= main_lrphi_54;
		if (start == 1'b0 && ^(main_lrphi_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %filho.02.i.i.i = phi i32 [ %78, %77 ], [ 2, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_filho02iii = 32'd2;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %filho.02.i.i.i = phi i32 [ %78, %77 ], [ 2, %.lr.ph.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__77_167) & (memory_controller_waitrequest == 1'd0)) & (main_77_79_reg == 1'd0))) */ begin
		main_lrphiii_filho02iii = main_77_78_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %filho.02.i.i.i = phi i32 [ %78, %77 ], [ 2, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_filho02iii_reg <= main_lrphiii_filho02iii;
		if (start == 1'b0 && ^(main_lrphiii_filho02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_filho02iii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %filho.02.i.i.i = phi i32 [ %78, %77 ], [ 2, %.lr.ph.i.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__77_167) & (memory_controller_waitrequest == 1'd0)) & (main_77_79_reg == 1'd0))) begin
		main_lrphiii_filho02iii_reg <= main_lrphiii_filho02iii;
		if (start == 1'b0 && ^(main_lrphiii_filho02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_filho02iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %pai.01.i.i.i = phi i32 [ %filho.1.i.i.i, %77 ], [ 1, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_pai01iii = 32'd1;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %pai.01.i.i.i = phi i32 [ %filho.1.i.i.i, %77 ], [ 1, %.lr.ph.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__77_167) & (memory_controller_waitrequest == 1'd0)) & (main_77_79_reg == 1'd0))) */ begin
		main_lrphiii_pai01iii = main_67_filho1iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %pai.01.i.i.i = phi i32 [ %filho.1.i.i.i, %77 ], [ 1, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_pai01iii_reg <= main_lrphiii_pai01iii;
		if (start == 1'b0 && ^(main_lrphiii_pai01iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_pai01iii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %pai.01.i.i.i = phi i32 [ %filho.1.i.i.i, %77 ], [ 1, %.lr.ph.i.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__77_167) & (memory_controller_waitrequest == 1'd0)) & (main_77_79_reg == 1'd0))) begin
		main_lrphiii_pai01iii_reg <= main_lrphiii_pai01iii;
		if (start == 1'b0 && ^(main_lrphiii_pai01iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_pai01iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %55 = icmp slt i32 %filho.02.i.i.i, %51*/
		main_lrphiii_55 = ($signed(main_lrphiii_filho02iii_reg) < $signed(main_lrphi_51_reg));
end
always @(*) begin
	/* main: %56*/
	/*   %57 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %filho.02.i.i.i*/
		main_56_57 = (`TAG_g_heap_a + (4 * main_lrphiii_filho02iii_reg));
end
always @(*) begin
	/* main: %56*/
	/*   %58 = load %struct.edge** %57, align 4, !tbaa !5*/
		main_56_58 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* main: %56*/
	/*   %59 = getelementptr inbounds %struct.edge* %58, i32 0, i32 2*/
		main_56_59 = (main_56_58 + 4);
end
always @(*) begin
	/* main: %56*/
	/*   %60 = load i16* %59, align 2, !tbaa !11*/
		main_56_60 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %56*/
	/*   %61 = or i32 %filho.02.i.i.i, 1*/
		main_56_61 = (main_lrphiii_filho02iii_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %61 = or i32 %filho.02.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		main_56_61_reg <= main_56_61;
		if (start == 1'b0 && ^(main_56_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %62 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %61*/
		main_56_62 = (`TAG_g_heap_a + (4 * main_56_61));
end
always @(*) begin
	/* main: %56*/
	/*   %63 = load %struct.edge** %62, align 4, !tbaa !5*/
		main_56_63 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* main: %56*/
	/*   %64 = getelementptr inbounds %struct.edge* %63, i32 0, i32 2*/
		main_56_64 = (main_56_63 + 4);
end
always @(*) begin
	/* main: %56*/
	/*   %65 = load i16* %64, align 2, !tbaa !11*/
		main_56_65 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %56*/
	/*   %66 = icmp sgt i16 %60, %65*/
		main_56_66 = ($signed(main_56_60) > $signed(main_56_65));
end
always @(*) begin
	/* main: %56*/
	/*   %.filho.0.i.i.i = select i1 %66, i32 %61, i32 %filho.02.i.i.i*/
		main_56_filho0iii = (main_56_66 ? main_56_61_reg : main_lrphiii_filho02iii_reg);
end
always @(*) begin
	/* main: %67*/
	/*   %filho.1.i.i.i = phi i32 [ %filho.02.i.i.i, %.lr.ph.i.i.i ], [ %.filho.0.i.i.i, %56 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiii_154) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_55 == 1'd0))) begin
		main_67_filho1iii = main_lrphiii_filho02iii_reg;
	end
	/* main: %67*/
	/*   %filho.1.i.i.i = phi i32 [ %filho.02.i.i.i, %.lr.ph.i.i.i ], [ %.filho.0.i.i.i, %56 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__56_159) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_67_filho1iii = main_56_filho0iii;
	end
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %filho.1.i.i.i = phi i32 [ %filho.02.i.i.i, %.lr.ph.i.i.i ], [ %.filho.0.i.i.i, %56 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiii_154) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_55 == 1'd0))) begin
		main_67_filho1iii_reg <= main_67_filho1iii;
		if (start == 1'b0 && ^(main_67_filho1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_filho1iii_reg"); $finish; end
	end
	/* main: %67*/
	/*   %filho.1.i.i.i = phi i32 [ %filho.02.i.i.i, %.lr.ph.i.i.i ], [ %.filho.0.i.i.i, %56 ]*/
	if (((cur_state == LEGUP_F_main_BB__56_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_67_filho1iii_reg <= main_67_filho1iii;
		if (start == 1'b0 && ^(main_67_filho1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_filho1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %filho.1.i.i.i*/
		main_67_68 = (`TAG_g_heap_a + (4 * main_67_filho1iii_reg));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %filho.1.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
		main_67_69 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		main_67_69_reg <= main_67_69;
		if (start == 1'b0 && ^(main_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %70 = getelementptr inbounds %struct.edge* %69, i32 0, i32 2*/
		main_67_70 = (main_67_69 + 4);
end
always @(*) begin
	/* main: %67*/
	/*   %71 = load i16* %70, align 2, !tbaa !11*/
		main_67_71 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %67*/
	/*   %72 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %pai.01.i.i.i*/
		main_67_72 = (`TAG_g_heap_a + (4 * main_lrphiii_pai01iii_reg));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %72 = getelementptr inbounds [577 x %struct.edge*]* @heap, i32 0, i32 %pai.01.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		main_67_72_reg <= main_67_72;
		if (start == 1'b0 && ^(main_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
		main_67_73 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		main_67_73_reg <= main_67_73;
		if (start == 1'b0 && ^(main_67_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %74 = getelementptr inbounds %struct.edge* %73, i32 0, i32 2*/
		main_67_74 = (main_67_73 + 4);
end
always @(*) begin
	/* main: %67*/
	/*   %75 = load i16* %74, align 2, !tbaa !11*/
		main_67_75 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %67*/
	/*   %76 = icmp slt i16 %71, %75*/
		main_67_76 = ($signed(main_67_71) < $signed(main_67_75));
end
always @(*) begin
	/* main: %77*/
	/*   %78 = shl nsw i32 %filho.1.i.i.i, 1*/
		main_77_78 = (main_67_filho1iii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %78 = shl nsw i32 %filho.1.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		main_77_78_reg <= main_77_78;
		if (start == 1'b0 && ^(main_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %77*/
	/*   %79 = icmp sgt i32 %78, %51*/
		main_77_79 = ($signed(main_77_78) > $signed(main_lrphi_51_reg));
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %79 = icmp sgt i32 %78, %51*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		main_77_79_reg <= main_77_79;
		if (start == 1'b0 && ^(main_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %80 = getelementptr inbounds %struct.edge* %52, i32 0, i32 0*/
		main_get_minexiti_80 = main_lrphi_52_reg;
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %81 = load i16* %80, align 2, !tbaa !7*/
		main_get_minexiti_81 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %82 = getelementptr inbounds %struct.edge* %52, i32 0, i32 1*/
		main_get_minexiti_82 = (main_lrphi_52_reg + 2);
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !10*/
		main_get_minexiti_83 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %84 = sext i16 %81 to i32*/
		main_get_minexiti_84 = $signed(main_get_minexiti_81);
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %85 = getelementptr inbounds [24 x i32]* @ufind_groups, i32 0, i32 %84*/
		main_get_minexiti_85 = (`TAG_g_ufind_groups_a + (4 * main_get_minexiti_84));
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		main_get_minexiti_86 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_173)) begin
		main_get_minexiti_86_reg <= main_get_minexiti_86;
		if (start == 1'b0 && ^(main_get_minexiti_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_minexiti_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %87 = sext i16 %83 to i32*/
		main_get_minexiti_87 = $signed(main_get_minexiti_83);
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %88 = getelementptr inbounds [24 x i32]* @ufind_groups, i32 0, i32 %87*/
		main_get_minexiti_88 = (`TAG_g_ufind_groups_a + (4 * main_get_minexiti_87));
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
		main_get_minexiti_89 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_173)) begin
		main_get_minexiti_89_reg <= main_get_minexiti_89;
		if (start == 1'b0 && ^(main_get_minexiti_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_minexiti_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_min.exit.i*/
	/*   %90 = icmp eq i32 %86, %89*/
		main_get_minexiti_90 = (main_get_minexiti_86 == main_get_minexiti_89);
end
always @(*) begin
	/* main: %91*/
	/*   %sext.i.i = shl i32 %86, 16*/
		main_91_sextii = (main_get_minexiti_86_reg <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %91*/
	/*   %92 = ashr exact i32 %sext.i.i, 16*/
		main_91_92 = ($signed(main_91_sextii) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %92 = ashr exact i32 %sext.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__91_174)) begin
		main_91_92_reg <= main_91_92;
		if (start == 1'b0 && ^(main_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %91*/
	/*   %sext1.i.i = shl i32 %89, 16*/
		main_91_sext1ii = (main_get_minexiti_89_reg <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %91*/
	/*   %93 = ashr exact i32 %sext1.i.i, 16*/
		main_91_93 = ($signed(main_91_sext1ii) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %93 = ashr exact i32 %sext1.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__91_174)) begin
		main_91_93_reg <= main_91_93;
		if (start == 1'b0 && ^(main_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %indvars.iv.i.i = phi i32 [ 0, %91 ], [ %99, %98 ]*/
	if (((cur_state == LEGUP_F_main_BB__91_174) & (memory_controller_waitrequest == 1'd0))) begin
		main_94_indvarsivii = 32'd0;
	end
	/* main: %94*/
	/*   %indvars.iv.i.i = phi i32 [ 0, %91 ], [ %99, %98 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__98_180) & (memory_controller_waitrequest == 1'd0)) & (main_98_exitcond35 == 1'd0))) */ begin
		main_94_indvarsivii = main_98_99;
	end
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %indvars.iv.i.i = phi i32 [ 0, %91 ], [ %99, %98 ]*/
	if (((cur_state == LEGUP_F_main_BB__91_174) & (memory_controller_waitrequest == 1'd0))) begin
		main_94_indvarsivii_reg <= main_94_indvarsivii;
		if (start == 1'b0 && ^(main_94_indvarsivii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_indvarsivii_reg"); $finish; end
	end
	/* main: %94*/
	/*   %indvars.iv.i.i = phi i32 [ 0, %91 ], [ %99, %98 ]*/
	if ((((cur_state == LEGUP_F_main_BB__98_180) & (memory_controller_waitrequest == 1'd0)) & (main_98_exitcond35 == 1'd0))) begin
		main_94_indvarsivii_reg <= main_94_indvarsivii;
		if (start == 1'b0 && ^(main_94_indvarsivii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_indvarsivii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %scevgep36 = getelementptr [24 x i32]* @ufind_groups, i32 0, i32 %indvars.iv.i.i*/
		main_94_scevgep36 = (`TAG_g_ufind_groups_a + (4 * main_94_indvarsivii_reg));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %scevgep36 = getelementptr [24 x i32]* @ufind_groups, i32 0, i32 %indvars.iv.i.i*/
	if ((cur_state == LEGUP_F_main_BB__94_175)) begin
		main_94_scevgep36_reg <= main_94_scevgep36;
		if (start == 1'b0 && ^(main_94_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_scevgep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %95 = load i32* %scevgep36, align 4, !tbaa !1*/
		main_94_95 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %94*/
	/*   %96 = icmp eq i32 %95, %92*/
		main_94_96 = (main_94_95 == main_91_92_reg);
end
always @(*) begin
	/* main: %98*/
	/*   %99 = add nuw nsw i32 %indvars.iv.i.i, 1*/
		main_98_99 = (main_94_indvarsivii_reg + 32'd1);
end
always @(*) begin
	/* main: %98*/
	/*   %exitcond35 = icmp eq i32 %99, 24*/
		main_98_exitcond35 = (main_98_99 == 32'd24);
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %100 = add nsw i32 %49, -1*/
		main_ufind_join_groupsexiti_100 = (main_lrphi_49_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %100 = add nsw i32 %49, -1*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		main_ufind_join_groupsexiti_100_reg <= main_ufind_join_groupsexiti_100;
		if (start == 1'b0 && ^(main_ufind_join_groupsexiti_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_ufind_join_groupsexiti_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %101 = getelementptr inbounds [46 x %struct.edge]* @mst_edges, i32 0, i32 %mst_num_edges.0*/
		main_ufind_join_groupsexiti_101 = (`TAG_g_mst_edges_a + (8 * main_lrphi_mst_num_edges0_reg));
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %102 = bitcast %struct.edge* %52 to i64**/
		main_ufind_join_groupsexiti_102 = main_lrphi_52_reg;
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %103 = bitcast %struct.edge* %101 to i64**/
		main_ufind_join_groupsexiti_103 = main_ufind_join_groupsexiti_101;
end
always @(posedge clk) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %103 = bitcast %struct.edge* %101 to i64**/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		main_ufind_join_groupsexiti_103_reg <= main_ufind_join_groupsexiti_103;
		if (start == 1'b0 && ^(main_ufind_join_groupsexiti_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_ufind_join_groupsexiti_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %104 = load i64* %102, align 2*/
		main_ufind_join_groupsexiti_104 = memory_controller_out_b[63:0];
end
always @(*) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %105 = add nsw i32 %mst_num_edges.0, 1*/
		main_ufind_join_groupsexiti_105 = (main_lrphi_mst_num_edges0_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %ufind_join_groups.exit.i*/
	/*   %105 = add nsw i32 %mst_num_edges.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		main_ufind_join_groupsexiti_105_reg <= main_ufind_join_groupsexiti_105;
		if (start == 1'b0 && ^(main_ufind_join_groupsexiti_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_ufind_join_groupsexiti_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.i10*/
	/*   %mst_num_edges.1 = phi i32 [ %mst_num_edges.0, %get_min.exit.i ], [ %105, %ufind_join_groups.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_get_minexiti_173) & (memory_controller_waitrequest == 1'd0)) & (main_get_minexiti_90 == 1'd1))) begin
		main_backedgei10_mst_num_edges1 = main_lrphi_mst_num_edges0_reg;
	end
	/* main: %.backedge.i10*/
	/*   %mst_num_edges.1 = phi i32 [ %mst_num_edges.0, %get_min.exit.i ], [ %105, %ufind_join_groups.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedgei10_mst_num_edges1 = main_ufind_join_groupsexiti_105_reg;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.i10*/
	/*   %mst_num_edges.1 = phi i32 [ %mst_num_edges.0, %get_min.exit.i ], [ %105, %ufind_join_groups.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_get_minexiti_173) & (memory_controller_waitrequest == 1'd0)) & (main_get_minexiti_90 == 1'd1))) begin
		main_backedgei10_mst_num_edges1_reg <= main_backedgei10_mst_num_edges1;
		if (start == 1'b0 && ^(main_backedgei10_mst_num_edges1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei10_mst_num_edges1_reg"); $finish; end
	end
	/* main: %.backedge.i10*/
	/*   %mst_num_edges.1 = phi i32 [ %mst_num_edges.0, %get_min.exit.i ], [ %105, %ufind_join_groups.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei10_mst_num_edges1_reg <= main_backedgei10_mst_num_edges1;
		if (start == 1'b0 && ^(main_backedgei10_mst_num_edges1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei10_mst_num_edges1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.i10*/
	/*   %106 = phi i32 [ %49, %get_min.exit.i ], [ %100, %ufind_join_groups.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_get_minexiti_173) & (memory_controller_waitrequest == 1'd0)) & (main_get_minexiti_90 == 1'd1))) begin
		main_backedgei10_106 = main_lrphi_49_reg;
	end
	/* main: %.backedge.i10*/
	/*   %106 = phi i32 [ %49, %get_min.exit.i ], [ %100, %ufind_join_groups.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedgei10_106 = main_ufind_join_groupsexiti_100_reg;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.i10*/
	/*   %106 = phi i32 [ %49, %get_min.exit.i ], [ %100, %ufind_join_groups.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_get_minexiti_173) & (memory_controller_waitrequest == 1'd0)) & (main_get_minexiti_90 == 1'd1))) begin
		main_backedgei10_106_reg <= main_backedgei10_106;
		if (start == 1'b0 && ^(main_backedgei10_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei10_106_reg"); $finish; end
	end
	/* main: %.backedge.i10*/
	/*   %106 = phi i32 [ %49, %get_min.exit.i ], [ %100, %ufind_join_groups.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei10_106_reg <= main_backedgei10_106;
		if (start == 1'b0 && ^(main_backedgei10_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei10_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.i10*/
	/*   %107 = icmp sgt i32 %106, 1*/
		main_backedgei10_107 = ($signed(main_backedgei10_106_reg) > $signed(32'd1));
end
always @(*) begin
	/* main: %.backedge.i10*/
	/*   %indvar.next38 = add i32 %indvar37, 1*/
		main_backedgei10_indvarnext38 = (main_lrphi_indvar37_reg + 32'd1);
end
always @(*) begin
	/* main: %110*/
	/*   %i.01.i2 = phi i32 [ 0, %mst.exit ], [ %115, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB_mstexit_186) & (memory_controller_waitrequest == 1'd0))) begin
		main_110_i01i2 = 32'd0;
	end
	/* main: %110*/
	/*   %i.01.i2 = phi i32 [ 0, %mst.exit ], [ %115, %110 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__110_191) & (memory_controller_waitrequest == 1'd0)) & (main_110_exitcond25_reg == 1'd0))) */ begin
		main_110_i01i2 = main_110_115_reg;
	end
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %i.01.i2 = phi i32 [ 0, %mst.exit ], [ %115, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB_mstexit_186) & (memory_controller_waitrequest == 1'd0))) begin
		main_110_i01i2_reg <= main_110_i01i2;
		if (start == 1'b0 && ^(main_110_i01i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_i01i2_reg"); $finish; end
	end
	/* main: %110*/
	/*   %i.01.i2 = phi i32 [ 0, %mst.exit ], [ %115, %110 ]*/
	if ((((cur_state == LEGUP_F_main_BB__110_191) & (memory_controller_waitrequest == 1'd0)) & (main_110_exitcond25_reg == 1'd0))) begin
		main_110_i01i2_reg <= main_110_i01i2;
		if (start == 1'b0 && ^(main_110_i01i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_i01i2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep26 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.01.i2, i32 2*/
		main_110_scevgep26 = (`TAG_g_mst_edges_a + ((8 * main_110_i01i2_reg) + 4));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %scevgep26 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.01.i2, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		main_110_scevgep26_reg <= main_110_scevgep26;
		if (start == 1'b0 && ^(main_110_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep27 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.01.i2, i32 1*/
		main_110_scevgep27 = (`TAG_g_mst_edges_a + ((8 * main_110_i01i2_reg) + 2));
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep2829 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.01.i2, i32 0*/
		main_110_scevgep2829 = (`TAG_g_mst_edges_a + (8 * main_110_i01i2_reg));
end
always @(*) begin
	/* main: %110*/
	/*   %111 = add i32 %i.01.i2, 23*/
		main_110_111 = (main_110_i01i2_reg + 32'd23);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %111 = add i32 %i.01.i2, 23*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		main_110_111_reg <= main_110_111;
		if (start == 1'b0 && ^(main_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep30 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 3*/
		main_110_scevgep30 = (`TAG_g_mst_edges_a + ((8 * main_110_111_reg) + 6));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %scevgep30 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		main_110_scevgep30_reg <= main_110_scevgep30;
		if (start == 1'b0 && ^(main_110_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep31 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 2*/
		main_110_scevgep31 = (`TAG_g_mst_edges_a + ((8 * main_110_111_reg) + 4));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %scevgep31 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		main_110_scevgep31_reg <= main_110_scevgep31;
		if (start == 1'b0 && ^(main_110_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep3233 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 0*/
		main_110_scevgep3233 = (`TAG_g_mst_edges_a + (8 * main_110_111_reg));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %scevgep3233 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		main_110_scevgep3233_reg <= main_110_scevgep3233;
		if (start == 1'b0 && ^(main_110_scevgep3233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_scevgep3233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %scevgep34 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 1*/
		main_110_scevgep34 = (`TAG_g_mst_edges_a + ((8 * main_110_111_reg) + 2));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %scevgep34 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %111, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		main_110_scevgep34_reg <= main_110_scevgep34;
		if (start == 1'b0 && ^(main_110_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %112 = load i16* %scevgep2829, align 2, !tbaa !7*/
		main_110_112 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %110*/
	/*   %113 = load i16* %scevgep27, align 2, !tbaa !10*/
		main_110_113 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %110*/
	/*   %114 = load i16* %scevgep26, align 2, !tbaa !11*/
		main_110_114 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %110*/
	/*   %115 = add nsw i32 %i.01.i2, 1*/
		main_110_115 = (main_110_i01i2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %115 = add nsw i32 %i.01.i2, 1*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		main_110_115_reg <= main_110_115;
		if (start == 1'b0 && ^(main_110_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %exitcond25 = icmp eq i32 %115, 23*/
		main_110_exitcond25 = (main_110_115 == 32'd23);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %exitcond25 = icmp eq i32 %115, 23*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		main_110_exitcond25_reg <= main_110_exitcond25;
		if (start == 1'b0 && ^(main_110_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %i.023.i = phi i32 [ 0, %mst_duplicate_edges.exit ], [ %119, %118 ]*/
	if (((cur_state == LEGUP_F_main_BB_mst_duplicate_edgesexit_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_118_i023i = 32'd0;
	end
	/* main: %118*/
	/*   %i.023.i = phi i32 [ 0, %mst_duplicate_edges.exit ], [ %119, %118 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__118_194) & (memory_controller_waitrequest == 1'd0)) & (main_118_exitcond23_reg == 1'd0))) */ begin
		main_118_i023i = main_118_119_reg;
	end
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %i.023.i = phi i32 [ 0, %mst_duplicate_edges.exit ], [ %119, %118 ]*/
	if (((cur_state == LEGUP_F_main_BB_mst_duplicate_edgesexit_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_118_i023i_reg <= main_118_i023i;
		if (start == 1'b0 && ^(main_118_i023i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_i023i_reg"); $finish; end
	end
	/* main: %118*/
	/*   %i.023.i = phi i32 [ 0, %mst_duplicate_edges.exit ], [ %119, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__118_194) & (memory_controller_waitrequest == 1'd0)) & (main_118_exitcond23_reg == 1'd0))) begin
		main_118_i023i_reg <= main_118_i023i;
		if (start == 1'b0 && ^(main_118_i023i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_i023i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %scevgep24 = getelementptr [46 x i32]* @euler_path, i32 0, i32 %i.023.i*/
		main_118_scevgep24 = (`TAG_g_euler_path_a + (4 * main_118_i023i_reg));
end
always @(*) begin
	/* main: %118*/
	/*   %119 = add nsw i32 %i.023.i, 1*/
		main_118_119 = (main_118_i023i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %119 = add nsw i32 %i.023.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		main_118_119_reg <= main_118_119;
		if (start == 1'b0 && ^(main_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %exitcond23 = icmp eq i32 %119, 47*/
		main_118_exitcond23 = (main_118_119 == 32'd47);
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %exitcond23 = icmp eq i32 %119, 47*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		main_118_exitcond23_reg <= main_118_exitcond23;
		if (start == 1'b0 && ^(main_118_exitcond23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_exitcond23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %indvar20 = phi i32 [ %phitmp, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_indvar20 = 32'd1;
	end
	/* main: %121*/
	/*   %indvar20 = phi i32 [ %phitmp, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_121_indvar20 = main_backedge_crit_edgei_phitmp_reg;
	end
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %indvar20 = phi i32 [ %phitmp, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_indvar20_reg <= main_121_indvar20;
		if (start == 1'b0 && ^(main_121_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_indvar20_reg"); $finish; end
	end
	/* main: %121*/
	/*   %indvar20 = phi i32 [ %phitmp, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_indvar20_reg <= main_121_indvar20;
		if (start == 1'b0 && ^(main_121_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_indvar20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %122 = phi i32 [ %.pre.i, %.backedge._crit_edge.i ], [ 0, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_122 = 32'd0;
	end
	/* main: %121*/
	/*   %122 = phi i32 [ %.pre.i, %.backedge._crit_edge.i ], [ 0, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_121_122 = main_backedge_crit_edgei_prei;
	end
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %122 = phi i32 [ %.pre.i, %.backedge._crit_edge.i ], [ 0, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_122_reg <= main_121_122;
		if (start == 1'b0 && ^(main_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_122_reg"); $finish; end
	end
	/* main: %121*/
	/*   %122 = phi i32 [ %.pre.i, %.backedge._crit_edge.i ], [ 0, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_122_reg <= main_121_122;
		if (start == 1'b0 && ^(main_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %last_index.021.i = phi i32 [ %last_index.0.be.i, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_last_index021i = 32'd1;
	end
	/* main: %121*/
	/*   %last_index.021.i = phi i32 [ %last_index.0.be.i, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_121_last_index021i = main_backedgei_last_index0bei_reg;
	end
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %last_index.021.i = phi i32 [ %last_index.0.be.i, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_last_index021i_reg <= main_121_last_index021i;
		if (start == 1'b0 && ^(main_121_last_index021i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_last_index021i_reg"); $finish; end
	end
	/* main: %121*/
	/*   %last_index.021.i = phi i32 [ %last_index.0.be.i, %.backedge._crit_edge.i ], [ 1, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_229) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_last_index021i_reg <= main_121_last_index021i;
		if (start == 1'b0 && ^(main_121_last_index021i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_last_index021i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %.phi.trans.insert.i = getelementptr [46 x i32]* @euler_path, i32 0, i32 %indvar20*/
		main_121_phitransinserti = (`TAG_g_euler_path_a + (4 * main_121_indvar20_reg));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %.phi.trans.insert.i = getelementptr [46 x i32]* @euler_path, i32 0, i32 %indvar20*/
	if ((cur_state == LEGUP_F_main_BB__121_197)) begin
		main_121_phitransinserti_reg <= main_121_phitransinserti;
		if (start == 1'b0 && ^(main_121_phitransinserti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_phitransinserti_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %123*/
	/*   %count_deleted_edges.017.i = phi i32 [ 0, %121 ], [ %count_deleted_edges.1.i, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_count_deleted_edges017i = 32'd0;
	end
	/* main: %123*/
	/*   %count_deleted_edges.017.i = phi i32 [ 0, %121 ], [ %count_deleted_edges.1.i, %138 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) */ begin
		main_123_count_deleted_edges017i = main_138_count_deleted_edges1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %123*/
	/*   %count_deleted_edges.017.i = phi i32 [ 0, %121 ], [ %count_deleted_edges.1.i, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_count_deleted_edges017i_reg <= main_123_count_deleted_edges017i;
		if (start == 1'b0 && ^(main_123_count_deleted_edges017i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_count_deleted_edges017i_reg"); $finish; end
	end
	/* main: %123*/
	/*   %count_deleted_edges.017.i = phi i32 [ 0, %121 ], [ %count_deleted_edges.1.i, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) begin
		main_123_count_deleted_edges017i_reg <= main_123_count_deleted_edges017i;
		if (start == 1'b0 && ^(main_123_count_deleted_edges017i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_count_deleted_edges017i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %123*/
	/*   %count_edges.016.i = phi i32 [ 0, %121 ], [ %count_edges.1.i, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_count_edges016i = 32'd0;
	end
	/* main: %123*/
	/*   %count_edges.016.i = phi i32 [ 0, %121 ], [ %count_edges.1.i, %138 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) */ begin
		main_123_count_edges016i = main_138_count_edges1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %123*/
	/*   %count_edges.016.i = phi i32 [ 0, %121 ], [ %count_edges.1.i, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_count_edges016i_reg <= main_123_count_edges016i;
		if (start == 1'b0 && ^(main_123_count_edges016i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_count_edges016i_reg"); $finish; end
	end
	/* main: %123*/
	/*   %count_edges.016.i = phi i32 [ 0, %121 ], [ %count_edges.1.i, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) begin
		main_123_count_edges016i_reg <= main_123_count_edges016i;
		if (start == 1'b0 && ^(main_123_count_edges016i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_count_edges016i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %123*/
	/*   %i.115.i = phi i32 [ 0, %121 ], [ %139, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_i115i = 32'd0;
	end
	/* main: %123*/
	/*   %i.115.i = phi i32 [ 0, %121 ], [ %139, %138 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) */ begin
		main_123_i115i = main_138_139;
	end
end
always @(posedge clk) begin
	/* main: %123*/
	/*   %i.115.i = phi i32 [ 0, %121 ], [ %139, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_123_i115i_reg <= main_123_i115i;
		if (start == 1'b0 && ^(main_123_i115i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_i115i_reg"); $finish; end
	end
	/* main: %123*/
	/*   %i.115.i = phi i32 [ 0, %121 ], [ %139, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_209) & (memory_controller_waitrequest == 1'd0)) & (main_138_exitcond7 == 1'd0))) begin
		main_123_i115i_reg <= main_123_i115i;
		if (start == 1'b0 && ^(main_123_i115i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_i115i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %123*/
	/*   %scevgep89 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.115.i, i32 0*/
		main_123_scevgep89 = (`TAG_g_mst_edges_a + (8 * main_123_i115i_reg));
end
always @(posedge clk) begin
	/* main: %123*/
	/*   %scevgep89 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.115.i, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__123_198)) begin
		main_123_scevgep89_reg <= main_123_scevgep89;
		if (start == 1'b0 && ^(main_123_scevgep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_123_scevgep89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %123*/
	/*   %scevgep11 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.115.i, i32 3*/
		main_123_scevgep11 = (`TAG_g_mst_edges_a + ((8 * main_123_i115i_reg) + 6));
end
always @(*) begin
	/* main: %123*/
	/*   %124 = load i16* %scevgep11, align 2, !tbaa !12*/
		main_123_124 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %123*/
	/*   %125 = icmp eq i16 %124, 0*/
		main_123_125 = (main_123_124 == 16'd0);
end
always @(*) begin
	/* main: %126*/
	/*   %scevgep10 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.115.i, i32 1*/
		main_126_scevgep10 = (`TAG_g_mst_edges_a + ((8 * main_123_i115i_reg) + 2));
end
always @(*) begin
	/* main: %126*/
	/*   %127 = load i16* %scevgep10, align 2, !tbaa !10*/
		main_126_127 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %126*/
	/*   %128 = sext i16 %127 to i32*/
		main_126_128 = $signed(main_126_127);
end
always @(*) begin
	/* main: %126*/
	/*   %129 = icmp eq i32 %128, %122*/
		main_126_129 = (main_126_128 == main_121_122_reg);
end
always @(*) begin
	/* main: %130*/
	/*   %131 = load i16* %scevgep89, align 2, !tbaa !7*/
		main_130_131 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %130*/
	/*   %132 = sext i16 %131 to i32*/
		main_130_132 = $signed(main_130_131);
end
always @(*) begin
	/* main: %130*/
	/*   %133 = icmp eq i32 %132, %122*/
		main_130_133 = (main_130_132 == main_121_122_reg);
end
always @(*) begin
	/* main: %134*/
	/*   %135 = add nsw i32 %count_edges.016.i, 1*/
		main_134_135 = (main_123_count_edges016i_reg + 32'd1);
end
always @(*) begin
	/* main: %136*/
	/*   %137 = add nsw i32 %count_deleted_edges.017.i, 1*/
		main_136_137 = (main_123_count_deleted_edges017i_reg + 32'd1);
end
always @(*) begin
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	if ((((cur_state == LEGUP_F_main_BB__130_206) & (memory_controller_waitrequest == 1'd0)) & (main_130_133 == 1'd0))) begin
		main_138_count_edges1i = main_123_count_edges016i_reg;
	end
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_207) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_edges1i = main_134_135;
	end
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__136_208) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_138_count_edges1i = main_123_count_edges016i_reg;
	end
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	if ((((cur_state == LEGUP_F_main_BB__130_206) & (memory_controller_waitrequest == 1'd0)) & (main_130_133 == 1'd0))) begin
		main_138_count_edges1i_reg <= main_138_count_edges1i;
		if (start == 1'b0 && ^(main_138_count_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_edges1i_reg"); $finish; end
	end
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_207) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_edges1i_reg <= main_138_count_edges1i;
		if (start == 1'b0 && ^(main_138_count_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_edges1i_reg"); $finish; end
	end
	/* main: %138*/
	/*   %count_edges.1.i = phi i32 [ %count_edges.016.i, %136 ], [ %135, %134 ], [ %count_edges.016.i, %130 ]*/
	if (((cur_state == LEGUP_F_main_BB__136_208) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_edges1i_reg <= main_138_count_edges1i;
		if (start == 1'b0 && ^(main_138_count_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_edges1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	if ((((cur_state == LEGUP_F_main_BB__130_206) & (memory_controller_waitrequest == 1'd0)) & (main_130_133 == 1'd0))) begin
		main_138_count_deleted_edges1i = main_123_count_deleted_edges017i_reg;
	end
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_207) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_deleted_edges1i = main_123_count_deleted_edges017i_reg;
	end
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__136_208) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_138_count_deleted_edges1i = main_136_137;
	end
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	if ((((cur_state == LEGUP_F_main_BB__130_206) & (memory_controller_waitrequest == 1'd0)) & (main_130_133 == 1'd0))) begin
		main_138_count_deleted_edges1i_reg <= main_138_count_deleted_edges1i;
		if (start == 1'b0 && ^(main_138_count_deleted_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_deleted_edges1i_reg"); $finish; end
	end
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_207) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_deleted_edges1i_reg <= main_138_count_deleted_edges1i;
		if (start == 1'b0 && ^(main_138_count_deleted_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_deleted_edges1i_reg"); $finish; end
	end
	/* main: %138*/
	/*   %count_deleted_edges.1.i = phi i32 [ %137, %136 ], [ %count_deleted_edges.017.i, %134 ], [ %count_deleted_edges.017.i, %130 ]*/
	if (((cur_state == LEGUP_F_main_BB__136_208) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_count_deleted_edges1i_reg <= main_138_count_deleted_edges1i;
		if (start == 1'b0 && ^(main_138_count_deleted_edges1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_count_deleted_edges1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %139 = add nsw i32 %i.115.i, 1*/
		main_138_139 = (main_123_i115i_reg + 32'd1);
end
always @(*) begin
	/* main: %138*/
	/*   %exitcond7 = icmp eq i32 %139, 46*/
		main_138_exitcond7 = (main_138_139 == 32'd46);
end
always @(*) begin
	/* main: %140*/
	/*   %141 = icmp eq i32 %count_deleted_edges.1.i, 46*/
		main_140_141 = (main_138_count_deleted_edges1i_reg == 32'd46);
end
always @(*) begin
	/* main: %142*/
	/*   %143 = icmp eq i32 %count_edges.1.i, 1*/
		main_142_143 = (main_138_count_edges1i_reg == 32'd1);
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %i.219.i = phi i32 [ %163, %162 ], [ 0, %.preheader.i5.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5preheader_212) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi5_i219i = 32'd0;
	end
	/* main: %.preheader.i5*/
	/*   %i.219.i = phi i32 [ %163, %162 ], [ 0, %.preheader.i5.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__162_230) & (memory_controller_waitrequest == 1'd0)) & (main_162_164 == 1'd1))) */ begin
		main_preheaderi5_i219i = main_162_163;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %i.219.i = phi i32 [ %163, %162 ], [ 0, %.preheader.i5.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5preheader_212) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi5_i219i_reg <= main_preheaderi5_i219i;
		if (start == 1'b0 && ^(main_preheaderi5_i219i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_i219i_reg"); $finish; end
	end
	/* main: %.preheader.i5*/
	/*   %i.219.i = phi i32 [ %163, %162 ], [ 0, %.preheader.i5.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_230) & (memory_controller_waitrequest == 1'd0)) & (main_162_164 == 1'd1))) begin
		main_preheaderi5_i219i_reg <= main_preheaderi5_i219i;
		if (start == 1'b0 && ^(main_preheaderi5_i219i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_i219i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %144 = add i32 %i.219.i, 1*/
		main_preheaderi5_144 = (main_preheaderi5_i219i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %144 = add i32 %i.219.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		main_preheaderi5_144_reg <= main_preheaderi5_144;
		if (start == 1'b0 && ^(main_preheaderi5_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %scevgep19 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.219.i, i32 3*/
		main_preheaderi5_scevgep19 = (`TAG_g_mst_edges_a + ((8 * main_preheaderi5_i219i_reg) + 6));
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %scevgep19 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.219.i, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		main_preheaderi5_scevgep19_reg <= main_preheaderi5_scevgep19;
		if (start == 1'b0 && ^(main_preheaderi5_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %145 = load i16* %scevgep19, align 2, !tbaa !12*/
		main_preheaderi5_145 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %146 = icmp eq i16 %145, 0*/
		main_preheaderi5_146 = (main_preheaderi5_145 == 16'd0);
end
always @(*) begin
	/* main: %147*/
	/*   %scevgep18 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.219.i, i32 1*/
		main_147_scevgep18 = (`TAG_g_mst_edges_a + ((8 * main_preheaderi5_i219i_reg) + 2));
end
always @(*) begin
	/* main: %147*/
	/*   %scevgep1617 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.219.i, i32 0*/
		main_147_scevgep1617 = (`TAG_g_mst_edges_a + (8 * main_preheaderi5_i219i_reg));
end
always @(*) begin
	/* main: %147*/
	/*   %148 = load i16* %scevgep18, align 2, !tbaa !10*/
		main_147_148 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %147*/
	/*   %149 = sext i16 %148 to i32*/
		main_147_149 = $signed(main_147_148);
end
always @(posedge clk) begin
	/* main: %147*/
	/*   %149 = sext i16 %148 to i32*/
	if ((cur_state == LEGUP_F_main_BB__147_218)) begin
		main_147_149_reg <= main_147_149;
		if (start == 1'b0 && ^(main_147_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_147_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %147*/
	/*   %150 = icmp eq i32 %149, %122*/
		main_147_150 = (main_147_149 == main_121_122_reg);
end
always @(*) begin
	/* main: %147*/
	/*   %151 = load i16* %scevgep1617, align 2, !tbaa !7*/
		main_147_151 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %147*/
	/*   %152 = sext i16 %151 to i32*/
		main_147_152 = $signed(main_147_151);
end
always @(posedge clk) begin
	/* main: %147*/
	/*   %152 = sext i16 %151 to i32*/
	if ((cur_state == LEGUP_F_main_BB__147_218)) begin
		main_147_152_reg <= main_147_152;
		if (start == 1'b0 && ^(main_147_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_147_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %154 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
		main_153_154 = (`TAG_g_euler_path_a + (4 * main_121_last_index021i_reg));
end
always @(*) begin
	/* main: %153*/
	/*   %155 = add nsw i32 %last_index.021.i, 1*/
		main_153_155 = (main_121_last_index021i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %153*/
	/*   %155 = add nsw i32 %last_index.021.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		main_153_155_reg <= main_153_155;
		if (start == 1'b0 && ^(main_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %157 = icmp eq i32 %152, %122*/
		main_156_157 = (main_147_152_reg == main_121_122_reg);
end
always @(*) begin
	/* main: %158*/
	/*   %159 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
		main_158_159 = (`TAG_g_euler_path_a + (4 * main_121_last_index021i_reg));
end
always @(*) begin
	/* main: %158*/
	/*   %160 = add nsw i32 %last_index.021.i, 1*/
		main_158_160 = (main_121_last_index021i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %158*/
	/*   %160 = add nsw i32 %last_index.021.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		main_158_160_reg <= main_158_160;
		if (start == 1'b0 && ^(main_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB__153_220) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei = main_153_155_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else if (((cur_state == LEGUP_F_main_BB__158_223) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei = main_158_160_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else if (((cur_state == LEGUP_F_main_BB_backedgeiloopexit_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei = main_121_last_index021i_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else if (((cur_state == LEGUP_F_main_BB_backedgeiloopexit1_225) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei = main_121_last_index021i_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__165_231) & (memory_controller_waitrequest == 1'd0)) & (main_165_166 == 1'd0))) begin
		main_backedgei_last_index0bei = main_121_last_index021i_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else if (((cur_state == LEGUP_F_main_BB__178_245) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei = main_178_182_reg;
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__189_253) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedgei_last_index0bei = main_189_193_reg;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB__153_220) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_223) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedgeiloopexit_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedgeiloopexit1_225) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__165_231) & (memory_controller_waitrequest == 1'd0)) & (main_165_166 == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB__178_245) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
	/* main: %.backedge.i*/
	/*   %last_index.0.be.i = phi i32 [ %155, %153 ], [ %160, %158 ], [ %182, %178 ], [ %193, %189 ], [ %last_index.021.i, %165 ], [ %last_index.021.i, %.backedge.i.loopexit ], [ %last_index.021.i, %.backedge.i.loopexit1 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_253) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedgei_last_index0bei_reg <= main_backedgei_last_index0bei;
		if (start == 1'b0 && ^(main_backedgei_last_index0bei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedgei_last_index0bei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.i*/
	/*   %161 = icmp slt i32 %last_index.0.be.i, 46*/
		main_backedgei_161 = ($signed(main_backedgei_last_index0bei_reg) < $signed(32'd46));
end
always @(*) begin
	/* main: %.backedge._crit_edge.i*/
	/*   %.pre.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !1*/
		main_backedge_crit_edgei_prei = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.backedge._crit_edge.i*/
	/*   %phitmp = add i32 %indvar20, 1*/
		main_backedge_crit_edgei_phitmp = (main_121_indvar20_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.backedge._crit_edge.i*/
	/*   %phitmp = add i32 %indvar20, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_227)) begin
		main_backedge_crit_edgei_phitmp_reg <= main_backedge_crit_edgei_phitmp;
		if (start == 1'b0 && ^(main_backedge_crit_edgei_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge_crit_edgei_phitmp_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %163 = add nsw i32 %i.219.i, 1*/
		main_162_163 = (main_preheaderi5_i219i_reg + 32'd1);
end
always @(*) begin
	/* main: %162*/
	/*   %164 = icmp slt i32 %144, 46*/
		main_162_164 = ($signed(main_preheaderi5_144_reg) < $signed(32'd46));
end
always @(*) begin
	/* main: %165*/
	/*   %166 = icmp sgt i32 %count_edges.1.i, 1*/
		main_165_166 = ($signed(main_138_count_edges1i_reg) > $signed(32'd1));
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %i.318.i = phi i32 [ %195, %194 ], [ 0, %.preheader2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2ipreheader_232) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i_i318i = 32'd0;
	end
	/* main: %.preheader2.i*/
	/*   %i.318.i = phi i32 [ %195, %194 ], [ 0, %.preheader2.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__194_254) & (memory_controller_waitrequest == 1'd0)) & (main_194_196 == 1'd1))) */ begin
		main_preheader2i_i318i = main_194_195;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %i.318.i = phi i32 [ %195, %194 ], [ 0, %.preheader2.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2ipreheader_232) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i_i318i_reg <= main_preheader2i_i318i;
		if (start == 1'b0 && ^(main_preheader2i_i318i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_i318i_reg"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %i.318.i = phi i32 [ %195, %194 ], [ 0, %.preheader2.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_254) & (memory_controller_waitrequest == 1'd0)) & (main_194_196 == 1'd1))) begin
		main_preheader2i_i318i_reg <= main_preheader2i_i318i;
		if (start == 1'b0 && ^(main_preheader2i_i318i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_i318i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %167 = add i32 %i.318.i, 1*/
		main_preheader2i_167 = (main_preheader2i_i318i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %167 = add i32 %i.318.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		main_preheader2i_167_reg <= main_preheader2i_167;
		if (start == 1'b0 && ^(main_preheader2i_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %scevgep1213 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 0*/
		main_preheader2i_scevgep1213 = (`TAG_g_mst_edges_a + (8 * main_preheader2i_i318i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %scevgep1213 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		main_preheader2i_scevgep1213_reg <= main_preheader2i_scevgep1213;
		if (start == 1'b0 && ^(main_preheader2i_scevgep1213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_scevgep1213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %scevgep14 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 1*/
		main_preheader2i_scevgep14 = (`TAG_g_mst_edges_a + ((8 * main_preheader2i_i318i_reg) + 2));
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %scevgep14 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		main_preheader2i_scevgep14_reg <= main_preheader2i_scevgep14;
		if (start == 1'b0 && ^(main_preheader2i_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %scevgep15 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 3*/
		main_preheader2i_scevgep15 = (`TAG_g_mst_edges_a + ((8 * main_preheader2i_i318i_reg) + 6));
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %scevgep15 = getelementptr [46 x %struct.edge]* @mst_edges, i32 0, i32 %i.318.i, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		main_preheader2i_scevgep15_reg <= main_preheader2i_scevgep15;
		if (start == 1'b0 && ^(main_preheader2i_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %168 = load i16* %scevgep15, align 2, !tbaa !12*/
		main_preheader2i_168 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %169 = icmp eq i16 %168, 0*/
		main_preheader2i_169 = (main_preheader2i_168 == 16'd0);
end
always @(*) begin
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
		main_170_171 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__170_238)) begin
		main_170_171_reg <= main_170_171;
		if (start == 1'b0 && ^(main_170_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %172 = sext i16 %171 to i32*/
		main_170_172 = $signed(main_170_171);
end
always @(*) begin
	/* main: %170*/
	/*   %173 = icmp eq i32 %172, %122*/
		main_170_173 = (main_170_172 == main_121_122_reg);
end
always @(*) begin
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
		main_170_174 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__170_238)) begin
		main_170_174_reg <= main_170_174;
		if (start == 1'b0 && ^(main_170_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
		main_175_176 = is_bridge_return_val_reg;
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		main_175_176_reg <= main_175_176;
		if (start == 1'b0 && ^(main_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %177 = icmp eq i8 %176, 0*/
		main_175_177 = (main_175_176_reg == 8'd0);
end
always @(*) begin
	/* main: %178*/
	/*   %179 = load i16* %scevgep1213, align 2, !tbaa !7*/
		main_178_179 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %178*/
	/*   %180 = sext i16 %179 to i32*/
		main_178_180 = $signed(main_178_179);
end
always @(*) begin
	/* main: %178*/
	/*   %181 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
		main_178_181 = (`TAG_g_euler_path_a + (4 * main_121_last_index021i_reg));
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %181 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		main_178_181_reg <= main_178_181;
		if (start == 1'b0 && ^(main_178_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %182 = add nsw i32 %last_index.021.i, 1*/
		main_178_182 = (main_121_last_index021i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %182 = add nsw i32 %last_index.021.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		main_178_182_reg <= main_178_182;
		if (start == 1'b0 && ^(main_178_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %183*/
	/*   %184 = sext i16 %174 to i32*/
		main_183_184 = $signed(main_170_174_reg);
end
always @(*) begin
	/* main: %183*/
	/*   %185 = icmp eq i32 %184, %122*/
		main_183_185 = (main_183_184 == main_121_122_reg);
end
always @(*) begin
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
		main_186_187 = is_bridge_return_val_reg;
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		main_186_187_reg <= main_186_187;
		if (start == 1'b0 && ^(main_186_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %188 = icmp eq i8 %187, 0*/
		main_186_188 = (main_186_187_reg == 8'd0);
end
always @(*) begin
	/* main: %189*/
	/*   %190 = load i16* %scevgep14, align 2, !tbaa !10*/
		main_189_190 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %189*/
	/*   %191 = sext i16 %190 to i32*/
		main_189_191 = $signed(main_189_190);
end
always @(*) begin
	/* main: %189*/
	/*   %192 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
		main_189_192 = (`TAG_g_euler_path_a + (4 * main_121_last_index021i_reg));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %192 = getelementptr inbounds [46 x i32]* @euler_path, i32 0, i32 %last_index.021.i*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		main_189_192_reg <= main_189_192;
		if (start == 1'b0 && ^(main_189_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %193 = add nsw i32 %last_index.021.i, 1*/
		main_189_193 = (main_121_last_index021i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %193 = add nsw i32 %last_index.021.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		main_189_193_reg <= main_189_193;
		if (start == 1'b0 && ^(main_189_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %195 = add nsw i32 %i.318.i, 1*/
		main_194_195 = (main_preheader2i_i318i_reg + 32'd1);
end
always @(*) begin
	/* main: %194*/
	/*   %196 = icmp slt i32 %167, 46*/
		main_194_196 = ($signed(main_preheader2i_167_reg) < $signed(32'd46));
end
always @(*) begin
	/* main: %199*/
	/*   %indvar4 = phi i64 [ %indvar.next5, %200 ], [ 0, %find_euler_path.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_find_euler_pathexit_255) & (memory_controller_waitrequest == 1'd0))) begin
		main_199_indvar4 = 64'd0;
	end
	/* main: %199*/
	/*   %indvar4 = phi i64 [ %indvar.next5, %200 ], [ 0, %find_euler_path.exit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__200_258) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_199_indvar4 = main_200_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %indvar4 = phi i64 [ %indvar.next5, %200 ], [ 0, %find_euler_path.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_find_euler_pathexit_255) & (memory_controller_waitrequest == 1'd0))) begin
		main_199_indvar4_reg <= main_199_indvar4;
		if (start == 1'b0 && ^(main_199_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_indvar4_reg"); $finish; end
	end
	/* main: %199*/
	/*   %indvar4 = phi i64 [ %indvar.next5, %200 ], [ 0, %find_euler_path.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__200_258) & (memory_controller_waitrequest == 1'd0))) begin
		main_199_indvar4_reg <= main_199_indvar4;
		if (start == 1'b0 && ^(main_199_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %exitcond6 = icmp eq i64 %indvar4, 23*/
		main_199_exitcond6 = (main_199_indvar4_reg == 64'd23);
end
always @(*) begin
	/* main: %200*/
	/*   %201 = shl i64 %indvar4, 2*/
		main_200_201 = (main_199_indvar4_reg <<< (64'd2 % 64'd64));
end
always @(*) begin
	/* main: %200*/
	/*   %202 = add i64 %201, zext (i32 ptrtoint (i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 1) to i32) to i64)*/
		main_200_202 = (main_200_201 + (`TAG_g_hamilton_path_a + (4 * 32'd1)));
end
always @(*) begin
	/* main: %200*/
	/*   %203 = trunc i64 %202 to i32*/
		main_200_203 = main_200_202[31:0];
end
always @(*) begin
	/* main: %200*/
	/*   %s.i.0 = inttoptr i32 %203 to i32**/
		main_200_si0 = main_200_203;
end
always @(*) begin
	/* main: %200*/
	/*   %indvar.next5 = add i64 %indvar4, 1*/
		main_200_indvarnext5 = (main_199_indvar4_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %indvar.next5 = add i64 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		main_200_indvarnext5_reg <= main_200_indvarnext5;
		if (start == 1'b0 && ^(main_200_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %204 = load i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_204 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %205*/
	/*   %indvar = phi i32 [ %indvar.next, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_indvar = 32'd0;
	end
	/* main: %205*/
	/*   %indvar = phi i32 [ %indvar.next, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) */ begin
		main_205_indvar = main_223_indvarnext;
	end
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %indvar = phi i32 [ %indvar.next, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_indvar_reg <= main_205_indvar;
		if (start == 1'b0 && ^(main_205_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_indvar_reg"); $finish; end
	end
	/* main: %205*/
	/*   %indvar = phi i32 [ %indvar.next, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) begin
		main_205_indvar_reg <= main_205_indvar;
		if (start == 1'b0 && ^(main_205_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %total_weight.05.i = phi i32 [ %total_weight.1.i, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_total_weight05i = 32'd0;
	end
	/* main: %205*/
	/*   %total_weight.05.i = phi i32 [ %total_weight.1.i, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) */ begin
		main_205_total_weight05i = main_223_total_weight1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %total_weight.05.i = phi i32 [ %total_weight.1.i, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_total_weight05i_reg <= main_205_total_weight05i;
		if (start == 1'b0 && ^(main_205_total_weight05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_total_weight05i_reg"); $finish; end
	end
	/* main: %205*/
	/*   %total_weight.05.i = phi i32 [ %total_weight.1.i, %223 ], [ 0, %legup_memset_4_i64.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) begin
		main_205_total_weight05i_reg <= main_205_total_weight05i;
		if (start == 1'b0 && ^(main_205_total_weight05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_total_weight05i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %path_index.04.i = phi i32 [ %path_index.1.i, %223 ], [ 1, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_path_index04i = 32'd1;
	end
	/* main: %205*/
	/*   %path_index.04.i = phi i32 [ %path_index.1.i, %223 ], [ 1, %legup_memset_4_i64.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) */ begin
		main_205_path_index04i = main_223_path_index1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %path_index.04.i = phi i32 [ %path_index.1.i, %223 ], [ 1, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_262) & (memory_controller_waitrequest == 1'd0))) begin
		main_205_path_index04i_reg <= main_205_path_index04i;
		if (start == 1'b0 && ^(main_205_path_index04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_path_index04i_reg"); $finish; end
	end
	/* main: %205*/
	/*   %path_index.04.i = phi i32 [ %path_index.1.i, %223 ], [ 1, %legup_memset_4_i64.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__223_277) & (memory_controller_waitrequest == 1'd0)) & (main_223_exitcond2 == 1'd0))) begin
		main_205_path_index04i_reg <= main_205_path_index04i;
		if (start == 1'b0 && ^(main_205_path_index04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_path_index04i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %206 = add i32 %indvar, 1*/
		main_205_206 = (main_205_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %206 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__205_263)) begin
		main_205_206_reg <= main_205_206;
		if (start == 1'b0 && ^(main_205_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %scevgep3 = getelementptr [46 x i32]* @euler_path, i32 0, i32 %206*/
		main_205_scevgep3 = (`TAG_g_euler_path_a + (4 * main_205_206_reg));
end
always @(*) begin
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_205_207 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__205_266)) begin
		main_205_207_reg <= main_205_207;
		if (start == 1'b0 && ^(main_205_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %v_in_hamilton_path.02.i = phi i8 [ 0, %205 ], [ %.v_in_hamilton_path.0.i, %208 ]*/
	if (((cur_state == LEGUP_F_main_BB__205_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_208_v_in_hamilton_path02i = 8'd0;
	end
	/* main: %208*/
	/*   %v_in_hamilton_path.02.i = phi i8 [ 0, %205 ], [ %.v_in_hamilton_path.0.i, %208 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__208_269) & (memory_controller_waitrequest == 1'd0)) & (main_208_exitcond_reg == 1'd0))) */ begin
		main_208_v_in_hamilton_path02i = main_208_v_in_hamilton_path0i;
	end
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %v_in_hamilton_path.02.i = phi i8 [ 0, %205 ], [ %.v_in_hamilton_path.0.i, %208 ]*/
	if (((cur_state == LEGUP_F_main_BB__205_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_208_v_in_hamilton_path02i_reg <= main_208_v_in_hamilton_path02i;
		if (start == 1'b0 && ^(main_208_v_in_hamilton_path02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_v_in_hamilton_path02i_reg"); $finish; end
	end
	/* main: %208*/
	/*   %v_in_hamilton_path.02.i = phi i8 [ 0, %205 ], [ %.v_in_hamilton_path.0.i, %208 ]*/
	if ((((cur_state == LEGUP_F_main_BB__208_269) & (memory_controller_waitrequest == 1'd0)) & (main_208_exitcond_reg == 1'd0))) begin
		main_208_v_in_hamilton_path02i_reg <= main_208_v_in_hamilton_path02i;
		if (start == 1'b0 && ^(main_208_v_in_hamilton_path02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_v_in_hamilton_path02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %j.01.i = phi i32 [ 0, %205 ], [ %211, %208 ]*/
	if (((cur_state == LEGUP_F_main_BB__205_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_208_j01i = 32'd0;
	end
	/* main: %208*/
	/*   %j.01.i = phi i32 [ 0, %205 ], [ %211, %208 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__208_269) & (memory_controller_waitrequest == 1'd0)) & (main_208_exitcond_reg == 1'd0))) */ begin
		main_208_j01i = main_208_211_reg;
	end
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %j.01.i = phi i32 [ 0, %205 ], [ %211, %208 ]*/
	if (((cur_state == LEGUP_F_main_BB__205_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_208_j01i_reg <= main_208_j01i;
		if (start == 1'b0 && ^(main_208_j01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_j01i_reg"); $finish; end
	end
	/* main: %208*/
	/*   %j.01.i = phi i32 [ 0, %205 ], [ %211, %208 ]*/
	if ((((cur_state == LEGUP_F_main_BB__208_269) & (memory_controller_waitrequest == 1'd0)) & (main_208_exitcond_reg == 1'd0))) begin
		main_208_j01i_reg <= main_208_j01i;
		if (start == 1'b0 && ^(main_208_j01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_j01i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %scevgep = getelementptr [24 x i32]* @hamilton_path, i32 0, i32 %j.01.i*/
		main_208_scevgep = (`TAG_g_hamilton_path_a + (4 * main_208_j01i_reg));
end
always @(*) begin
	/* main: %208*/
	/*   %209 = load i32* %scevgep, align 4, !tbaa !1*/
		main_208_209 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %208*/
	/*   %210 = icmp eq i32 %209, %207*/
		main_208_210 = (main_208_209 == main_205_207_reg);
end
always @(*) begin
	/* main: %208*/
	/*   %.v_in_hamilton_path.0.i = select i1 %210, i8 1, i8 %v_in_hamilton_path.02.i*/
		main_208_v_in_hamilton_path0i = (main_208_210 ? 8'd1 : main_208_v_in_hamilton_path02i_reg);
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %.v_in_hamilton_path.0.i = select i1 %210, i8 1, i8 %v_in_hamilton_path.02.i*/
	if ((cur_state == LEGUP_F_main_BB__208_269)) begin
		main_208_v_in_hamilton_path0i_reg <= main_208_v_in_hamilton_path0i;
		if (start == 1'b0 && ^(main_208_v_in_hamilton_path0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_v_in_hamilton_path0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %211 = add nsw i32 %j.01.i, 1*/
		main_208_211 = (main_208_j01i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %211 = add nsw i32 %j.01.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		main_208_211_reg <= main_208_211;
		if (start == 1'b0 && ^(main_208_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %exitcond = icmp eq i32 %211, 24*/
		main_208_exitcond = (main_208_211 == 32'd24);
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %exitcond = icmp eq i32 %211, 24*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		main_208_exitcond_reg <= main_208_exitcond;
		if (start == 1'b0 && ^(main_208_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %213 = icmp eq i8 %.v_in_hamilton_path.0.i, 0*/
		main_212_213 = (main_208_v_in_hamilton_path0i_reg == 8'd0);
end
always @(*) begin
	/* main: %214*/
	/*   %215 = getelementptr inbounds [24 x i32]* @hamilton_path, i32 0, i32 %path_index.04.i*/
		main_214_215 = (`TAG_g_hamilton_path_a + (4 * main_205_path_index04i_reg));
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %215 = getelementptr inbounds [24 x i32]* @hamilton_path, i32 0, i32 %path_index.04.i*/
	if ((cur_state == LEGUP_F_main_BB__214_271)) begin
		main_214_215_reg <= main_214_215;
		if (start == 1'b0 && ^(main_214_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %214*/
	/*   %216 = add nsw i32 %path_index.04.i, -1*/
		main_214_216 = (main_205_path_index04i_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %216 = add nsw i32 %path_index.04.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__214_271)) begin
		main_214_216_reg <= main_214_216;
		if (start == 1'b0 && ^(main_214_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %214*/
	/*   %217 = getelementptr inbounds [24 x i32]* @hamilton_path, i32 0, i32 %216*/
		main_214_217 = (`TAG_g_hamilton_path_a + (4 * main_214_216_reg));
end
always @(*) begin
	/* main: %214*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
		main_214_218 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %214*/
	/*   %219 = getelementptr inbounds [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %218, i32 %207*/
		main_214_219 = (`TAG_g_adj_matrix_a + ((96 * main_214_218) + (4 * main_205_207_reg)));
end
always @(*) begin
	/* main: %214*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
		main_214_220 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %214*/
	/*   %221 = add nsw i32 %220, %total_weight.05.i*/
		main_214_221 = (main_214_220 + main_205_total_weight05i_reg);
end
always @(*) begin
	/* main: %214*/
	/*   %222 = add nsw i32 %path_index.04.i, 1*/
		main_214_222 = (main_205_path_index04i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %222 = add nsw i32 %path_index.04.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__214_271)) begin
		main_214_222_reg <= main_214_222;
		if (start == 1'b0 && ^(main_214_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %223*/
	/*   %path_index.1.i = phi i32 [ %path_index.04.i, %212 ], [ %222, %214 ]*/
	if ((((cur_state == LEGUP_F_main_BB__212_270) & (memory_controller_waitrequest == 1'd0)) & (main_212_213 == 1'd0))) begin
		main_223_path_index1i = main_205_path_index04i_reg;
	end
	/* main: %223*/
	/*   %path_index.1.i = phi i32 [ %path_index.04.i, %212 ], [ %222, %214 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__214_276) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_223_path_index1i = main_214_222_reg;
	end
end
always @(posedge clk) begin
	/* main: %223*/
	/*   %path_index.1.i = phi i32 [ %path_index.04.i, %212 ], [ %222, %214 ]*/
	if ((((cur_state == LEGUP_F_main_BB__212_270) & (memory_controller_waitrequest == 1'd0)) & (main_212_213 == 1'd0))) begin
		main_223_path_index1i_reg <= main_223_path_index1i;
		if (start == 1'b0 && ^(main_223_path_index1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_223_path_index1i_reg"); $finish; end
	end
	/* main: %223*/
	/*   %path_index.1.i = phi i32 [ %path_index.04.i, %212 ], [ %222, %214 ]*/
	if (((cur_state == LEGUP_F_main_BB__214_276) & (memory_controller_waitrequest == 1'd0))) begin
		main_223_path_index1i_reg <= main_223_path_index1i;
		if (start == 1'b0 && ^(main_223_path_index1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_223_path_index1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %223*/
	/*   %total_weight.1.i = phi i32 [ %total_weight.05.i, %212 ], [ %221, %214 ]*/
	if ((((cur_state == LEGUP_F_main_BB__212_270) & (memory_controller_waitrequest == 1'd0)) & (main_212_213 == 1'd0))) begin
		main_223_total_weight1i = main_205_total_weight05i_reg;
	end
	/* main: %223*/
	/*   %total_weight.1.i = phi i32 [ %total_weight.05.i, %212 ], [ %221, %214 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__214_276) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_223_total_weight1i = main_214_221;
	end
end
always @(posedge clk) begin
	/* main: %223*/
	/*   %total_weight.1.i = phi i32 [ %total_weight.05.i, %212 ], [ %221, %214 ]*/
	if ((((cur_state == LEGUP_F_main_BB__212_270) & (memory_controller_waitrequest == 1'd0)) & (main_212_213 == 1'd0))) begin
		main_223_total_weight1i_reg <= main_223_total_weight1i;
		if (start == 1'b0 && ^(main_223_total_weight1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_223_total_weight1i_reg"); $finish; end
	end
	/* main: %223*/
	/*   %total_weight.1.i = phi i32 [ %total_weight.05.i, %212 ], [ %221, %214 ]*/
	if (((cur_state == LEGUP_F_main_BB__214_276) & (memory_controller_waitrequest == 1'd0))) begin
		main_223_total_weight1i_reg <= main_223_total_weight1i;
		if (start == 1'b0 && ^(main_223_total_weight1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_223_total_weight1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %223*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_223_indvarnext = (main_205_indvar_reg + 32'd1);
end
always @(*) begin
	/* main: %223*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 44*/
		main_223_exitcond2 = (main_223_indvarnext == 32'd44);
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %224 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
		main_find_hamiltonian_pathexit_224 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %225 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 23), align 4, !tbaa !1*/
		main_find_hamiltonian_pathexit_225 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %226 = getelementptr inbounds [24 x [24 x i32]]* @adj_matrix, i32 0, i32 %225, i32 %224*/
		main_find_hamiltonian_pathexit_226 = (`TAG_g_adj_matrix_a + ((96 * main_find_hamiltonian_pathexit_225) + (4 * main_find_hamiltonian_pathexit_224)));
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
		main_find_hamiltonian_pathexit_227 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %228 = add nsw i32 %227, %total_weight.1.i*/
		main_find_hamiltonian_pathexit_228 = (main_find_hamiltonian_pathexit_227 + main_223_total_weight1i_reg);
end
always @(*) begin
	/* main: %find_hamiltonian_path.exit*/
	/*   %230 = icmp slt i32 %228, 321*/
		main_find_hamiltonian_pathexit_230 = ($signed(main_find_hamiltonian_pathexit_228) < $signed(32'd321));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_F_main_BB__175_239)) begin
		is_bridge_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_240)) begin
		is_bridge_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_start"); $finish; end
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_F_main_BB__186_247)) begin
		is_bridge_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_248)) begin
		is_bridge_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_F_main_BB__175_239)) begin
		is_bridge_arg_a <= main_170_171_reg;
		if (start == 1'b0 && ^(main_170_171_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_arg_a"); $finish; end
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_F_main_BB__186_247)) begin
		is_bridge_arg_a <= main_170_174_reg;
		if (start == 1'b0 && ^(main_170_174_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_arg_a"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_F_main_BB__175_239)) begin
		is_bridge_arg_b <= main_170_174_reg;
		if (start == 1'b0 && ^(main_170_174_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_arg_b"); $finish; end
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_F_main_BB__186_247)) begin
		is_bridge_arg_b <= main_170_171_reg;
		if (start == 1'b0 && ^(main_170_171_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_arg_b"); $finish; end
	end
end
always @(*) begin
	is_bridge_finish_final = is_bridge_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__175_239))) begin
		is_bridge_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_finish_reg"); $finish; end
	end
	if (is_bridge_finish) begin
		is_bridge_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__186_247))) begin
		is_bridge_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_finish_reg"); $finish; end
	end
	if (is_bridge_finish) begin
		is_bridge_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__175_239))) begin
		is_bridge_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_return_val_reg"); $finish; end
	end
	if (is_bridge_finish) begin
		is_bridge_return_val_reg <= is_bridge_return_val;
		if (start == 1'b0 && ^(is_bridge_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__186_247))) begin
		is_bridge_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_return_val_reg"); $finish; end
	end
	if (is_bridge_finish) begin
		is_bridge_return_val_reg <= is_bridge_return_val;
		if (start == 1'b0 && ^(is_bridge_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to is_bridge_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		legup_function_call = 1'd1;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %26 = sdiv i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		main_signed_divide_32_0_op0 = main_22_23_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %39 = sdiv i32 %35, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) */ begin
		main_signed_divide_32_0_op0 = main_lrph2i_35_reg;
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader.i*/
	/*   %26 = sdiv i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %._crit_edge.i.i*/
	/*   %39 = sdiv i32 %35, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_lrphipreheaderi_26_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_lrphipreheaderi_26_out = lpm_divide_main_lrphipreheaderi_26_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_lrphipreheaderi_26_out;
end
always @(*) begin
	lpm_mult_main_preheaderi3_2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i3*/
	/*   %2 = mul i32 %i.03.i1, 25*/
	if ((lpm_mult_main_preheaderi3_2_en == 1'd1)) begin
		main_preheaderi3_2_stage0_reg <= (main_preheaderi3_i03i1_reg * 32'd25);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_7_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %7 = mul i32 %i.03.i, 24*/
	if ((lpm_mult_main_preheaderi_7_en == 1'd1)) begin
		main_preheaderi_7_stage0_reg <= (main_preheaderi_i03i_reg * 32'd24);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %233*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__233_284)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_enable_a = is_bridge_memory_controller_enable_a;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_enable_a = is_bridge_memory_controller_enable_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_enable_a = is_bridge_memory_controller_enable_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_enable_a = is_bridge_memory_controller_enable_a;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 3000, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 5, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 6, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 11, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 12, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 17, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 18, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 23, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 2, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 4, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 6, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 8, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 10, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 12, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 14, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 16, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 18, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 20, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 22, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %11 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   store i16 %6, i16* %scevgep4748, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   store i16 %12, i16* %scevgep45, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %30 = load i16* %29, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %33, %struct.edge** %37, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_140)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %53 = load %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_148)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* null, %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_151)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %56*/
	/*   %58 = load %struct.edge** %57, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %56*/
	/*   %60 = load i16* %59, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %67*/
	/*   %71 = load i16* %70, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %77*/
	/*   store %struct.edge* %73, %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_166)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %81 = load i16* %80, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_175)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %97*/
	/*   store i32 %93, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__97_178)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   %112 = load i16* %scevgep2829, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   %114 = load i16* %scevgep26, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i16 %112, i16* %scevgep34, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i16 %114, i16* %scevgep31, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %120*/
	/*   store i32 0, i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__120_195)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %123*/
	/*   %124 = load i16* %scevgep11, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__123_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %130*/
	/*   %131 = load i16* %scevgep89, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__130_204)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %147*/
	/*   %148 = load i16* %scevgep18, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %153*/
	/*   store i32 %152, i32* %154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %158*/
	/*   store i32 %149, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %178*/
	/*   %179 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %189*/
	/*   %190 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %200*/
	/*   store i32 -1, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %204 = load i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_259)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %204, i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_261)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %208*/
	/*   %209 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %214*/
	/*   store i32 %207, i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_273)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %224 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_a;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_a;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_address_a = main_preheaderi3_scevgep86;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_address_a = main_preheaderi3_scevgep84_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_address_a = main_preheaderi3_scevgep82_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_address_a = main_preheaderi3_scevgep80_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_address_a = main_preheaderi3_scevgep78_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_address_a = main_preheaderi3_scevgep76_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_address_a = main_preheaderi3_scevgep74_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_address_a = main_preheaderi3_scevgep72_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_address_a = main_preheaderi3_scevgep70_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_address_a = main_preheaderi3_scevgep68_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_address_a = main_preheaderi3_scevgep66_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_address_a = main_preheaderi3_scevgep64_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 3000, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_14)) begin
		memory_controller_address_a = main_preheaderi3_scevgep62_reg;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + (4 * 32'd1));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd4) + (4 * 32'd3)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 5, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd5) + (4 * 32'd4)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 6, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd6) + (4 * 32'd7)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd7) + (4 * 32'd8)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd7) + (4 * 32'd4)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd10) + (4 * 32'd9)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 11, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd11) + (4 * 32'd10)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 12, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd12) + (4 * 32'd13)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd13) + (4 * 32'd14)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd13) + (4 * 32'd10)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd16) + (4 * 32'd15)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 17, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd17) + (4 * 32'd16)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 18, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd18) + (4 * 32'd19)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd19) + (4 * 32'd20)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd19) + (4 * 32'd16)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd22) + (4 * 32'd21)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 23, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_address_a = (`TAG_g_adj_matrix_a + ((96 * 32'd23) + (4 * 32'd22)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_address_a = `TAG_g_ufind_groups_a;
	end
	/* main: %init_adj.exit*/
	/*   store i32 2, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd2));
	end
	/* main: %init_adj.exit*/
	/*   store i32 4, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd4));
	end
	/* main: %init_adj.exit*/
	/*   store i32 6, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd6));
	end
	/* main: %init_adj.exit*/
	/*   store i32 8, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd8));
	end
	/* main: %init_adj.exit*/
	/*   store i32 10, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd10));
	end
	/* main: %init_adj.exit*/
	/*   store i32 12, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd12));
	end
	/* main: %init_adj.exit*/
	/*   store i32 14, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd14));
	end
	/* main: %init_adj.exit*/
	/*   store i32 16, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd16));
	end
	/* main: %init_adj.exit*/
	/*   store i32 18, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd18));
	end
	/* main: %init_adj.exit*/
	/*   store i32 20, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd20));
	end
	/* main: %init_adj.exit*/
	/*   store i32 22, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_address_a = (`TAG_g_ufind_groups_a + (4 * 32'd22));
	end
	/* main: %8*/
	/*   %11 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		memory_controller_address_a = main_8_scevgep49;
	end
	/* main: %8*/
	/*   store i16 %6, i16* %scevgep4748, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_address_a = main_8_scevgep4748;
	end
	/* main: %8*/
	/*   store i16 %12, i16* %scevgep45, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_address_a = main_8_scevgep45_reg;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		memory_controller_address_a = main_18_scevgep41_reg;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %30 = load i16* %29, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_100)) begin
		memory_controller_address_a = main_lrphipreheaderi_29;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %33, %struct.edge** %37, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_105)) begin
		memory_controller_address_a = main_lrph2i_37_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_140)) begin
		memory_controller_address_a = main__crit_edgeii_44_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		memory_controller_address_a = (`TAG_g_heap_a + (4 * 32'd1));
	end
	/* main: %.lr.ph.i*/
	/*   %53 = load %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_148)) begin
		memory_controller_address_a = main_lrphi_scevgep39;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* null, %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_151)) begin
		memory_controller_address_a = main_lrphi_scevgep39_reg;
	end
	/* main: %56*/
	/*   %58 = load %struct.edge** %57, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_address_a = main_56_57;
	end
	/* main: %56*/
	/*   %60 = load i16* %59, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_address_a = main_56_59;
	end
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_address_a = main_67_68;
	end
	/* main: %67*/
	/*   %71 = load i16* %70, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_address_a = main_67_70;
	end
	/* main: %77*/
	/*   store %struct.edge* %73, %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_166)) begin
		memory_controller_address_a = main_67_68_reg;
	end
	/* main: %get_min.exit.i*/
	/*   %81 = load i16* %80, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_address_a = main_get_minexiti_80;
	end
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_address_a = main_get_minexiti_85;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_175)) begin
		memory_controller_address_a = main_94_scevgep36;
	end
	/* main: %97*/
	/*   store i32 %93, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__97_178)) begin
		memory_controller_address_a = main_94_scevgep36_reg;
	end
	/* main: %110*/
	/*   %112 = load i16* %scevgep2829, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_address_a = main_110_scevgep2829;
	end
	/* main: %110*/
	/*   %114 = load i16* %scevgep26, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		memory_controller_address_a = main_110_scevgep26_reg;
	end
	/* main: %110*/
	/*   store i16 %112, i16* %scevgep34, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_address_a = main_110_scevgep34_reg;
	end
	/* main: %110*/
	/*   store i16 %114, i16* %scevgep31, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_address_a = main_110_scevgep31_reg;
	end
	/* main: %120*/
	/*   store i32 0, i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__120_195)) begin
		memory_controller_address_a = `TAG_g_euler_path_a;
	end
	/* main: %123*/
	/*   %124 = load i16* %scevgep11, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__123_198)) begin
		memory_controller_address_a = main_123_scevgep11;
	end
	/* main: %130*/
	/*   %131 = load i16* %scevgep89, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__130_204)) begin
		memory_controller_address_a = main_123_scevgep89_reg;
	end
	/* main: %147*/
	/*   %148 = load i16* %scevgep18, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_address_a = main_147_scevgep18;
	end
	/* main: %153*/
	/*   store i32 %152, i32* %154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_address_a = main_153_154;
	end
	/* main: %158*/
	/*   store i32 %149, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_address_a = main_158_159;
	end
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_address_a = main_preheader2i_scevgep14_reg;
	end
	/* main: %178*/
	/*   %179 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_address_a = main_preheader2i_scevgep1213_reg;
	end
	/* main: %189*/
	/*   %190 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_address_a = main_preheader2i_scevgep14_reg;
	end
	/* main: %200*/
	/*   store i32 -1, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		memory_controller_address_a = main_200_si0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %204 = load i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_259)) begin
		memory_controller_address_a = `TAG_g_euler_path_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %204, i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_261)) begin
		memory_controller_address_a = `TAG_g_hamilton_path_a;
	end
	/* main: %208*/
	/*   %209 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		memory_controller_address_a = main_208_scevgep;
	end
	/* main: %214*/
	/*   store i32 %207, i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_273)) begin
		memory_controller_address_a = main_214_215_reg;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %224 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_address_a = `TAG_g_hamilton_path_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_write_enable_a = is_bridge_memory_controller_write_enable_a;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_write_enable_a = is_bridge_memory_controller_write_enable_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_write_enable_a = is_bridge_memory_controller_write_enable_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_write_enable_a = is_bridge_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 3000, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 5, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 6, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 11, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 12, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 17, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 18, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 23, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 2, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 4, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 6, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 8, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 10, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 12, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 14, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 16, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 18, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 20, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 22, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %11 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %8*/
	/*   store i16 %6, i16* %scevgep4748, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   store i16 %12, i16* %scevgep45, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %30 = load i16* %29, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %33, %struct.edge** %37, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_105)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_140)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %53 = load %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_148)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* null, %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_151)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %56*/
	/*   %58 = load %struct.edge** %57, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %56*/
	/*   %60 = load i16* %59, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %67*/
	/*   %71 = load i16* %70, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %77*/
	/*   store %struct.edge* %73, %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_166)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %81 = load i16* %80, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_175)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %97*/
	/*   store i32 %93, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__97_178)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   %112 = load i16* %scevgep2829, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %110*/
	/*   %114 = load i16* %scevgep26, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %110*/
	/*   store i16 %112, i16* %scevgep34, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i16 %114, i16* %scevgep31, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %120*/
	/*   store i32 0, i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__120_195)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %123*/
	/*   %124 = load i16* %scevgep11, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__123_198)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %130*/
	/*   %131 = load i16* %scevgep89, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__130_204)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %147*/
	/*   %148 = load i16* %scevgep18, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %153*/
	/*   store i32 %152, i32* %154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %158*/
	/*   store i32 %149, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %178*/
	/*   %179 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %189*/
	/*   %190 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %200*/
	/*   store i32 -1, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %204 = load i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_259)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %204, i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_261)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %208*/
	/*   %209 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %214*/
	/*   store i32 %207, i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_273)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %224 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_a;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_a;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 3000, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_14)) begin
		memory_controller_in_a = 32'd3000;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 5, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 6, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 11, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 12, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 17, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 18, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 23, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %init_adj.exit*/
	/*   store i32 2, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_in_a = 32'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 4, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_in_a = 32'd4;
	end
	/* main: %init_adj.exit*/
	/*   store i32 6, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_in_a = 32'd6;
	end
	/* main: %init_adj.exit*/
	/*   store i32 8, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_in_a = 32'd8;
	end
	/* main: %init_adj.exit*/
	/*   store i32 10, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_in_a = 32'd10;
	end
	/* main: %init_adj.exit*/
	/*   store i32 12, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_in_a = 32'd12;
	end
	/* main: %init_adj.exit*/
	/*   store i32 14, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_in_a = 32'd14;
	end
	/* main: %init_adj.exit*/
	/*   store i32 16, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_in_a = 32'd16;
	end
	/* main: %init_adj.exit*/
	/*   store i32 18, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_in_a = 32'd18;
	end
	/* main: %init_adj.exit*/
	/*   store i32 20, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_in_a = 32'd20;
	end
	/* main: %init_adj.exit*/
	/*   store i32 22, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_in_a = 32'd22;
	end
	/* main: %8*/
	/*   store i16 %6, i16* %scevgep4748, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_in_a = main_preheaderi_6_reg;
	end
	/* main: %8*/
	/*   store i16 %12, i16* %scevgep45, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_in_a = main_8_12;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %33, %struct.edge** %37, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_105)) begin
		memory_controller_in_a = main_lrph2i_33_reg;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* null, %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_151)) begin
		memory_controller_in_a = 0;
	end
	/* main: %77*/
	/*   store %struct.edge* %73, %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_166)) begin
		memory_controller_in_a = main_67_73_reg;
	end
	/* main: %97*/
	/*   store i32 %93, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__97_178)) begin
		memory_controller_in_a = main_91_93_reg;
	end
	/* main: %110*/
	/*   store i16 %112, i16* %scevgep34, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_in_a = main_110_112;
	end
	/* main: %110*/
	/*   store i16 %114, i16* %scevgep31, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_in_a = main_110_114;
	end
	/* main: %120*/
	/*   store i32 0, i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__120_195)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %153*/
	/*   store i32 %152, i32* %154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_in_a = main_147_152_reg;
	end
	/* main: %158*/
	/*   store i32 %149, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_in_a = main_147_149_reg;
	end
	/* main: %200*/
	/*   store i32 -1, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		memory_controller_in_a = -32'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %204, i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_261)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_204;
	end
	/* main: %214*/
	/*   store i32 %207, i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_273)) begin
		memory_controller_in_a = main_205_207_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_size_a[1:0] = is_bridge_memory_controller_size_a;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_size_a[1:0] = is_bridge_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_size_a[1:0] = is_bridge_memory_controller_size_a;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_size_a[1:0] = is_bridge_memory_controller_size_a;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 3000, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 5, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 6, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 11, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 12, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 17, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 18, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 23, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 2, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 4, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 6, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 8, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 10, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 12, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 14, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 16, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 18, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 20, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 22, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %8*/
	/*   %11 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %8*/
	/*   store i16 %6, i16* %scevgep4748, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %8*/
	/*   store i16 %12, i16* %scevgep45, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %31 = load i16* %scevgep41, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_66)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %30 = load i16* %29, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_100)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %33, %struct.edge** %37, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i.i*/
	/*   %45 = load i16* %44, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_140)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %52 = load %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %53 = load %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_148)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* null, %struct.edge** %scevgep39, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_151)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %56*/
	/*   %58 = load %struct.edge** %57, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %56*/
	/*   %60 = load i16* %59, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %67*/
	/*   %69 = load %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %67*/
	/*   %71 = load i16* %70, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %77*/
	/*   store %struct.edge* %73, %struct.edge** %68, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_166)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %get_min.exit.i*/
	/*   %81 = load i16* %80, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_175)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %97*/
	/*   store i32 %93, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__97_178)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %110*/
	/*   %112 = load i16* %scevgep2829, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %110*/
	/*   %114 = load i16* %scevgep26, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_188)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %110*/
	/*   store i16 %112, i16* %scevgep34, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %110*/
	/*   store i16 %114, i16* %scevgep31, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %120*/
	/*   store i32 0, i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__120_195)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %123*/
	/*   %124 = load i16* %scevgep11, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__123_198)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %130*/
	/*   %131 = load i16* %scevgep89, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__130_204)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %147*/
	/*   %148 = load i16* %scevgep18, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %153*/
	/*   store i32 %152, i32* %154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %158*/
	/*   store i32 %149, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %170*/
	/*   %171 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %178*/
	/*   %179 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %189*/
	/*   %190 = load i16* %scevgep14, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %200*/
	/*   store i32 -1, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__200_257)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %204 = load i32* getelementptr inbounds ([46 x i32]* @euler_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_259)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %204, i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_261)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %208*/
	/*   %209 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__208_267)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %214*/
	/*   store i32 %207, i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_273)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %224 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_enable_b = is_bridge_memory_controller_enable_b;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_enable_b = is_bridge_memory_controller_enable_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_enable_b = is_bridge_memory_controller_enable_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_enable_b = is_bridge_memory_controller_enable_b;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 2, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 3, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 8, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 9, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 14, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 15, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 20, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 21, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 1, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 3, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 7, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 9, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 11, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 13, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 15, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 17, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 19, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 21, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 23, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %4*/
	/*   store %struct.edge* null, %struct.edge** %scevgep60, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %8*/
	/*   store i16 %10, i16* %scevgep46, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %8*/
	/*   store i16 0, i16* %scevgep44, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %22*/
	/*   store %struct.edge* %scevgep42, %struct.edge** %24, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__22_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %36, %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %43 = load i16* %42, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* %53, %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %56*/
	/*   %63 = load %struct.edge** %62, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %56*/
	/*   %65 = load i16* %64, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %67*/
	/*   %75 = load i16* %74, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %77*/
	/*   store %struct.edge* %69, %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   %104 = load i64* %102, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   store i64 %104, i64* %103, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_183)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   %113 = load i16* %scevgep27, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   store i16 %113, i16* %scevgep3233, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   store i16 0, i16* %scevgep30, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %118*/
	/*   store i32 -1, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %126*/
	/*   %127 = load i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__126_201)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i5*/
	/*   %145 = load i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %147*/
	/*   %151 = load i16* %scevgep1617, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %153*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %158*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.backedge._crit_edge.i*/
	/*   %.pre.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_227)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   %168 = load i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %178*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %178*/
	/*   store i32 %180, i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__178_244)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %189*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_252)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__205_264)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %214*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_272)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %214*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %225 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_280)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_b;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = is_bridge_memory_controller_address_b;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_address_b = main_preheaderi3_scevgep85;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_address_b = main_preheaderi3_scevgep83_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_address_b = main_preheaderi3_scevgep81_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_address_b = main_preheaderi3_scevgep79_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_address_b = main_preheaderi3_scevgep77_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_address_b = main_preheaderi3_scevgep75_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_address_b = main_preheaderi3_scevgep73_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_address_b = main_preheaderi3_scevgep71_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_address_b = main_preheaderi3_scevgep69_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_address_b = main_preheaderi3_scevgep67_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_address_b = main_preheaderi3_scevgep65_reg;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_address_b = main_preheaderi3_scevgep63_reg;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + (96 * 32'd1));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 2, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd2) + (4 * 32'd1)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 3, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd3) + (4 * 32'd4)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd4) + (4 * 32'd5)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd4) + (4 * 32'd1)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd7) + (4 * 32'd6)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 8, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd8) + (4 * 32'd7)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 9, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd9) + (4 * 32'd10)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd10) + (4 * 32'd11)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd10) + (4 * 32'd7)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd13) + (4 * 32'd12)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 14, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd14) + (4 * 32'd13)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 15, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd15) + (4 * 32'd16)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd16) + (4 * 32'd17)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd16) + (4 * 32'd13)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd19) + (4 * 32'd18)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 20, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd20) + (4 * 32'd19)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 21, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd21) + (4 * 32'd22)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd22) + (4 * 32'd23)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_address_b = (`TAG_g_adj_matrix_a + ((96 * 32'd22) + (4 * 32'd19)));
	end
	/* main: %init_adj.exit*/
	/*   store i32 1, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd1));
	end
	/* main: %init_adj.exit*/
	/*   store i32 3, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd3));
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd5));
	end
	/* main: %init_adj.exit*/
	/*   store i32 7, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd7));
	end
	/* main: %init_adj.exit*/
	/*   store i32 9, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd9));
	end
	/* main: %init_adj.exit*/
	/*   store i32 11, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd11));
	end
	/* main: %init_adj.exit*/
	/*   store i32 13, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd13));
	end
	/* main: %init_adj.exit*/
	/*   store i32 15, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd15));
	end
	/* main: %init_adj.exit*/
	/*   store i32 17, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd17));
	end
	/* main: %init_adj.exit*/
	/*   store i32 19, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd19));
	end
	/* main: %init_adj.exit*/
	/*   store i32 21, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd21));
	end
	/* main: %init_adj.exit*/
	/*   store i32 23, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_address_b = (`TAG_g_ufind_groups_a + (4 * 32'd23));
	end
	/* main: %4*/
	/*   store %struct.edge* null, %struct.edge** %scevgep60, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_50)) begin
		memory_controller_address_b = main_4_scevgep60;
	end
	/* main: %8*/
	/*   store i16 %10, i16* %scevgep46, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_address_b = main_8_scevgep46;
	end
	/* main: %8*/
	/*   store i16 0, i16* %scevgep44, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_address_b = main_8_scevgep44_reg;
	end
	/* main: %22*/
	/*   store %struct.edge* %scevgep42, %struct.edge** %24, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__22_64)) begin
		memory_controller_address_b = main_22_24;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		memory_controller_address_b = main_lrphipreheaderi_27;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %36, %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		memory_controller_address_b = main_lrph2i_34_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) begin
		memory_controller_address_b = main_lrph2i_34_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		memory_controller_address_b = main__crit_edgeii_40;
	end
	/* main: %._crit_edge.i.i*/
	/*   %43 = load i16* %42, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_141)) begin
		memory_controller_address_b = main__crit_edgeii_42;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* %53, %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_150)) begin
		memory_controller_address_b = (`TAG_g_heap_a + (4 * 32'd1));
	end
	/* main: %56*/
	/*   %63 = load %struct.edge** %62, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_address_b = main_56_62;
	end
	/* main: %56*/
	/*   %65 = load i16* %64, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_address_b = main_56_64;
	end
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_address_b = main_67_72;
	end
	/* main: %67*/
	/*   %75 = load i16* %74, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_address_b = main_67_74;
	end
	/* main: %77*/
	/*   store %struct.edge* %69, %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		memory_controller_address_b = main_67_72_reg;
	end
	/* main: %get_min.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_address_b = main_get_minexiti_82;
	end
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_address_b = main_get_minexiti_88;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   %104 = load i64* %102, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		memory_controller_address_b = main_ufind_join_groupsexiti_102;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   store i64 %104, i64* %103, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_183)) begin
		memory_controller_address_b = main_ufind_join_groupsexiti_103_reg;
	end
	/* main: %110*/
	/*   %113 = load i16* %scevgep27, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_address_b = main_110_scevgep27;
	end
	/* main: %110*/
	/*   store i16 %113, i16* %scevgep3233, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_address_b = main_110_scevgep3233_reg;
	end
	/* main: %110*/
	/*   store i16 0, i16* %scevgep30, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_address_b = main_110_scevgep30_reg;
	end
	/* main: %118*/
	/*   store i32 -1, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		memory_controller_address_b = main_118_scevgep24;
	end
	/* main: %126*/
	/*   %127 = load i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__126_201)) begin
		memory_controller_address_b = main_126_scevgep10;
	end
	/* main: %.preheader.i5*/
	/*   %145 = load i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		memory_controller_address_b = main_preheaderi5_scevgep19;
	end
	/* main: %147*/
	/*   %151 = load i16* %scevgep1617, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_address_b = main_147_scevgep1617;
	end
	/* main: %153*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_address_b = main_preheaderi5_scevgep19_reg;
	end
	/* main: %158*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_address_b = main_preheaderi5_scevgep19_reg;
	end
	/* main: %.backedge._crit_edge.i*/
	/*   %.pre.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_227)) begin
		memory_controller_address_b = main_121_phitransinserti_reg;
	end
	/* main: %.preheader2.i*/
	/*   %168 = load i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		memory_controller_address_b = main_preheader2i_scevgep15;
	end
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_address_b = main_preheader2i_scevgep1213_reg;
	end
	/* main: %178*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_address_b = main_preheader2i_scevgep15_reg;
	end
	/* main: %178*/
	/*   store i32 %180, i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__178_244)) begin
		memory_controller_address_b = main_178_181_reg;
	end
	/* main: %189*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_address_b = main_preheader2i_scevgep15_reg;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_252)) begin
		memory_controller_address_b = main_189_192_reg;
	end
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__205_264)) begin
		memory_controller_address_b = main_205_scevgep3;
	end
	/* main: %214*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_272)) begin
		memory_controller_address_b = main_214_217;
	end
	/* main: %214*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_274)) begin
		memory_controller_address_b = main_214_219;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %225 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_address_b = (`TAG_g_hamilton_path_a + (4 * 32'd23));
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_280)) begin
		memory_controller_address_b = main_find_hamiltonian_pathexit_226;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_write_enable_b = is_bridge_memory_controller_write_enable_b;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_write_enable_b = is_bridge_memory_controller_write_enable_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_write_enable_b = is_bridge_memory_controller_write_enable_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_write_enable_b = is_bridge_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 2, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 3, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 8, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 9, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 14, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 15, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 20, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 21, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 1, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 3, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 7, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 9, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 11, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 13, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 15, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 17, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 19, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 21, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 23, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %4*/
	/*   store %struct.edge* null, %struct.edge** %scevgep60, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_50)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %8*/
	/*   store i16 %10, i16* %scevgep46, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %8*/
	/*   store i16 0, i16* %scevgep44, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %22*/
	/*   store %struct.edge* %scevgep42, %struct.edge** %24, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__22_64)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %36, %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i.i*/
	/*   %43 = load i16* %42, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_141)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* %53, %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_150)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %56*/
	/*   %63 = load %struct.edge** %62, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %56*/
	/*   %65 = load i16* %64, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %67*/
	/*   %75 = load i16* %74, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %77*/
	/*   store %struct.edge* %69, %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   %104 = load i64* %102, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   store i64 %104, i64* %103, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_183)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   %113 = load i16* %scevgep27, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %110*/
	/*   store i16 %113, i16* %scevgep3233, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   store i16 0, i16* %scevgep30, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %118*/
	/*   store i32 -1, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %126*/
	/*   %127 = load i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__126_201)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i5*/
	/*   %145 = load i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %147*/
	/*   %151 = load i16* %scevgep1617, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %153*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %158*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.backedge._crit_edge.i*/
	/*   %.pre.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_227)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2.i*/
	/*   %168 = load i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %178*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %178*/
	/*   store i32 %180, i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__178_244)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %189*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_252)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__205_264)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %214*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_272)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %214*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_274)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %225 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_280)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_b;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = is_bridge_memory_controller_in_b;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_in_b = 32'd10;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 2, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 3, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 8, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 9, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 14, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 15, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 20, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 21, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 1, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_in_b = 32'd1;
	end
	/* main: %init_adj.exit*/
	/*   store i32 3, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_in_b = 32'd3;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_in_b = 32'd5;
	end
	/* main: %init_adj.exit*/
	/*   store i32 7, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_in_b = 32'd7;
	end
	/* main: %init_adj.exit*/
	/*   store i32 9, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_in_b = 32'd9;
	end
	/* main: %init_adj.exit*/
	/*   store i32 11, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_in_b = 32'd11;
	end
	/* main: %init_adj.exit*/
	/*   store i32 13, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_in_b = 32'd13;
	end
	/* main: %init_adj.exit*/
	/*   store i32 15, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_in_b = 32'd15;
	end
	/* main: %init_adj.exit*/
	/*   store i32 17, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_in_b = 32'd17;
	end
	/* main: %init_adj.exit*/
	/*   store i32 19, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_in_b = 32'd19;
	end
	/* main: %init_adj.exit*/
	/*   store i32 21, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_in_b = 32'd21;
	end
	/* main: %init_adj.exit*/
	/*   store i32 23, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_in_b = 32'd23;
	end
	/* main: %4*/
	/*   store %struct.edge* null, %struct.edge** %scevgep60, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_50)) begin
		memory_controller_in_b = 0;
	end
	/* main: %8*/
	/*   store i16 %10, i16* %scevgep46, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_in_b = main_8_10_reg;
	end
	/* main: %8*/
	/*   store i16 0, i16* %scevgep44, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_in_b = 16'd0;
	end
	/* main: %22*/
	/*   store %struct.edge* %scevgep42, %struct.edge** %24, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__22_64)) begin
		memory_controller_in_b = main_18_scevgep42_reg;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %36, %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		memory_controller_in_b = main_lrph2i_36_reg;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* %53, %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_150)) begin
		memory_controller_in_b = main_lrphi_53;
	end
	/* main: %77*/
	/*   store %struct.edge* %69, %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		memory_controller_in_b = main_67_69_reg;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   store i64 %104, i64* %103, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_183)) begin
		memory_controller_in_b = main_ufind_join_groupsexiti_104;
	end
	/* main: %110*/
	/*   store i16 %113, i16* %scevgep3233, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_in_b = main_110_113;
	end
	/* main: %110*/
	/*   store i16 0, i16* %scevgep30, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_in_b = 16'd0;
	end
	/* main: %118*/
	/*   store i32 -1, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %153*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_in_b = 16'd1;
	end
	/* main: %158*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_in_b = 16'd1;
	end
	/* main: %178*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_in_b = 16'd1;
	end
	/* main: %178*/
	/*   store i32 %180, i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__178_244)) begin
		memory_controller_in_b = main_178_180;
	end
	/* main: %189*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_in_b = 16'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_252)) begin
		memory_controller_in_b = main_189_191;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_size_b[1:0] = is_bridge_memory_controller_size_b;
	end
	/* main: %175*/
	/*   %176 = tail call fastcc signext i8 @is_bridge(i16 signext %171, i16 signext %174) #1*/
	if ((cur_state == LEGUP_function_call_240)) begin
		memory_controller_size_b[1:0] = is_bridge_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_size_b[1:0] = is_bridge_memory_controller_size_b;
	end
	/* main: %186*/
	/*   %187 = tail call fastcc signext i8 @is_bridge(i16 signext %174, i16 signext %171) #1*/
	if ((cur_state == LEGUP_function_call_248)) begin
		memory_controller_size_b[1:0] = is_bridge_memory_controller_size_b;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i3*/
	/*   store i32 10, i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi3_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 2, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 3, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 4, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 7, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 8, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 9, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 10, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 13, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 14, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 15, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 16, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 19, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 20, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 21, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x [24 x i32]]* @adj_matrix, i32 0, i32 22, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 1, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 3, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 5, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 7, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 9, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 11, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 13, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 15, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 17, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 19, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 21, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %init_adj.exit*/
	/*   store i32 23, i32* getelementptr inbounds ([24 x i32]* @ufind_groups, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_init_adjexit_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %4*/
	/*   store %struct.edge* null, %struct.edge** %scevgep60, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %8*/
	/*   store i16 %10, i16* %scevgep46, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__8_56)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %8*/
	/*   store i16 0, i16* %scevgep44, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__8_57)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %22*/
	/*   store %struct.edge* %scevgep42, %struct.edge** %24, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__22_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader.i*/
	/*   %28 = load %struct.edge** %27, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheaderi_98)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph2.i*/
	/*   store %struct.edge* %36, %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph2i_104)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.pre.i.i = load %struct.edge** %34, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_107)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i.i*/
	/*   %41 = load %struct.edge** %40, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_139)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i.i*/
	/*   %43 = load i16* %42, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_141)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store %struct.edge* %53, %struct.edge** getelementptr inbounds ([577 x %struct.edge*]* @heap, i32 0, i32 1), align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %56*/
	/*   %63 = load %struct.edge** %62, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_155)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %56*/
	/*   %65 = load i16* %64, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__56_157)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %67*/
	/*   %73 = load %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__67_160)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %67*/
	/*   %75 = load i16* %74, align 2, !tbaa !11*/
	if ((cur_state == LEGUP_F_main_BB__67_162)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %77*/
	/*   store %struct.edge* %69, %struct.edge** %72, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__77_165)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %get_min.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_169)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %get_min.exit.i*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_get_minexiti_171)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   %104 = load i64* %102, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_181)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %ufind_join_groups.exit.i*/
	/*   store i64 %104, i64* %103, align 2*/
	if ((cur_state == LEGUP_F_main_BB_ufind_join_groupsexiti_183)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %110*/
	/*   %113 = load i16* %scevgep27, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__110_187)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %110*/
	/*   store i16 %113, i16* %scevgep3233, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__110_189)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %110*/
	/*   store i16 0, i16* %scevgep30, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__110_190)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %118*/
	/*   store i32 -1, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_193)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %126*/
	/*   %127 = load i16* %scevgep10, align 2, !tbaa !10*/
	if ((cur_state == LEGUP_F_main_BB__126_201)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %.preheader.i5*/
	/*   %145 = load i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_213)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %147*/
	/*   %151 = load i16* %scevgep1617, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__147_216)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %153*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__153_219)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %158*/
	/*   store i16 1, i16* %scevgep19, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__158_222)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %.backedge._crit_edge.i*/
	/*   %.pre.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_backedge_crit_edgei_227)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2.i*/
	/*   %168 = load i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_233)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %170*/
	/*   %174 = load i16* %scevgep1213, align 2, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB__170_236)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %178*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__178_242)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %178*/
	/*   store i32 %180, i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__178_244)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %189*/
	/*   store i16 1, i16* %scevgep15, align 2, !tbaa !12*/
	if ((cur_state == LEGUP_F_main_BB__189_250)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_252)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %205*/
	/*   %207 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__205_264)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %214*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_272)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %214*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__214_274)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %225 = load i32* getelementptr inbounds ([24 x i32]* @hamilton_path, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_278)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %find_hamiltonian_path.exit*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_find_hamiltonian_pathexit_280)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %233*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__233_284)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (clken),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (clken),
	.rden_b (clken),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.data_a (data_a),
	.data_b (data_b)
);

defparam
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b,
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone V",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
	clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;

endmodule 
`timescale 1 ns / 1 ns
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (clken),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (clken),
	.rden_b (clken),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (),
	.byteena_b (),
	.wren_a (1'd0),
	.wren_b (1'd0),
	.data_a (),
	.data_b ()
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone V",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
	clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;

endmodule 
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
